{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.6", "generated_at": "2024-10-01T16:36:08.526902Z", "invocation_id": "82454423-2c77-4e98-9f1e-a05e589c6d64", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:39.383110Z", "completed_at": "2024-10-01T16:29:39.421763Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:39.430398Z", "completed_at": "2024-10-01T16:29:40.672388Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.7570598125457764, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766fd-010a-f912-0001-987f0111b31e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.input_layer.medication", "compiled": true, "compiled_code": "select \n      cast(null as TEXT ) as medication_id\n    , cast(null as TEXT ) as patient_id\n    , cast(null as TEXT ) as encounter_id\n    , cast(null as date) as dispensing_date\n    , cast(null as date) as prescribing_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as source_description\n    , cast(null as TEXT ) as ndc_code\n    , cast(null as TEXT ) as ndc_description\n    , cast(null as TEXT ) as rxnorm_code\n    , cast(null as TEXT ) as rxnorm_description\n    , cast(null as TEXT ) as atc_code\n    , cast(null as TEXT ) as atc_description\n    , cast(null as TEXT ) as route\n    , cast(null as TEXT ) as strength\n    , cast(null as integer ) as quantity\n    , cast(null as TEXT ) as quantity_unit\n    , cast(null as integer ) as days_supply\n    , cast(null as TEXT ) as practitioner_id\n    , cast(null as TEXT ) as data_source\n    , cast(null as TEXT ) as file_name\n    , cast(null as timestamp ) as ingest_datetime\nlimit 0", "relation_name": "tuva.input_layer.medication"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:39.360991Z", "completed_at": "2024-10-01T16:29:39.392057Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:39.418786Z", "completed_at": "2024-10-01T16:29:41.509849Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.3016746044158936, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766fd-010a-f8ce-0001-987f0111d31a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.input_layer.encounter", "compiled": true, "compiled_code": "select \n      cast(null as TEXT ) as encounter_id\n    , cast(null as TEXT ) as patient_id\n    , cast(null as TEXT ) as encounter_type\n    , cast(null as date) as encounter_start_date\n    , cast(null as date) as encounter_end_date\n    , cast(null as integer ) as length_of_stay\n    , cast(null as TEXT ) as admit_source_code\n    , cast(null as TEXT ) as admit_source_description\n    , cast(null as TEXT ) as admit_type_code\n    , cast(null as TEXT ) as admit_type_description\n    , cast(null as TEXT ) as discharge_disposition_code\n    , cast(null as TEXT ) as discharge_disposition_description\n    , cast(null as TEXT ) as attending_provider_id\n    , cast(null as TEXT ) as attending_provider_name\n    , cast(null as TEXT ) as facility_id\n    , cast(null as TEXT ) as facility_name\n    , cast(null as TEXT ) as primary_diagnosis_code_type\n    , cast(null as TEXT ) as primary_diagnosis_code\n    , cast(null as TEXT ) as primary_diagnosis_description\n    , cast(null as TEXT ) as ms_drg_code\n    , cast(null as TEXT ) as ms_drg_description\n    , cast(null as TEXT ) as apr_drg_code\n    , cast(null as TEXT ) as apr_drg_description\n    , cast(null as numeric(28,6) ) as paid_amount\n    , cast(null as numeric(28,6) ) as allowed_amount\n    , cast(null as numeric(28,6) ) as charge_amount\n    , cast(null as TEXT ) as data_source\n    , cast(null as TEXT ) as file_name\n    , cast(null as timestamp ) as ingest_datetime\nlimit 0", "relation_name": "tuva.input_layer.encounter"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:39.378483Z", "completed_at": "2024-10-01T16:29:39.418786Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:39.425834Z", "completed_at": "2024-10-01T16:29:41.520564Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.382411479949951, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766fd-010a-f913-0001-987f0111a30e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.input_layer.location", "compiled": true, "compiled_code": "select\n      cast(null as TEXT ) as location_id\n    , cast(null as TEXT ) as npi\n    , cast(null as TEXT ) as name\n    , cast(null as TEXT ) as facility_type\n    , cast(null as TEXT ) as parent_organization\n    , cast(null as TEXT ) as address\n    , cast(null as TEXT ) as city\n    , cast(null as TEXT ) as state\n    , cast(null as TEXT ) as zip_code\n    , cast(null as float ) as latitude\n    , cast(null as float ) as longitude\n    , cast(null as TEXT ) as data_source\n    , cast(null as TEXT ) as file_name\n    , cast(null as timestamp ) as ingest_datetime\nlimit 0", "relation_name": "tuva.input_layer.location"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:39.349437Z", "completed_at": "2024-10-01T16:29:39.377526Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:39.393037Z", "completed_at": "2024-10-01T16:29:41.595225Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.412259101867676, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766fd-010a-f912-0001-987f0111b31a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.input_layer.condition", "compiled": true, "compiled_code": "select\n      cast(null as TEXT ) as condition_id\n    , cast(null as TEXT ) as patient_id\n    , cast(null as TEXT ) as encounter_id\n    , cast(null as TEXT ) as claim_id\n    , cast(null as date) as recorded_date\n    , cast(null as date) as onset_date\n    , cast(null as date) as resolved_date\n    , cast(null as TEXT ) as status\n    , cast(null as TEXT ) as condition_type\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as source_description\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as TEXT ) as normalized_description\n    , cast(null as integer ) as condition_rank\n    , cast(null as TEXT ) as present_on_admit_code\n    , cast(null as TEXT ) as present_on_admit_description\n    , cast(null as TEXT ) as data_source\n    , cast(null as TEXT ) as file_name\n    , cast(null as timestamp ) as ingest_datetime\nlimit 0", "relation_name": "tuva.input_layer.condition"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:39.370484Z", "completed_at": "2024-10-01T16:29:39.417740Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:39.422819Z", "completed_at": "2024-10-01T16:29:41.585728Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.4120523929595947, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766fd-010a-f912-0001-987f0111b322"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.input_layer.lab_result", "compiled": true, "compiled_code": "select\n      cast(null as TEXT ) as lab_result_id\n    , cast(null as TEXT ) as patient_id\n    , cast(null as TEXT ) as encounter_id\n    , cast(null as TEXT ) as accession_number\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as source_description\n    , cast(null as TEXT ) as source_component\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as TEXT ) as normalized_description\n    , cast(null as TEXT ) as normalized_component\n    , cast(null as TEXT ) as status\n    , cast(null as TEXT ) as result\n    , cast(null as date) as result_date\n    , cast(null as date) as collection_date\n    , cast(null as TEXT ) as source_units\n    , cast(null as TEXT ) as normalized_units\n    , cast(null as TEXT ) as source_reference_range_low\n    , cast(null as TEXT ) as source_reference_range_high\n    , cast(null as TEXT ) as normalized_reference_range_low\n    , cast(null as TEXT ) as normalized_reference_range_high\n    , cast(null as integer ) as source_abnormal_flag\n    , cast(null as integer ) as normalized_abnormal_flag\n    , cast(null as TEXT ) as specimen\n    , cast(null as TEXT ) as ordering_practitioner_id\n    , cast(null as TEXT ) as data_source\n    , cast(null as TEXT ) as file_name\n    , cast(null as timestamp ) as ingest_datetime\nlimit 0", "relation_name": "tuva.input_layer.lab_result"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:41.122929Z", "completed_at": "2024-10-01T16:29:41.131686Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:41.132689Z", "completed_at": "2024-10-01T16:29:42.259400Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.2563600540161133, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766fd-010a-f8ce-0001-987f0111d31e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.input_layer.observation", "compiled": true, "compiled_code": "select\n      cast(null as TEXT ) as observation_id\n    , cast(null as TEXT ) as patient_id\n    , cast(null as TEXT ) as encounter_id\n    , cast(null as TEXT ) as panel_id\n    , cast(null as date) as observation_date\n    , cast(null as TEXT ) as observation_type\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as source_description\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as TEXT ) as normalized_description\n    , cast(null as TEXT ) as result\n    , cast(null as TEXT ) as source_units\n    , cast(null as TEXT ) as normalized_units\n    , cast(null as TEXT ) as source_reference_range_low\n    , cast(null as TEXT ) as source_reference_range_high\n    , cast(null as TEXT ) as normalized_reference_range_low\n    , cast(null as TEXT ) as normalized_reference_range_high\n    , cast(null as TEXT ) as data_source\n    , cast(null as TEXT ) as file_name\n    , cast(null as timestamp ) as ingest_datetime\nlimit 0", "relation_name": "tuva.input_layer.observation"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:41.777477Z", "completed_at": "2024-10-01T16:29:41.791823Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:41.793943Z", "completed_at": "2024-10-01T16:29:42.912290Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.304738998413086, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766fd-010a-f913-0001-987f0111a312"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034__performance_period", "compiled": true, "compiled_code": "\n/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\nwith period_end as (\n\n    select\n        cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', convert_timezone('UTC', current_timestamp()))\n        )\n\n\n        )\n\n\n        as date)\n        \n         as performance_period_end\n)\n\n/*\n    set performance period begin to a year and a day prior\n    for a complete calendar year\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    dateadd(\n        day,\n        1,\n        \n\n    dateadd(\n        year,\n        -1,\n        performance_period_end\n        )\n\n\n        )\n\n as performance_period_begin\n    from period_end\n\n)\n\n/*\n    set performance lookback periods for each type of test\n\n    during the measurement period:\n    - Fecal occult blood test (FOBT) during the measurement period\n\n    during the measurement period or the two years prior:\n    - Fecal immunochemical DNA test (FIT-DNA)\n\n    during the measurement period or the four years prior:\n    - Flexible sigmoidoscopy\n    - Computed tomography (CT) colonography\n\n    during the measurement period or the nine years prior:\n    - Colonoscopy\n\n*/\n, period_lookback as (\n\n    select\n          performance_period_end\n        , performance_period_begin\n        , \n\n    dateadd(\n        year,\n        -2,\n        performance_period_end\n        )\n\n as performance_period_begin_1yp\n        , \n\n    dateadd(\n        year,\n        -3,\n        performance_period_end\n        )\n\n as performance_period_begin_2yp\n        , \n\n    dateadd(\n        year,\n        -5,\n        performance_period_end\n        )\n\n as performance_period_begin_4yp\n        , \n\n    dateadd(\n        year,\n        -10,\n        performance_period_end\n        )\n\n as performance_period_begin_9yp\n    from period_begin\n\n)\n\nselect\n      cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\n    , cast(performance_period_begin_1yp as date) as performance_period_begin_1yp\n    , cast(performance_period_begin_2yp as date) as performance_period_begin_2yp\n    , cast(performance_period_begin_4yp as date) as performance_period_begin_4yp\n    , cast(performance_period_begin_9yp as date) as performance_period_begin_9yp\nfrom period_lookback", "relation_name": "dev_thuxuan.quality_measures._int_nqf0034__performance_period"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:41.654976Z", "completed_at": "2024-10-01T16:29:41.665409Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:41.666410Z", "completed_at": "2024-10-01T16:29:43.326103Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.7945964336395264, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766fd-010a-f8ce-0001-987f0111d322"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.input_layer.patient", "compiled": true, "compiled_code": "select\n      cast(null as TEXT ) as patient_id\n    , cast(null as TEXT ) as first_name\n    , cast(null as TEXT ) as last_name\n    , cast(null as TEXT ) as sex\n    , cast(null as TEXT ) as race\n    , cast(null as date) as birth_date\n    , cast(null as date) as death_date\n    , cast(null as integer ) as death_flag\n    , cast(null as TEXT ) as social_security_number\n    , cast(null as TEXT ) as address\n    , cast(null as TEXT ) as city\n    , cast(null as TEXT ) as state\n    , cast(null as TEXT ) as zip_code\n    , cast(null as TEXT ) as county\n    , cast(null as float ) as latitude\n    , cast(null as float ) as longitude\n    , cast(null as TEXT ) as data_source\n    , cast(null as TEXT ) as file_name\n    , cast(null as timestamp ) as ingest_datetime\nlimit 0", "relation_name": "tuva.input_layer.patient"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:41.737889Z", "completed_at": "2024-10-01T16:29:41.743846Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:41.745437Z", "completed_at": "2024-10-01T16:29:43.328606Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.7510464191436768, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766fd-010a-f912-0001-987f0111b326"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.input_layer.practitioner", "compiled": true, "compiled_code": "select\n      cast(null as TEXT ) as practitioner_id\n    , cast(null as TEXT ) as npi\n    , cast(null as TEXT ) as first_name\n    , cast(null as TEXT ) as last_name\n    , cast(null as TEXT ) as practice_affiliation\n    , cast(null as TEXT ) as specialty\n    , cast(null as TEXT ) as sub_specialty\n    , cast(null as TEXT ) as data_source\n    , cast(null as TEXT ) as file_name\n    , cast(null as timestamp ) as ingest_datetime\nlimit 0", "relation_name": "tuva.input_layer.practitioner"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:41.768474Z", "completed_at": "2024-10-01T16:29:41.785934Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:41.785934Z", "completed_at": "2024-10-01T16:29:43.656013Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.0355889797210693, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766fd-010a-f7c5-0001-987f0110bb4a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.input_layer.procedure", "compiled": true, "compiled_code": "select\n      cast(null as TEXT ) as procedure_id\n    , cast(null as TEXT ) as patient_id\n    , cast(null as TEXT ) as encounter_id\n    , cast(null as TEXT ) as claim_id\n    , cast(null as date) as procedure_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as source_description\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as TEXT ) as normalized_description\n    , cast(null as TEXT ) as modifier_1\n    , cast(null as TEXT ) as modifier_2\n    , cast(null as TEXT ) as modifier_3\n    , cast(null as TEXT ) as modifier_4\n    , cast(null as TEXT ) as modifier_5\n    , cast(null as TEXT ) as practitioner_id\n    , cast(null as TEXT ) as data_source\n    , cast(null as TEXT ) as file_name\n    , cast(null as timestamp ) as ingest_datetime\nlimit 0", "relation_name": "tuva.input_layer.procedure"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:42.400258Z", "completed_at": "2024-10-01T16:29:42.400258Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:42.401258Z", "completed_at": "2024-10-01T16:29:44.356239Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.1407196521759033, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.input_layer.eligibility_seed", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:43.087146Z", "completed_at": "2024-10-01T16:29:43.087146Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:43.087146Z", "completed_at": "2024-10-01T16:29:44.566052Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.7111594676971436, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.input_layer.lab_result_seed", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:43.454562Z", "completed_at": "2024-10-01T16:29:43.454562Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:43.454562Z", "completed_at": "2024-10-01T16:29:45.165316Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.8334331512451172, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.input_layer.medical_claim_seed", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:43.493935Z", "completed_at": "2024-10-01T16:29:43.493935Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:43.493935Z", "completed_at": "2024-10-01T16:29:45.183680Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.799872875213623, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.input_layer.observation_seed", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:43.807458Z", "completed_at": "2024-10-01T16:29:43.807458Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:43.807458Z", "completed_at": "2024-10-01T16:29:45.253432Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.5969009399414062, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.input_layer.pharmacy_claim_seed", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:44.540474Z", "completed_at": "2024-10-01T16:29:44.540474Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:44.540474Z", "completed_at": "2024-10-01T16:29:47.012020Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.591865062713623, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.ccsr__dxccsr_v2023_1_body_systems", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:44.803210Z", "completed_at": "2024-10-01T16:29:44.803210Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:44.803210Z", "completed_at": "2024-10-01T16:29:47.593796Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.909712314605713, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.ccsr__dxccsr_v2023_1_cleaned_map", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:45.409367Z", "completed_at": "2024-10-01T16:29:45.409367Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:45.410366Z", "completed_at": "2024-10-01T16:29:48.455219Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.2589211463928223, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.chronic_conditions__tuva_chronic_conditions_hierarchy", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:45.308321Z", "completed_at": "2024-10-01T16:29:45.308321Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:45.309320Z", "completed_at": "2024-10-01T16:29:48.458220Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 3.3620352745056152, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.chronic_conditions__cms_chronic_conditions_hierarchy", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:45.295311Z", "completed_at": "2024-10-01T16:29:45.295311Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:45.296316Z", "completed_at": "2024-10-01T16:29:48.972929Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.8254246711730957, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.ccsr__prccsr_v2023_1_cleaned_map", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:47.145286Z", "completed_at": "2024-10-01T16:29:47.145286Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:47.145286Z", "completed_at": "2024-10-01T16:29:50.695313Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 3.7647182941436768, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.clinical_concept_library__clinical_concepts", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:47.719052Z", "completed_at": "2024-10-01T16:29:47.719052Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:47.719052Z", "completed_at": "2024-10-01T16:29:51.320143Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 3.756934642791748, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.clinical_concept_library__coding_systems", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:48.682308Z", "completed_at": "2024-10-01T16:29:48.682308Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:48.683308Z", "completed_at": "2024-10-01T16:29:52.045206Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 3.499621629714966, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.cms_hcc__adjustment_rates", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:49.128655Z", "completed_at": "2024-10-01T16:29:49.128655Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:49.128655Z", "completed_at": "2024-10-01T16:29:52.236339Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.283092975616455, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.cms_hcc__cpt_hcpcs", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:48.675794Z", "completed_at": "2024-10-01T16:29:48.675794Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:48.676794Z", "completed_at": "2024-10-01T16:29:52.325721Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.780341386795044, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.clinical_concept_library__value_set_members", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:50.912083Z", "completed_at": "2024-10-01T16:29:50.912083Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:50.912083Z", "completed_at": "2024-10-01T16:29:53.871050Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 3.187124252319336, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.cms_hcc__demographic_factors", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:51.481347Z", "completed_at": "2024-10-01T16:29:51.481347Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:51.481347Z", "completed_at": "2024-10-01T16:29:54.196449Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.9299774169921875, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.cms_hcc__disabled_interaction_factors", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:52.474795Z", "completed_at": "2024-10-01T16:29:52.474795Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:52.477577Z", "completed_at": "2024-10-01T16:29:56.062054Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 3.727658987045288, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.cms_hcc__disease_factors", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:52.487831Z", "completed_at": "2024-10-01T16:29:52.487831Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:52.495035Z", "completed_at": "2024-10-01T16:29:56.065650Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.724682331085205, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.cms_hcc__disease_hierarchy", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:52.510439Z", "completed_at": "2024-10-01T16:29:52.510439Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:52.511951Z", "completed_at": "2024-10-01T16:29:56.199700Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.878257989883423, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.cms_hcc__disease_interaction_factors", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:54.106153Z", "completed_at": "2024-10-01T16:29:54.106153Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:54.106153Z", "completed_at": "2024-10-01T16:29:56.955637Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.9782981872558594, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.cms_hcc__enrollment_interaction_factors", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:54.417771Z", "completed_at": "2024-10-01T16:29:54.417771Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:54.418771Z", "completed_at": "2024-10-01T16:29:57.686351Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 3.386756658554077, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.cms_hcc__icd_10_cm_mappings", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:56.207282Z", "completed_at": "2024-10-01T16:29:56.207282Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:56.208024Z", "completed_at": "2024-10-01T16:29:58.650585Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.6380956172943115, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.cms_hcc__payment_hcc_count_factors", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:56.214636Z", "completed_at": "2024-10-01T16:29:56.214636Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:56.216655Z", "completed_at": "2024-10-01T16:29:58.752378Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.7879159450531006, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.data_quality__crosswalk_field_info", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:56.360250Z", "completed_at": "2024-10-01T16:29:56.360250Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:56.361755Z", "completed_at": "2024-10-01T16:29:58.990570Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.788184404373169, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.data_quality__crosswalk_field_to_mart", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:57.089096Z", "completed_at": "2024-10-01T16:29:57.089096Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:57.089096Z", "completed_at": "2024-10-01T16:29:59.612786Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.736868381500244, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.data_quality__crosswalk_mart_to_outcome_measure", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:57.813040Z", "completed_at": "2024-10-01T16:29:57.813040Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:57.813040Z", "completed_at": "2024-10-01T16:30:00.472872Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 3.0452518463134766, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.data_quality__crosswalk_measure_reasonable_ranges", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:58.849436Z", "completed_at": "2024-10-01T16:29:58.849436Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:58.850536Z", "completed_at": "2024-10-01T16:30:01.565223Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.84377384185791, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.ed_classification__categories", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:59.000290Z", "completed_at": "2024-10-01T16:29:59.000290Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:59.000290Z", "completed_at": "2024-10-01T16:30:02.249150Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.402090072631836, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.ed_classification__icd_10_cm_to_ccs", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:59.154433Z", "completed_at": "2024-10-01T16:29:59.154433Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:59.154433Z", "completed_at": "2024-10-01T16:30:02.149891Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.2488839626312256, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.ed_classification__johnston_icd10", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:29:59.830612Z", "completed_at": "2024-10-01T16:29:59.830612Z"}, {"name": "execute", "started_at": "2024-10-01T16:29:59.831655Z", "completed_at": "2024-10-01T16:30:02.965426Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 3.2717838287353516, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.ed_classification__johnston_icd9", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:00.861950Z", "completed_at": "2024-10-01T16:30:00.861950Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:00.861950Z", "completed_at": "2024-10-01T16:30:03.662133Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 3.0313563346862793, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.hcc_suspecting__clinical_concepts", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:01.697678Z", "completed_at": "2024-10-01T16:30:01.697678Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:01.698663Z", "completed_at": "2024-10-01T16:30:04.292334Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.8136656284332275, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.hcc_suspecting__hcc_descriptions", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:02.409314Z", "completed_at": "2024-10-01T16:30:02.409314Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:02.410334Z", "completed_at": "2024-10-01T16:30:07.639372Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 5.413508176803589, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.hcc_suspecting__icd_10_cm_mappings", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:03.107573Z", "completed_at": "2024-10-01T16:30:03.107573Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:03.108533Z", "completed_at": "2024-10-01T16:30:08.806441Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 5.868598461151123, "adapter_response": {"_message": "INSERT 10", "code": "INSERT", "rows_affected": 10}, "message": "INSERT 10", "failures": null, "unique_id": "seed.the_tuva_project.pqi__measures", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:04.517853Z", "completed_at": "2024-10-01T16:30:04.517853Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:04.518906Z", "completed_at": "2024-10-01T16:30:09.776894Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 5.376380681991577, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.quality_measures__concepts", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:07.829508Z", "completed_at": "2024-10-01T16:30:07.829508Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:07.829508Z", "completed_at": "2024-10-01T16:30:10.481886Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.8293187618255615, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.quality_measures__measures", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:03.901229Z", "completed_at": "2024-10-01T16:30:03.901229Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:03.902229Z", "completed_at": "2024-10-01T16:30:10.464958Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 6.759488821029663, "adapter_response": {"_message": "INSERT 6059", "code": "INSERT", "rows_affected": 6059}, "message": "INSERT 6059", "failures": null, "unique_id": "seed.the_tuva_project.pqi__value_sets", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:02.413894Z", "completed_at": "2024-10-01T16:30:02.413894Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:02.416911Z", "completed_at": "2024-10-01T16:30:10.695047Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 8.410627365112305, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.pharmacy__rxnorm_generic_available", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:08.982317Z", "completed_at": "2024-10-01T16:30:08.982317Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:08.983315Z", "completed_at": "2024-10-01T16:30:12.006276Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 3.3259854316711426, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.quality_measures__value_sets", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:10.826958Z", "completed_at": "2024-10-01T16:30:10.826958Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:10.826958Z", "completed_at": "2024-10-01T16:30:14.370994Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.717681646347046, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.readmissions__always_planned_ccs_procedure_category", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:10.678521Z", "completed_at": "2024-10-01T16:30:10.678521Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:10.682565Z", "completed_at": "2024-10-01T16:30:14.332043Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 3.8746891021728516, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.readmissions__always_planned_ccs_diagnosis_category", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:10.668994Z", "completed_at": "2024-10-01T16:30:10.668994Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:10.669994Z", "completed_at": "2024-10-01T16:30:14.433955Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.9354407787323, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.readmissions__acute_diagnosis_icd_10_cm", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:09.899293Z", "completed_at": "2024-10-01T16:30:09.899293Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:09.899293Z", "completed_at": "2024-10-01T16:30:14.430949Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 4.704183578491211, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.readmissions__acute_diagnosis_ccs", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:12.312794Z", "completed_at": "2024-10-01T16:30:12.312794Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:12.313799Z", "completed_at": "2024-10-01T16:30:15.890831Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 3.7541162967681885, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.readmissions__exclusion_ccs_diagnosis_category", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:14.855196Z", "completed_at": "2024-10-01T16:30:14.855196Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:14.858195Z", "completed_at": "2024-10-01T16:30:18.038794Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.324472665786743, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.readmissions__potentially_planned_ccs_procedure_category", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:14.865708Z", "completed_at": "2024-10-01T16:30:14.865708Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:14.867709Z", "completed_at": "2024-10-01T16:30:18.043827Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 3.422121047973633, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.readmissions__potentially_planned_icd_10_pcs", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:14.559190Z", "completed_at": "2024-10-01T16:30:14.559190Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:14.561738Z", "completed_at": "2024-10-01T16:30:18.324236Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 3.907207727432251, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.readmissions__icd_10_pcs_to_ccs", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:14.553189Z", "completed_at": "2024-10-01T16:30:14.553189Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:14.554189Z", "completed_at": "2024-10-01T16:30:18.682772Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 4.349586009979248, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.readmissions__icd_10_cm_to_ccs", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:16.074129Z", "completed_at": "2024-10-01T16:30:16.074129Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:16.075046Z", "completed_at": "2024-10-01T16:30:19.197861Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 3.3333137035369873, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.readmissions__specialty_cohort", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:18.907691Z", "completed_at": "2024-10-01T16:30:18.907691Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:18.907691Z", "completed_at": "2024-10-01T16:30:22.072997Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.738755464553833, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.reference_data__code_type", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:18.466915Z", "completed_at": "2024-10-01T16:30:18.466915Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:18.466915Z", "completed_at": "2024-10-01T16:30:21.699215Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 6.125716924667358, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.reference_data__calendar", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:19.413721Z", "completed_at": "2024-10-01T16:30:19.413721Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:19.413721Z", "completed_at": "2024-10-01T16:30:23.409167Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 5.319928407669067, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.reference_data__fips_county", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:18.281428Z", "completed_at": "2024-10-01T16:30:18.281428Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:18.282435Z", "completed_at": "2024-10-01T16:30:24.599257Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 6.4972243309021, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.reference_data__ansi_fips_state", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:18.178359Z", "completed_at": "2024-10-01T16:30:18.178359Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:18.179542Z", "completed_at": "2024-10-01T16:30:24.604257Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 6.691085577011108, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.readmissions__surgery_gynecology_cohort", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:22.651084Z", "completed_at": "2024-10-01T16:30:22.651084Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:22.652082Z", "completed_at": "2024-10-01T16:30:26.810304Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 4.325798988342285, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.reference_data__ssa_fips_state", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:24.606526Z", "completed_at": "2024-10-01T16:30:24.606526Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:24.606526Z", "completed_at": "2024-10-01T16:30:27.744761Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 3.3439548015594482, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.service_category__service_categories", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:24.737508Z", "completed_at": "2024-10-01T16:30:24.737508Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:24.738516Z", "completed_at": "2024-10-01T16:30:27.798268Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 3.2098233699798584, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__admit_source", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:24.784762Z", "completed_at": "2024-10-01T16:30:24.784762Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:24.785746Z", "completed_at": "2024-10-01T16:30:27.836672Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 3.1888413429260254, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__admit_type", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:24.872941Z", "completed_at": "2024-10-01T16:30:24.872941Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:24.873943Z", "completed_at": "2024-10-01T16:30:28.278477Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.534456729888916, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__apr_drg", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:26.983447Z", "completed_at": "2024-10-01T16:30:26.983447Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:26.983447Z", "completed_at": "2024-10-01T16:30:29.819533Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.0342702865600586, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__bill_type", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:27.955757Z", "completed_at": "2024-10-01T16:30:27.955757Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:27.956755Z", "completed_at": "2024-10-01T16:30:31.255363Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 3.4682400226593018, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__claim_type", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:27.960760Z", "completed_at": "2024-10-01T16:30:27.960760Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:27.963264Z", "completed_at": "2024-10-01T16:30:31.258384Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 3.4682180881500244, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__discharge_disposition", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:27.979766Z", "completed_at": "2024-10-01T16:30:27.979766Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:27.980771Z", "completed_at": "2024-10-01T16:30:31.256383Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 3.4453065395355225, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__encounter_type", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:28.411904Z", "completed_at": "2024-10-01T16:30:28.411904Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:28.412911Z", "completed_at": "2024-10-01T16:30:31.687591Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.4831719398498535, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__ethnicity", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:30.023708Z", "completed_at": "2024-10-01T16:30:30.023708Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:30.023708Z", "completed_at": "2024-10-01T16:30:32.996527Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.149256944656372, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__gender", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:31.433095Z", "completed_at": "2024-10-01T16:30:31.433095Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:31.434095Z", "completed_at": "2024-10-01T16:30:34.778341Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 3.5370736122131348, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__hcpcs_level_2", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:31.434095Z", "completed_at": "2024-10-01T16:30:31.434095Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:31.441118Z", "completed_at": "2024-10-01T16:30:34.971148Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 3.6897976398468018, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__hcpcs_to_rbcs", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:31.901236Z", "completed_at": "2024-10-01T16:30:31.901236Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:31.901236Z", "completed_at": "2024-10-01T16:30:34.974221Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.2256479263305664, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__icd_10_pcs", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:31.444095Z", "completed_at": "2024-10-01T16:30:31.444095Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:31.446848Z", "completed_at": "2024-10-01T16:30:35.058195Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 3.822209596633911, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__icd_10_cm", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:33.182665Z", "completed_at": "2024-10-01T16:30:33.182665Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:33.182665Z", "completed_at": "2024-10-01T16:30:36.678312Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.6660211086273193, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__icd_9_cm", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:34.978651Z", "completed_at": "2024-10-01T16:30:34.978651Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:34.979656Z", "completed_at": "2024-10-01T16:30:37.931766Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 3.1535260677337646, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__icd_9_pcs", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:35.144970Z", "completed_at": "2024-10-01T16:30:35.144970Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:35.145480Z", "completed_at": "2024-10-01T16:30:38.387170Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.3729817867279053, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__loinc_deprecated_mapping", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:35.262814Z", "completed_at": "2024-10-01T16:30:35.262814Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:35.263819Z", "completed_at": "2024-10-01T16:30:38.389097Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 3.2678074836730957, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__mdc", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:36.851925Z", "completed_at": "2024-10-01T16:30:36.851925Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:36.851925Z", "completed_at": "2024-10-01T16:30:40.090558Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.3894855976104736, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__medicare_dual_eligibility", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:35.126874Z", "completed_at": "2024-10-01T16:30:35.126874Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:35.128378Z", "completed_at": "2024-10-01T16:30:39.741976Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 5.177527904510498, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__loinc", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:38.138223Z", "completed_at": "2024-10-01T16:30:38.138223Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:38.138223Z", "completed_at": "2024-10-01T16:30:41.501444Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 3.4825944900512695, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__medicare_orec", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:39.199241Z", "completed_at": "2024-10-01T16:30:39.199241Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:39.203236Z", "completed_at": "2024-10-01T16:30:41.573637Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.583249568939209, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__ms_drg", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:39.193684Z", "completed_at": "2024-10-01T16:30:39.193684Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:39.195208Z", "completed_at": "2024-10-01T16:30:41.954183Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.4369568824768066, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__medicare_status", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:40.247965Z", "completed_at": "2024-10-01T16:30:40.247965Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:40.248964Z", "completed_at": "2024-10-01T16:30:43.202087Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.1358299255371094, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__ms_drg_weights_los", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:41.782550Z", "completed_at": "2024-10-01T16:30:41.782550Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:41.783570Z", "completed_at": "2024-10-01T16:30:44.973303Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 3.3927388191223145, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__payer_type", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:42.633526Z", "completed_at": "2024-10-01T16:30:42.633526Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:42.633526Z", "completed_at": "2024-10-01T16:30:45.495540Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.011766195297241, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__place_of_service", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:43.389712Z", "completed_at": "2024-10-01T16:30:43.389712Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:43.389712Z", "completed_at": "2024-10-01T16:30:45.906509Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.660378932952881, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__present_on_admission", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:40.309420Z", "completed_at": "2024-10-01T16:30:40.309420Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:40.309420Z", "completed_at": "2024-10-01T16:30:47.101827Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 6.934943914413452, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__ndc", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:45.648796Z", "completed_at": "2024-10-01T16:30:45.648796Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:45.649804Z", "completed_at": "2024-10-01T16:30:48.949205Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.4431095123291016, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__race", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:46.056969Z", "completed_at": "2024-10-01T16:30:46.056969Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:46.056969Z", "completed_at": "2024-10-01T16:30:49.106279Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.2991907596588135, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__revenue_center", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:47.248167Z", "completed_at": "2024-10-01T16:30:47.248167Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:47.248167Z", "completed_at": "2024-10-01T16:30:51.532387Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 4.400954961776733, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__rxnorm_brand_generic", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:49.096171Z", "completed_at": "2024-10-01T16:30:49.096171Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:49.096171Z", "completed_at": "2024-10-01T16:30:52.977002Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 4.034379482269287, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__rxnorm_to_atc", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:41.624807Z", "completed_at": "2024-10-01T16:30:41.624807Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:41.625806Z", "completed_at": "2024-10-01T16:30:53.875145Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 12.563449382781982, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__other_provider_taxonomy", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:49.361680Z", "completed_at": "2024-10-01T16:30:49.361680Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:49.361680Z", "completed_at": "2024-10-01T16:30:54.190367Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 5.0256898403167725, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__snomed_ct", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:54.390773Z", "completed_at": "2024-10-01T16:30:54.396578Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:54.397625Z", "completed_at": "2024-10-01T16:30:55.880922Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.6676347255706787, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766fe-010a-f913-0001-987f0111a42e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_atc_description", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'ATC_DESCRIPTION' as field_name\n    , case when m.atc_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(atc_description, 1, 255) as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_thuxuan.data_quality.medication_atc_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:54.195130Z", "completed_at": "2024-10-01T16:30:54.204162Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:54.205144Z", "completed_at": "2024-10-01T16:30:56.154511Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.0952389240264893, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766fe-010a-f6d9-0001-987f01112d92"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_medication", "compiled": true, "compiled_code": "\n\nselect\n    cast(medication_id as TEXT ) as medication_id\n    , cast(patient_id as TEXT ) as patient_id\n    , cast(encounter_id as TEXT ) as encounter_id\n    , try_cast( dispensing_date as date ) as dispensing_date\n    , try_cast( prescribing_date as date ) as prescribing_date\n    , cast(source_code_type as TEXT ) as source_code_type\n    , cast(source_code as TEXT ) as source_code\n    , cast(source_description as TEXT ) as source_description\n    , cast(ndc_code as TEXT ) as ndc_code\n    , cast(ndc_description as TEXT ) as ndc_description\n    , cast(rxnorm_code as TEXT ) as rxnorm_code\n    , cast(rxnorm_description as TEXT ) as rxnorm_description \n    , cast(atc_code as TEXT ) as atc_code\n    , cast(atc_description as TEXT ) as atc_description\n    , cast(route as TEXT ) as route\n    , cast(strength as TEXT ) as strength\n    , cast(quantity as integer ) as quantity\n    , cast(quantity_unit as TEXT ) as quantity_unit\n    , cast(days_supply as integer ) as days_supply\n    , cast(practitioner_id as TEXT ) as practitioner_id\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-10-01 16:29:14.142894+00:00' as timestamp ) as tuva_last_run\nfrom tuva.input_layer.medication", "relation_name": "dev_thuxuan.core._stg_clinical_medication"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:56.061904Z", "completed_at": "2024-10-01T16:30:56.066938Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:56.066938Z", "completed_at": "2024-10-01T16:30:57.709974Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.7674219608306885, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766fe-010a-f913-0001-987f0111a432"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_data_source", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'DATA_SOURCE' AS field_name\n    , case when m.data_source is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(data_source as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_thuxuan.data_quality.medication_data_source"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:56.296397Z", "completed_at": "2024-10-01T16:30:56.301423Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:56.302418Z", "completed_at": "2024-10-01T16:30:57.762977Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.684335708618164, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766fe-010a-f912-0001-987f0111b45a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_days_supply", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'DAYS_SUPPLY' AS field_name\n    , case when m.days_supply is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(days_supply as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_thuxuan.data_quality.medication_days_supply"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:57.834163Z", "completed_at": "2024-10-01T16:30:57.844167Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:57.845169Z", "completed_at": "2024-10-01T16:30:59.570736Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.9027352333068848, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766fe-010a-f913-0001-987f0111a436"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_dispensing_date", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'DISPENSING_DATE' as field_name\n    , case\n        when m.dispensing_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'invalid'\n        when m.dispensing_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.dispensing_date < m.prescribing_date then 'invalid'\n        when m.dispensing_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.dispensing_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'future'\n        when m.dispensing_date <= cast('1901-01-01' as date) then 'too old'\n        when m.dispensing_date < m.prescribing_date then 'Dispensing date before prescribing date'\n        else null\n    end as invalid_reason\n    , cast(dispensing_date as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_thuxuan.data_quality.medication_dispensing_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:57.985717Z", "completed_at": "2024-10-01T16:30:57.991717Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:57.992718Z", "completed_at": "2024-10-01T16:30:59.860983Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.077852725982666, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766fe-010a-f6d9-0001-987f01112d96"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_encounter_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'ENCOUNTER_ID' as field_name\n    , case when m.encounter_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(encounter_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_thuxuan.data_quality.medication_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:53.136399Z", "completed_at": "2024-10-01T16:30:53.136399Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:53.137404Z", "completed_at": "2024-10-01T16:31:00.748545Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 7.733053684234619, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__snomed_icd_10_map", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:59.740562Z", "completed_at": "2024-10-01T16:30:59.745306Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:59.746349Z", "completed_at": "2024-10-01T16:31:01.351753Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.78574538230896, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f913-0001-987f0111a43a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_medication_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'MEDICATION_ID' AS field_name\n    , case when m.medication_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(medication_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_thuxuan.data_quality.medication_medication_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:00.068271Z", "completed_at": "2024-10-01T16:31:00.072357Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:00.073271Z", "completed_at": "2024-10-01T16:31:01.877745Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.031337022781372, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b45e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_ndc_code", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'NDC_CODE' as field_name\n    , case when m.ndc_code is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(ndc_code as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_thuxuan.data_quality.medication_ndc_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:00.875719Z", "completed_at": "2024-10-01T16:31:00.880619Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:00.881612Z", "completed_at": "2024-10-01T16:31:02.228784Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.5981228351593018, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f913-0001-987f0111a43e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_patient_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'PATIENT_ID' as field_name\n    , case when m.patient_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(patient_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_thuxuan.data_quality.medication_patient_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:01.530431Z", "completed_at": "2024-10-01T16:31:01.535432Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:01.535432Z", "completed_at": "2024-10-01T16:31:03.341058Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.9479920864105225, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b462"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_practitioner_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'PRACTITIONER_ID' as field_name\n    , case when m.practitioner_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(practitioner_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_thuxuan.data_quality.medication_practitioner_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:02.479889Z", "completed_at": "2024-10-01T16:31:02.483895Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:02.484978Z", "completed_at": "2024-10-01T16:31:04.210293Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.8919060230255127, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f7c5-0001-987f0110bc8e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_quantity", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'QUANTITY' as field_name\n    , case when m.quantity is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(quantity as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_thuxuan.data_quality.medication_quantity"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:02.102339Z", "completed_at": "2024-10-01T16:31:02.222164Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:02.222164Z", "completed_at": "2024-10-01T16:31:04.247510Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.4990086555480957, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f913-0001-987f0111a442"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_prescribing_date", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'PRESCRIBING_DATE' as field_name\n    , case\n        when m.prescribing_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'invalid'\n        when m.prescribing_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.prescribing_date > m.dispensing_date then 'invalid'\n        when m.prescribing_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.prescribing_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'future'\n        when m.prescribing_date <= cast('1901-01-01' as date) then 'too old'\n        when m.prescribing_date > m.dispensing_date then 'Prescribing date after dispensing date'\n        else null\n    end as invalid_reason\n    , cast(prescribing_date as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_thuxuan.data_quality.medication_prescribing_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:03.484723Z", "completed_at": "2024-10-01T16:31:03.490809Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:03.490809Z", "completed_at": "2024-10-01T16:31:05.166658Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.306251049041748, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d436"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_quantity_unit", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'QUANTITY_UNIT' as field_name\n    , case when m.quantity_unit is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(quantity_unit as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_thuxuan.data_quality.medication_quantity_unit"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:04.376146Z", "completed_at": "2024-10-01T16:31:04.381131Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:04.381131Z", "completed_at": "2024-10-01T16:31:06.400707Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.1670899391174316, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f913-0001-987f0111a446"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_route", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'ROUTE' as field_name\n    , case when m.route is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(route as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_thuxuan.data_quality.medication_route"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:05.129762Z", "completed_at": "2024-10-01T16:31:05.134862Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:05.135798Z", "completed_at": "2024-10-01T16:31:07.105026Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.151893377304077, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f913-0001-987f0111a44a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_rxnorm_description", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'RXNORM_DESCRIPTION' as field_name\n    , case when m.rxnorm_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(rxnorm_description, 1, 255) as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_thuxuan.data_quality.medication_rxnorm_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:05.797594Z", "completed_at": "2024-10-01T16:31:05.802671Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:05.802671Z", "completed_at": "2024-10-01T16:31:07.504229Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.8695099353790283, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f6d9-0001-987f01112d9a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_source_code", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'SOURCE_CODE' as field_name\n    , case when m.source_code is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_code as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_thuxuan.data_quality.medication_source_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:06.548888Z", "completed_at": "2024-10-01T16:31:06.553891Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:06.553891Z", "completed_at": "2024-10-01T16:31:08.214601Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.8155403137207031, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f6d9-0001-987f01112d9e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_source_code_type", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'SOURCE_CODE_TYPE' as field_name\n    , case when m.source_code_type is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_code_type as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_thuxuan.data_quality.medication_source_code_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:45.181887Z", "completed_at": "2024-10-01T16:30:45.181887Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:45.182886Z", "completed_at": "2024-10-01T16:31:08.727463Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 23.734185695648193, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__provider", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:07.286798Z", "completed_at": "2024-10-01T16:31:07.293800Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:07.295314Z", "completed_at": "2024-10-01T16:31:09.246105Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.0840883255004883, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d43a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_source_description", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'SOURCE_DESCRIPTION' as field_name\n    , case when m.source_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(source_description, 1, 255) as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_thuxuan.data_quality.medication_source_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:30:51.654885Z", "completed_at": "2024-10-01T16:30:51.654885Z"}, {"name": "execute", "started_at": "2024-10-01T16:30:51.656428Z", "completed_at": "2024-10-01T16:31:09.260910Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 17.740538120269775, "adapter_response": {"_message": "INSERT 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0", "failures": null, "unique_id": "seed.the_tuva_project.terminology__snomed_ct_transitive_closures", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:07.672022Z", "completed_at": "2024-10-01T16:31:07.676585Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:07.676585Z", "completed_at": "2024-10-01T16:31:09.323366Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.9773266315460205, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d43e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_strength", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'STRENGTH' as field_name\n    , case when m.strength is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(strength as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_thuxuan.data_quality.medication_strength"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:08.369427Z", "completed_at": "2024-10-01T16:31:08.378827Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:08.378827Z", "completed_at": "2024-10-01T16:31:10.472448Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.36299729347229, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f6d9-0001-987f01112da2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_encounter", "compiled": true, "compiled_code": "\n\nselect \n    cast(encounter_id as TEXT ) as encounter_id\n    , cast(patient_id as TEXT ) as patient_id\n    , cast(encounter_type as TEXT ) as encounter_type\n    , try_cast( encounter_start_date as date ) as encounter_start_date\n    , try_cast( encounter_end_date as date ) as encounter_end_date\n    , cast(length_of_stay as integer ) as length_of_stay\n    , cast(admit_source_code as TEXT ) as admit_source_code\n    , cast(admit_source_description as TEXT ) as admit_source_description\n    , cast(admit_type_code as TEXT ) as admit_type_code\n    , cast(admit_type_description as TEXT ) as admit_type_description\n    , cast(discharge_disposition_code as TEXT ) as discharge_disposition_code\n    , cast(discharge_disposition_description as TEXT ) as discharge_disposition_description\n    , cast(attending_provider_id as TEXT ) as attending_provider_id\n    , cast(attending_provider_name as TEXT ) as attending_provider_name\n    , cast(facility_id as TEXT ) as facility_id\n    , cast(facility_name as TEXT ) as facility_name\n    , cast(primary_diagnosis_code_type as TEXT ) as primary_diagnosis_code_type\n    , cast(primary_diagnosis_code as TEXT ) as primary_diagnosis_code\n    , cast(primary_diagnosis_description as TEXT ) as primary_diagnosis_description\n    , cast(ms_drg_code as TEXT ) as ms_drg_code\n    , cast(ms_drg_description as TEXT ) as ms_drg_description \n    , cast(apr_drg_code as TEXT ) as apr_drg_code\n    , cast(apr_drg_description as TEXT ) as apr_drg_description\n    , cast(paid_amount as numeric(28,6) ) as paid_amount\n    , cast(allowed_amount as numeric(28,6) ) as allowed_amount\n    , cast(charge_amount as numeric(28,6) ) as charge_amount\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-10-01 16:29:14.142894+00:00' as timestamp ) as tuva_last_run\nfrom tuva.input_layer.encounter", "relation_name": "dev_thuxuan.core._stg_clinical_encounter"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:08.920101Z", "completed_at": "2024-10-01T16:31:08.926137Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:08.927118Z", "completed_at": "2024-10-01T16:31:10.592193Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.8350212574005127, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f913-0001-987f0111a44e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_admit_source_description", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'ADMIT_SOURCE_DESCRIPTION' AS field_name\n    , case when m.admit_source_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(admit_source_description, 1, 255) as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_thuxuan.data_quality.encounter_admit_source_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:09.378333Z", "completed_at": "2024-10-01T16:31:09.382483Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:09.383382Z", "completed_at": "2024-10-01T16:31:10.980078Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.7385094165802002, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f6d9-0001-987f01112da6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_admit_type_description", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    ,'ENCOUNTER' AS table_name\n    ,'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    ,'ADMIT_TYPE_DESCRIPTION' AS field_name\n    ,case when m.admit_type_description is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(substring(admit_type_description, 1, 255) as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_thuxuan.data_quality.encounter_admit_type_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:09.654329Z", "completed_at": "2024-10-01T16:31:09.661835Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:09.662842Z", "completed_at": "2024-10-01T16:31:11.067520Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.5765726566314697, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d442"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_apr_drg_description", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'APR_DRG_DESCRIPTION' AS field_name\n    , case when m.apr_drg_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(apr_drg_description, 1, 255) as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_thuxuan.data_quality.encounter_apr_drg_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:09.402608Z", "completed_at": "2024-10-01T16:31:09.406607Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:09.407590Z", "completed_at": "2024-10-01T16:31:11.228786Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.0025088787078857, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f913-0001-987f0111a452"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_allowed_amount", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'ALLOWED_AMOUNT' AS field_name\n    , case when m.allowed_amount is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(allowed_amount as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_thuxuan.data_quality.encounter_allowed_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:10.759332Z", "completed_at": "2024-10-01T16:31:10.765051Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:10.766025Z", "completed_at": "2024-10-01T16:31:12.275440Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.6354398727416992, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f7c5-0001-987f0110bc92"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_data_source", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    ,'ENCOUNTER' AS table_name\n    ,'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    ,'DATA_SOURCE' AS field_name\n    ,case when m.data_source is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(data_source as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_thuxuan.data_quality.encounter_data_source"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:11.125234Z", "completed_at": "2024-10-01T16:31:11.129506Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:11.130013Z", "completed_at": "2024-10-01T16:31:12.471437Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.4900074005126953, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f913-0001-987f0111a45a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_discharge_disposition_description", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'DISCHARGE_DISPOSITION_DESCRIPTION' AS field_name\n    , case when m.discharge_disposition_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(discharge_disposition_description, 1, 255) as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_thuxuan.data_quality.encounter_discharge_disposition_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:10.739481Z", "completed_at": "2024-10-01T16:31:10.743502Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:10.743502Z", "completed_at": "2024-10-01T16:31:12.475346Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.8777451515197754, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f913-0001-987f0111a456"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_charge_amount", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'CHARGE_AMOUNT' AS field_name\n    , case when m.charge_amount is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(charge_amount as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_thuxuan.data_quality.encounter_charge_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:11.236909Z", "completed_at": "2024-10-01T16:31:11.242992Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:11.243909Z", "completed_at": "2024-10-01T16:31:12.683243Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.610382318496704, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f6d9-0001-987f01112daa"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_encounter_end_date", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'ENCOUNTER_END_DATE' AS field_name\n    , case\n        when m.encounter_end_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'invalid'\n        when m.encounter_end_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.encounter_end_date < m.encounter_start_date then 'invalid'\n        when m.encounter_end_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.encounter_end_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'future'\n        when m.encounter_end_date <= cast('1901-01-01' as date) then 'too old'\n        when m.encounter_end_date < m.encounter_start_date then 'Encounter end date before encounter start date'\n        else null\n    end as invalid_reason\n    , cast(encounter_end_date as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_thuxuan.data_quality.encounter_encounter_end_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:11.408101Z", "completed_at": "2024-10-01T16:31:11.413602Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:11.414605Z", "completed_at": "2024-10-01T16:31:12.943674Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.7636826038360596, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b466"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_encounter_id", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'ENCOUNTER_ID' AS field_name\n    , case when m.encounter_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(encounter_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_thuxuan.data_quality.encounter_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:12.853306Z", "completed_at": "2024-10-01T16:31:12.858406Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:12.859354Z", "completed_at": "2024-10-01T16:31:13.984691Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2783775329589844, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d44a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_paid_amount", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    ,'ENCOUNTER' AS table_name\n    ,'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    ,'PAID_AMOUNT' AS field_name\n    ,case when m.paid_amount is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(paid_amount as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_thuxuan.data_quality.encounter_paid_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:12.628752Z", "completed_at": "2024-10-01T16:31:12.638912Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:12.639834Z", "completed_at": "2024-10-01T16:31:13.953699Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.5043537616729736, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d446"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_ms_drg_description", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'MS_DRG_DESCRIPTION' AS field_name\n    , case when m.ms_drg_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(ms_drg_description, 1, 255) as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_thuxuan.data_quality.encounter_ms_drg_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:12.623244Z", "completed_at": "2024-10-01T16:31:12.633922Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:12.633922Z", "completed_at": "2024-10-01T16:31:14.100484Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.6673216819763184, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f6d9-0001-987f01112dae"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_length_of_stay", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    ,'ENCOUNTER' AS table_name\n    ,'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    ,'LENGTH_OF_STAY' AS field_name\n    ,case when m.length_of_stay is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(length_of_stay as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_thuxuan.data_quality.encounter_length_of_stay"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:12.400411Z", "completed_at": "2024-10-01T16:31:12.406520Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:12.407448Z", "completed_at": "2024-10-01T16:31:14.305944Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.017470359802246, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f7c5-0001-987f0110bc96"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_encounter_start_date", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'ENCOUNTER_START_DATE' AS field_name\n    , case\n        when m.encounter_start_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'invalid'\n        when m.encounter_start_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.encounter_start_date > m.encounter_end_date then 'invalid'\n        when m.encounter_start_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.encounter_start_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'future'\n        when m.encounter_start_date <= cast('1901-01-01' as date) then 'too old'\n        when m.encounter_start_date > m.encounter_end_date then 'Encounter start date after encounter end date'\n        else null\n    end as invalid_reason\n    , cast(encounter_start_date as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_thuxuan.data_quality.encounter_encounter_start_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:13.175687Z", "completed_at": "2024-10-01T16:31:13.180731Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:13.180731Z", "completed_at": "2024-10-01T16:31:14.398288Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.355074167251587, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d44e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_patient_id", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    ,'ENCOUNTER' AS table_name\n    ,'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    ,'PATIENT_ID' AS field_name\n    ,case when m.patient_id is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(patient_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_thuxuan.data_quality.encounter_patient_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:14.138934Z", "completed_at": "2024-10-01T16:31:14.151006Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:14.151932Z", "completed_at": "2024-10-01T16:31:15.387614Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3930940628051758, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f7c5-0001-987f0110bc9a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_primary_diagnosis_description", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'PRIMARY_DIAGNOSIS_DESCRIPTION' AS field_name\n    , case when m.primary_diagnosis_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(primary_diagnosis_description, 1, 255) as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_thuxuan.data_quality.encounter_primary_diagnosis_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:14.144933Z", "completed_at": "2024-10-01T16:31:14.156031Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:14.159479Z", "completed_at": "2024-10-01T16:31:15.609553Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.604475498199463, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d452"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_location", "compiled": true, "compiled_code": "\n\nselect\n    cast(location_id as TEXT ) as location_id\n    , cast(npi as TEXT ) as npi\n    , cast(name as TEXT ) as name\n    , cast(facility_type as TEXT ) as facility_type\n    , cast(parent_organization as TEXT ) as parent_organization\n    , cast(address as TEXT ) as address\n    , cast(city as TEXT ) as city\n    , cast(state as TEXT ) as state\n    , cast(zip_code as TEXT ) as zip_code\n    , cast(latitude as float ) as latitude\n    , cast(longitude as float ) as longitude\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-10-01 16:29:14.142894+00:00' as timestamp ) as tuva_last_run\nfrom tuva.input_layer.location", "relation_name": "dev_thuxuan.core._stg_clinical_location"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:14.293567Z", "completed_at": "2024-10-01T16:31:14.305944Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:14.307944Z", "completed_at": "2024-10-01T16:31:16.154037Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.0102596282958984, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f6d9-0001-987f01112db2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__location_address", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'LOCATION' AS table_name\n    , 'Location ID' as drill_down_key\n    , coalesce(location_id, 'NULL') AS drill_down_value\n    , 'ADDRESS' AS field_name\n    , case when m.address is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(address as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.location m", "relation_name": "dev_thuxuan.data_quality.location_address"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:14.422909Z", "completed_at": "2024-10-01T16:31:14.431434Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:14.432434Z", "completed_at": "2024-10-01T16:31:16.225349Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.9638540744781494, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d456"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__location_city", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'LOCATION' AS table_name\n    , 'Location ID' as drill_down_key\n    , coalesce(location_id, 'NULL') AS drill_down_value\n    , 'CITY' AS field_name\n    , case when m.city is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(city as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.location m", "relation_name": "dev_thuxuan.data_quality.location_city"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:14.534766Z", "completed_at": "2024-10-01T16:31:14.540867Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:14.546449Z", "completed_at": "2024-10-01T16:31:16.332061Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.9816017150878906, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b46a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__location_data_source", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'LOCATION' AS table_name\n    , 'Location ID' as drill_down_key\n    , coalesce(location_id, 'NULL') AS drill_down_value\n    , 'DATA_SOURCE' AS field_name\n    , case when m.data_source is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(data_source as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.location m", "relation_name": "dev_thuxuan.data_quality.location_data_source"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:15.539400Z", "completed_at": "2024-10-01T16:31:15.545910Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:15.546919Z", "completed_at": "2024-10-01T16:31:16.952825Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.5619091987609863, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b46e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__location_facility_type", "compiled": true, "compiled_code": "\n\n\nSELECT\n    m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    ,'LOCATION' AS table_name\n    ,'Location ID' as drill_down_key\n    , coalesce(location_id, 'NULL') AS drill_down_value\n    ,'FACILITY_TYPE' AS field_name\n    ,case when m.facility_type is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(facility_type as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.location m", "relation_name": "dev_thuxuan.data_quality.location_facility_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:15.754471Z", "completed_at": "2024-10-01T16:31:15.760490Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:15.760490Z", "completed_at": "2024-10-01T16:31:17.163652Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.5399916172027588, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d45a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__location_latitude", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'LOCATION' AS table_name\n    , 'Location ID' as drill_down_key\n    , coalesce(location_id, 'NULL') AS drill_down_value\n    , 'LATITUDE' as field_name\n    , case when m.latitude is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(latitude as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.location m", "relation_name": "dev_thuxuan.data_quality.location_latitude"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:16.311758Z", "completed_at": "2024-10-01T16:31:16.318185Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:16.318185Z", "completed_at": "2024-10-01T16:31:17.550655Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.3769121170043945, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d45e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__location_location_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n    m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    ,'LOCATION' AS table_name\n    ,'Location ID' as drill_down_key\n    , coalesce(location_id, 'NULL') AS drill_down_value\n    ,'LOCATION_ID' AS field_name\n    ,case when m.location_id is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(location_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.location m", "relation_name": "dev_thuxuan.data_quality.location_location_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:16.393246Z", "completed_at": "2024-10-01T16:31:16.398756Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:16.398756Z", "completed_at": "2024-10-01T16:31:17.986967Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.7231075763702393, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f7c5-0001-987f0110bc9e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__location_longitude", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'LOCATION' AS table_name\n    , 'Location ID' as drill_down_key\n    , coalesce(location_id, 'NULL') AS drill_down_value\n    , 'LONGITUDE' as field_name\n    , case when m.longitude is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(longitude as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.location m", "relation_name": "dev_thuxuan.data_quality.location_longitude"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:16.521387Z", "completed_at": "2024-10-01T16:31:16.527375Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:16.527375Z", "completed_at": "2024-10-01T16:31:18.039717Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.727013111114502, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f7c5-0001-987f0110bca2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__location_name", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'LOCATION' AS table_name\n    , 'Location ID' as drill_down_key\n    , coalesce(location_id, 'NULL') AS drill_down_value\n    , 'NAME' as field_name\n    , case when m.name is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(name as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.location m", "relation_name": "dev_thuxuan.data_quality.location_name"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:17.361936Z", "completed_at": "2024-10-01T16:31:17.372931Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:17.372931Z", "completed_at": "2024-10-01T16:31:18.754405Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.5384483337402344, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d462"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__location_state", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'LOCATION' AS table_name\n    , 'Location ID' as drill_down_key\n    , coalesce(location_id, 'NULL') AS drill_down_value\n    , 'STATE' as field_name\n    , case when m.state is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(state as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.location m", "relation_name": "dev_thuxuan.data_quality.location_state"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:17.355016Z", "completed_at": "2024-10-01T16:31:17.368027Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:17.368937Z", "completed_at": "2024-10-01T16:31:18.712443Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.5484590530395508, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b472"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__location_parent_organization", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'LOCATION' AS table_name\n    , 'Location ID' as drill_down_key\n    , coalesce(location_id, 'NULL') AS drill_down_value\n    , 'PARENT_ORGANIZATION' AS field_name\n    , case when m.parent_organization is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(parent_organization as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.location m", "relation_name": "dev_thuxuan.data_quality.location_parent_organization"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:17.693207Z", "completed_at": "2024-10-01T16:31:17.698082Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:17.698991Z", "completed_at": "2024-10-01T16:31:19.265275Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.6958775520324707, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f7c5-0001-987f0110bca6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__location_zip_code", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'LOCATION' AS table_name\n    , 'Location ID' as drill_down_key\n    , coalesce(location_id, 'NULL') AS drill_down_value\n    , 'ZIP_CODE' as field_name\n    , case when m.zip_code is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(zip_code as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.location m", "relation_name": "dev_thuxuan.data_quality.location_zip_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:18.259289Z", "completed_at": "2024-10-01T16:31:18.265041Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:18.265041Z", "completed_at": "2024-10-01T16:31:19.810600Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.6708414554595947, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f7c5-0001-987f0110bcaa"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_claim_id", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    , 'CONDITION' AS table_name\n    , 'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    , 'CLAIM_ID' AS field_name\n    , case when m.claim_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(claim_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM tuva.input_layer.condition m", "relation_name": "dev_thuxuan.data_quality.condition_claim_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:18.121285Z", "completed_at": "2024-10-01T16:31:18.246350Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:18.248383Z", "completed_at": "2024-10-01T16:31:19.856180Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.855696201324463, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f913-0001-987f0111a45e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_condition", "compiled": true, "compiled_code": "\n\nselect\n    cast(condition_id as TEXT ) as condition_id\n    , cast(patient_id as TEXT ) as patient_id\n    , cast(encounter_id as TEXT ) as encounter_id\n    , cast(claim_id as TEXT ) as claim_id\n    , try_cast( recorded_date as date ) as recorded_date\n    , try_cast( onset_date as date ) as onset_date\n    , try_cast( resolved_date as date ) as resolved_date\n    , cast(status as TEXT ) as status\n    , cast(condition_type as TEXT ) as condition_type\n    , cast(source_code_type as TEXT ) as source_code_type\n    , cast(source_code as TEXT ) as source_code\n    , cast(source_description as TEXT ) as source_description\n    , cast(normalized_code_type as TEXT ) as normalized_code_type\n    , cast(normalized_code as TEXT ) as normalized_code\n    , cast(normalized_description as TEXT ) as normalized_description\n    , cast(condition_rank as integer ) as condition_rank\n    , cast(present_on_admit_code as TEXT ) as present_on_admit_code\n    , cast(present_on_admit_description as TEXT ) as present_on_admit_description\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-10-01 16:29:14.142894+00:00' as timestamp ) as tuva_last_run\nfrom tuva.input_layer.condition", "relation_name": "dev_thuxuan.core._stg_clinical_condition"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:18.914956Z", "completed_at": "2024-10-01T16:31:18.923956Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:18.928663Z", "completed_at": "2024-10-01T16:31:20.135658Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.35793137550354, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f7c5-0001-987f0110bcae"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_condition_rank", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    , 'CONDITION' AS table_name\n    , 'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    , 'CONDITION_RANK' AS field_name\n    , case when m.condition_rank is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(condition_rank as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_thuxuan.data_quality.condition_condition_rank"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:18.909355Z", "completed_at": "2024-10-01T16:31:18.918955Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:18.919956Z", "completed_at": "2024-10-01T16:31:20.268870Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.4880366325378418, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b476"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_condition_id", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    , 'CONDITION' AS table_name\n    , 'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    , 'CONDITION_ID' AS field_name\n    , case when m.condition_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(condition_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_thuxuan.data_quality.condition_condition_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:19.393681Z", "completed_at": "2024-10-01T16:31:19.399613Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:19.400606Z", "completed_at": "2024-10-01T16:31:20.634100Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.3628032207489014, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f913-0001-987f0111a462"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_condition_type", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    , 'CONDITION' AS table_name\n    , 'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    , 'CONDITION_TYPE' AS field_name\n    , case when m.condition_type is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(condition_type as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_thuxuan.data_quality.condition_condition_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:19.981516Z", "completed_at": "2024-10-01T16:31:19.986633Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:19.986633Z", "completed_at": "2024-10-01T16:31:21.324356Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.50758695602417, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d466"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_encounter_id", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    ,'CONDITION' AS table_name\n    ,'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    ,'ENCOUNTER_ID' AS field_name\n    ,case when m.encounter_id is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(encounter_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_thuxuan.data_quality.condition_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:20.276869Z", "completed_at": "2024-10-01T16:31:20.282423Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:20.282423Z", "completed_at": "2024-10-01T16:31:21.485136Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.374588966369629, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f913-0001-987f0111a466"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_normalized_description", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    , 'CONDITION' AS table_name\n    , 'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_DESCRIPTION' AS field_name\n    , case when m.normalized_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(normalized_description, 1, 255) as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_thuxuan.data_quality.condition_normalized_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:19.933993Z", "completed_at": "2024-10-01T16:31:19.938936Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:19.938936Z", "completed_at": "2024-10-01T16:31:21.517337Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.7470512390136719, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f7c5-0001-987f0110bcb2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_data_source", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    , 'CONDITION' AS table_name\n    , 'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    , 'DATA_SOURCE' AS field_name\n    , case when m.data_source is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(data_source as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_thuxuan.data_quality.condition_data_source"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:20.401438Z", "completed_at": "2024-10-01T16:31:20.407438Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:20.408437Z", "completed_at": "2024-10-01T16:31:21.741713Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.482804536819458, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f913-0001-987f0111a46a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_onset_date", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    ,'CONDITION' AS table_name\n    ,'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    ,'ONSET_DATE' AS field_name\n    ,case\n        when m.onset_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'invalid'\n        when m.onset_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.onset_date > m.resolved_date then 'invalid'\n        when m.onset_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    ,case\n        when m.onset_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'future'\n        when m.onset_date <= cast('1901-01-01' as date) then 'too old'\n        WHEN m.onset_date < m.resolved_date THEN 'Onset date after resolved date'\n        else null\n    end as invalid_reason\n    ,cast(onset_date as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_thuxuan.data_quality.condition_onset_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:20.761959Z", "completed_at": "2024-10-01T16:31:20.769055Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:20.769055Z", "completed_at": "2024-10-01T16:31:22.151197Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.503575086593628, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f6d9-0001-987f01112db6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_patient_id", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(m.recorded_date,cast('1900-01-01' as date) ) as source_date\n    ,'CONDITION' AS table_name\n    ,'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    ,'PATIENT_ID' AS field_name\n    ,case when m.patient_id is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(patient_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_thuxuan.data_quality.condition_patient_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:21.492656Z", "completed_at": "2024-10-01T16:31:21.497393Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:21.498322Z", "completed_at": "2024-10-01T16:31:22.899267Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.5539824962615967, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f913-0001-987f0111a46e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_present_on_admit_description", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    ,'CONDITION' AS table_name\n    ,'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    ,'PRESENT_ON_ADMIT_DESCRIPTION' AS field_name\n    ,case when m.present_on_admit_description is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(substring(present_on_admit_description, 1, 255) as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_thuxuan.data_quality.condition_present_on_admit_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:21.656549Z", "completed_at": "2024-10-01T16:31:21.662153Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:21.663195Z", "completed_at": "2024-10-01T16:31:22.892968Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3921239376068115, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d46a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_recorded_date", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    ,'CONDITION' AS table_name\n    ,'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    ,'RECORDED_DATE' AS field_name\n    ,CASE\n        when m.recorded_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'invalid'\n        when m.recorded_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.recorded_date < m.onset_date then 'invalid'\n        when m.recorded_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    ,case\n        when m.recorded_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'future'\n        when m.recorded_date <= cast('1901-01-01' as date) then 'too old'\n        WHEN m.recorded_date < m.onset_date THEN 'Recorded date before onset date'\n        else null\n    end as invalid_reason\n    ,cast(recorded_date as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_thuxuan.data_quality.condition_recorded_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:21.685874Z", "completed_at": "2024-10-01T16:31:21.692591Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:21.692591Z", "completed_at": "2024-10-01T16:31:22.958485Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.4251675605773926, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f6d9-0001-987f01112dba"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_resolved_date", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    , 'CONDITION' AS table_name\n    , 'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    , 'RESOLVED_DATE' AS field_name\n    , CASE\n        when m.resolved_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'invalid'\n        when m.resolved_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.resolved_date < m.onset_date then 'invalid'\n        when m.resolved_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.resolved_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'future'\n        when m.resolved_date <= cast('1901-01-01' as date) then 'too old'\n        when m.resolved_date < m.onset_date THEN 'Resolved date before onset date'\n        else null\n    end as invalid_reason\n    , cast(resolved_date as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_thuxuan.data_quality.condition_resolved_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:21.889317Z", "completed_at": "2024-10-01T16:31:21.895327Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:21.896333Z", "completed_at": "2024-10-01T16:31:23.170674Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.4784047603607178, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d46e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_source_code", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    ,'CONDITION' AS table_name\n    ,'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    ,'SOURCE_CODE' AS field_name\n    ,case when m.source_code is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(source_code as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_thuxuan.data_quality.condition_source_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:22.269005Z", "completed_at": "2024-10-01T16:31:22.273029Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:22.273929Z", "completed_at": "2024-10-01T16:31:23.531847Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.4165256023406982, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b47a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_source_code_type", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    , 'CONDITION' AS table_name\n    , 'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    , 'SOURCE_CODE_TYPE' AS field_name\n    , case when m.source_code_type is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_code_type as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_thuxuan.data_quality.condition_source_code_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:23.059671Z", "completed_at": "2024-10-01T16:31:23.064748Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:23.069764Z", "completed_at": "2024-10-01T16:31:24.518243Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.6124825477600098, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f7c5-0001-987f0110bcb6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_status", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    , 'CONDITION' AS table_name\n    , 'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    , 'STATUS' AS field_name\n    , case when m.status is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(status as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_thuxuan.data_quality.condition_status"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:23.054690Z", "completed_at": "2024-10-01T16:31:23.063748Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:23.064748Z", "completed_at": "2024-10-01T16:31:24.520114Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.613494634628296, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f913-0001-987f0111a472"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_source_description", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    , 'CONDITION' AS table_name\n    , 'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    , 'SOURCE_DESCRIPTION' AS field_name\n    , case when m.source_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(source_description, 1, 255) as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_thuxuan.data_quality.condition_source_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:23.373723Z", "completed_at": "2024-10-01T16:31:23.384244Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:23.385243Z", "completed_at": "2024-10-01T16:31:24.800700Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.5351357460021973, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f6d9-0001-987f01112dc2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_accession_number", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'ACCESSION_NUMBER' AS field_name\n    , case when m.accession_number is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(accession_number as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_thuxuan.data_quality.lab_result_accession_number"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:23.115810Z", "completed_at": "2024-10-01T16:31:23.126777Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:23.126777Z", "completed_at": "2024-10-01T16:31:24.920994Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.9393012523651123, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f6d9-0001-987f01112dbe"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_lab_result", "compiled": true, "compiled_code": "\n\nselect\n    cast(lab_result_id as TEXT ) as lab_result_id\n    , cast(patient_id as TEXT ) as patient_id\n    , cast(encounter_id as TEXT ) as encounter_id\n    , cast(accession_number as TEXT ) as accession_number\n    , cast(source_code_type as TEXT ) as source_code_type\n    , cast(source_code as TEXT ) as source_code\n    , cast(source_description as TEXT ) as source_description\n    , cast(source_component as TEXT ) as source_component\n    , cast(normalized_code_type as TEXT ) as normalized_code_type\n    , cast(normalized_code as TEXT ) as normalized_code\n    , cast(normalized_description as TEXT ) as normalized_description\n    , cast(normalized_component as TEXT ) as normalized_component\n    , cast(status as TEXT ) as status\n    , cast(result as TEXT ) as result\n    , try_cast( result_date as date ) as result_date\n    , try_cast( collection_date as date ) as collection_date\n    , cast(source_units as TEXT ) as source_units\n    , cast(normalized_units as TEXT ) as normalized_units\n    , cast(source_reference_range_low as TEXT ) as source_reference_range_low\n    , cast(source_reference_range_high as TEXT ) as source_reference_range_high\n    , cast(normalized_reference_range_low as TEXT ) as normalized_reference_range_low\n    , cast(normalized_reference_range_high as TEXT ) as normalized_reference_range_high\n    , cast(source_abnormal_flag as TEXT ) as source_abnormal_flag\n    , cast(normalized_abnormal_flag as TEXT ) as normalized_abnormal_flag\n    , cast(specimen as TEXT ) as specimen\n    , cast(ordering_practitioner_id as TEXT ) as ordering_practitioner_id\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-10-01 16:29:14.142894+00:00' as timestamp ) as tuva_last_run\nfrom tuva.input_layer.lab_result", "relation_name": "dev_thuxuan.core._stg_clinical_lab_result"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:23.689538Z", "completed_at": "2024-10-01T16:31:23.697389Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:23.698308Z", "completed_at": "2024-10-01T16:31:25.052991Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.5639030933380127, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b47e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_collection_date", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'COLLECTION_DATE' AS field_name\n    , case\n        when m.collection_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'invalid'\n        when m.collection_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.collection_date > m.result_date then 'invalid'\n        when m.collection_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.collection_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'future'\n        when m.collection_date <= cast('1901-01-01' as date) then 'too old'\n        when m.collection_date > m.result_date then 'Collection date after result date'\n        else null\n    end as invalid_reason\n    , cast(collection_date as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_thuxuan.data_quality.lab_result_collection_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:24.674437Z", "completed_at": "2024-10-01T16:31:24.684993Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:24.685997Z", "completed_at": "2024-10-01T16:31:25.949474Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.4246923923492432, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d472"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_data_source", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'DATA_SOURCE' AS field_name\n    , case when m.data_source is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(data_source as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_thuxuan.data_quality.lab_result_data_source"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:24.679952Z", "completed_at": "2024-10-01T16:31:24.689992Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:24.689992Z", "completed_at": "2024-10-01T16:31:25.966712Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.4214797019958496, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b482"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_encounter_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'ENCOUNTER_ID' as field_name\n    , case when m.encounter_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(encounter_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_thuxuan.data_quality.lab_result_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:25.061991Z", "completed_at": "2024-10-01T16:31:25.069511Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:25.069511Z", "completed_at": "2024-10-01T16:31:26.302497Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.4169495105743408, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d476"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_normalized_abnormal_flag", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_ABNORMAL_FLAG' as field_name\n    , case when m.normalized_abnormal_flag is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(normalized_abnormal_flag as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_thuxuan.data_quality.lab_result_normalized_abnormal_flag"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:24.912984Z", "completed_at": "2024-10-01T16:31:24.921992Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:24.922993Z", "completed_at": "2024-10-01T16:31:26.283425Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.567171573638916, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f7c5-0001-987f0110bcba"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_lab_result_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'LAB_RESULT_ID' as field_name\n    , case when m.lab_result_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(lab_result_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_thuxuan.data_quality.lab_result_lab_result_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:25.258298Z", "completed_at": "2024-10-01T16:31:25.264826Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:25.264826Z", "completed_at": "2024-10-01T16:31:26.548714Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.4264326095581055, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b486"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_normalized_description", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_DESCRIPTION' AS field_name\n    , case when m.normalized_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(normalized_description, 1, 255) as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_thuxuan.data_quality.lab_result_normalized_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:26.110405Z", "completed_at": "2024-10-01T16:31:26.121953Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:26.123764Z", "completed_at": "2024-10-01T16:31:27.581952Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.6041417121887207, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b48a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_normalized_reference_range_high", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_REFERENCE_RANGE_HIGH' as field_name\n    , case when m.normalized_reference_range_high is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(normalized_reference_range_high as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_thuxuan.data_quality.lab_result_normalized_reference_range_high"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:26.116953Z", "completed_at": "2024-10-01T16:31:26.128792Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:26.129835Z", "completed_at": "2024-10-01T16:31:27.668370Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.6826364994049072, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f6d9-0001-987f01112dc6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_normalized_reference_range_low", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_REFERENCE_RANGE_LOW' as field_name\n    , case when m.normalized_reference_range_low is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(normalized_reference_range_low as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_thuxuan.data_quality.lab_result_normalized_reference_range_low"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:26.736972Z", "completed_at": "2024-10-01T16:31:26.751918Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:26.758260Z", "completed_at": "2024-10-01T16:31:27.959589Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.4110372066497803, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b48e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_patient_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'PATIENT_ID' AS field_name\n    , case when m.patient_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(patient_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_thuxuan.data_quality.lab_result_patient_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:26.742326Z", "completed_at": "2024-10-01T16:31:26.756917Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:26.762898Z", "completed_at": "2024-10-01T16:31:28.211905Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.16945743560791, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f913-0001-987f0111a476"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_result", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'RESULT' AS field_name\n    , case when m.result is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(result as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_thuxuan.data_quality.lab_result_result"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:26.730974Z", "completed_at": "2024-10-01T16:31:26.750917Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:26.751918Z", "completed_at": "2024-10-01T16:31:28.192145Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.4465506076812744, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f7c5-0001-987f0110bcbe"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_normalized_units", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_UNITS' as field_name\n    , case when m.normalized_units is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(normalized_units as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_thuxuan.data_quality.lab_result_normalized_units"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:28.144714Z", "completed_at": "2024-10-01T16:31:28.149796Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:28.150762Z", "completed_at": "2024-10-01T16:31:29.549533Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.5366148948669434, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f913-0001-987f0111a47a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_source_code", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'SOURCE_CODE' AS field_name\n    , case when m.source_code is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_code as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_thuxuan.data_quality.lab_result_source_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:27.721108Z", "completed_at": "2024-10-01T16:31:27.730712Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:27.730712Z", "completed_at": "2024-10-01T16:31:29.649703Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.0947067737579346, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b492"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_result_date", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'RESULT_DATE' as field_name\n    , case\n        when m.result_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'invalid'\n        when m.result_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.result_date < m.collection_date then 'invalid'\n        when m.result_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.result_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'future'\n        when m.result_date <= cast('1901-01-01' as date) then 'too old'\n        when m.result_date < m.collection_date then 'Result date before collection date'\n        else null\n    end as invalid_reason\n    , cast(result_date as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_thuxuan.data_quality.lab_result_result_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:27.804218Z", "completed_at": "2024-10-01T16:31:27.810231Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:27.810231Z", "completed_at": "2024-10-01T16:31:30.058358Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.391611099243164, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b496"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_source_abnormal_flag", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'SOURCE_ABNORMAL_FLAG' AS field_name\n    , case when m.source_abnormal_flag is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_abnormal_flag as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_thuxuan.data_quality.lab_result_source_abnormal_flag"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:28.910358Z", "completed_at": "2024-10-01T16:31:28.918511Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:28.919597Z", "completed_at": "2024-10-01T16:31:30.222456Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.4399211406707764, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f913-0001-987f0111a47e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_source_code_type", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'SOURCE_CODE_TYPE' as field_name\n    , case when m.source_code_type is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_code_type as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_thuxuan.data_quality.lab_result_source_code_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:29.177349Z", "completed_at": "2024-10-01T16:31:29.183155Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:29.183155Z", "completed_at": "2024-10-01T16:31:30.562351Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.516646385192871, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f913-0001-987f0111a482"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_source_component", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'SOURCE_COMPONENT' AS field_name\n    , case when m.source_component is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_component as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_thuxuan.data_quality.lab_result_source_component"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:29.685327Z", "completed_at": "2024-10-01T16:31:29.692328Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:29.692328Z", "completed_at": "2024-10-01T16:31:30.953115Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.5642731189727783, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f913-0001-987f0111a486"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_source_description", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'SOURCE_DESCRIPTION' as field_name\n    , case when m.source_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(source_description, 1, 255) as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_thuxuan.data_quality.lab_result_source_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:29.820723Z", "completed_at": "2024-10-01T16:31:29.826732Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:29.826732Z", "completed_at": "2024-10-01T16:31:30.973714Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.4308745861053467, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b49a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_source_reference_range_high", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'SOURCE_REFERENCE_RANGE_HIGH' AS field_name\n    , case when m.source_reference_range_high is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_reference_range_high as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_thuxuan.data_quality.lab_result_source_reference_range_high"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:30.199828Z", "completed_at": "2024-10-01T16:31:30.206451Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:30.207377Z", "completed_at": "2024-10-01T16:31:31.570583Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.518442153930664, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f6d9-0001-987f01112dca"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_source_reference_range_low", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'SOURCE_REFERENCE_RANGE_LOW' AS field_name\n    , case when m.source_reference_range_low is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_reference_range_low as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_thuxuan.data_quality.lab_result_source_reference_range_low"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:30.356281Z", "completed_at": "2024-10-01T16:31:30.363804Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:30.363804Z", "completed_at": "2024-10-01T16:31:31.862799Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.622431993484497, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b49e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_source_units", "compiled": true, "compiled_code": "\n\n\nSELECT\n    m.data_source\n    ,coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    ,'LAB_RESULT' AS table_name\n    ,'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    ,'SOURCE_UNITS' AS field_name\n    ,case when m.source_units is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(source_units as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_thuxuan.data_quality.lab_result_source_units"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:30.699272Z", "completed_at": "2024-10-01T16:31:30.705888Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:30.706785Z", "completed_at": "2024-10-01T16:31:32.187822Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.6263656616210938, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f913-0001-987f0111a48a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_specimen", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'SPECIMEN' as field_name\n    , case when m.specimen is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(specimen as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_thuxuan.data_quality.lab_result_specimen"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:31.261777Z", "completed_at": "2024-10-01T16:31:31.279664Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:31.281083Z", "completed_at": "2024-10-01T16:31:32.728459Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.6845064163208008, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d47a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_status", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'STATUS' as field_name\n    , case when m.status is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(status as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_thuxuan.data_quality.lab_result_status"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:31.722473Z", "completed_at": "2024-10-01T16:31:31.729556Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:31.730562Z", "completed_at": "2024-10-01T16:31:33.300459Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.7538561820983887, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d47e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_data_source", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'DATA_SOURCE' as field_name\n    , case when m.data_source is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(data_source as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_thuxuan.data_quality.observation_data_source"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:31.984272Z", "completed_at": "2024-10-01T16:31:31.991314Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:31.991314Z", "completed_at": "2024-10-01T16:31:33.444984Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.7690904140472412, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f6d9-0001-987f01112dce"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_encounter_id", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    ,'OBSERVATION' AS table_name\n    ,'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    ,'ENCOUNTER_ID' as field_name\n    ,case when m.encounter_id is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(encounter_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_thuxuan.data_quality.observation_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:31.270301Z", "completed_at": "2024-10-01T16:31:31.286110Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:31.286110Z", "completed_at": "2024-10-01T16:31:33.731699Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.6255054473876953, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b4a2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_observation", "compiled": true, "compiled_code": "\n\n\nselect\n    cast(observation_id as TEXT ) as observation_id\n    , cast(patient_id as TEXT ) as patient_id\n    , cast(encounter_id as TEXT ) as encounter_id\n    , cast(panel_id as TEXT ) as panel_id\n    , try_cast( observation_date as date ) as observation_date\n    , cast(observation_type as TEXT ) as observation_type\n    , cast(source_code_type as TEXT ) as source_code_type\n    , cast(source_code as TEXT ) as source_code\n    , cast(source_description as TEXT ) as source_description\n    , cast(normalized_code_type as TEXT ) as normalized_code_type\n    , cast(normalized_code as TEXT ) as normalized_code\n    , cast(normalized_description as TEXT ) as normalized_description\n    , cast(result as TEXT ) as result\n    , cast(source_units as TEXT ) as source_units\n    , cast(normalized_units as TEXT ) as normalized_units\n    , cast(source_reference_range_low as TEXT ) as source_reference_range_low\n    , cast(source_reference_range_high as TEXT ) as source_reference_range_high\n    , cast(normalized_reference_range_low as TEXT ) as normalized_reference_range_low\n    , cast(normalized_reference_range_high as TEXT ) as normalized_reference_range_high\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-10-01 16:29:14.142894+00:00' as timestamp ) as tuva_last_run\nfrom tuva.input_layer.observation", "relation_name": "dev_thuxuan.core._stg_clinical_observation"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:32.331635Z", "completed_at": "2024-10-01T16:31:32.339631Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:32.340743Z", "completed_at": "2024-10-01T16:31:33.906391Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.703221321105957, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d482"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_normalized_code", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_CODE' as field_name\n    , case when m.normalized_code is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(normalized_code as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_thuxuan.data_quality.observation_normalized_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:32.951298Z", "completed_at": "2024-10-01T16:31:32.961800Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:32.961800Z", "completed_at": "2024-10-01T16:31:34.536751Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.7780632972717285, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b4a6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_normalized_code_type", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_CODE_TYPE' AS field_name\n    , case when m.normalized_code_type is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(normalized_code_type as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_thuxuan.data_quality.observation_normalized_code_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:33.481785Z", "completed_at": "2024-10-01T16:31:33.486800Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:33.487782Z", "completed_at": "2024-10-01T16:31:34.847510Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.5029621124267578, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f7c5-0001-987f0110bcc2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_normalized_description", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_DESCRIPTION' as field_name\n    , case when m.normalized_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(normalized_description, 1, 255) as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_thuxuan.data_quality.observation_normalized_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:33.757423Z", "completed_at": "2024-10-01T16:31:33.766941Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:33.767999Z", "completed_at": "2024-10-01T16:31:35.190915Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.5683960914611816, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f7c5-0001-987f0110bcc6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_normalized_reference_range_high", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_REFERENCE_RANGE_HIGH' as field_name\n    , case when m.normalized_reference_range_high is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(normalized_reference_range_high as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_thuxuan.data_quality.observation_normalized_reference_range_high"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:34.039834Z", "completed_at": "2024-10-01T16:31:34.045471Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:34.046478Z", "completed_at": "2024-10-01T16:31:35.406394Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.6241014003753662, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d486"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_normalized_units", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_UNITS' as field_name\n    , case when m.normalized_units is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(normalized_units as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_thuxuan.data_quality.observation_normalized_units"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:33.898388Z", "completed_at": "2024-10-01T16:31:33.908397Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:33.909388Z", "completed_at": "2024-10-01T16:31:35.428501Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.7685282230377197, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b4aa"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_normalized_reference_range_low", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_REFERENCE_RANGE_LOW' AS field_name\n    , case when m.normalized_reference_range_low is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(normalized_reference_range_low as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_thuxuan.data_quality.observation_normalized_reference_range_low"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:34.989701Z", "completed_at": "2024-10-01T16:31:34.995226Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:34.995226Z", "completed_at": "2024-10-01T16:31:36.309856Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.473323106765747, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d48e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_observation_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'OBSERVATION_ID' as field_name\n    , case when m.observation_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(observation_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_thuxuan.data_quality.observation_observation_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:34.733857Z", "completed_at": "2024-10-01T16:31:34.742614Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:34.743701Z", "completed_at": "2024-10-01T16:31:36.311735Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.7400941848754883, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d48a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_observation_date", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'OBSERVATION_DATE' as field_name\n    , case\n        when m.observation_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'invalid'\n        when m.observation_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.observation_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.observation_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'future'\n        when m.observation_date <= cast('1901-01-01' as date) then 'too old'\n        else null\n    end as invalid_reason\n    , cast(observation_date as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_thuxuan.data_quality.observation_observation_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:35.330984Z", "completed_at": "2024-10-01T16:31:35.336945Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:35.336945Z", "completed_at": "2024-10-01T16:31:36.861958Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.7792418003082275, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d492"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_observation_type", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'OBSERVATION_TYPE' as field_name\n    , case when m.observation_type is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(observation_type as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_thuxuan.data_quality.observation_observation_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:35.684743Z", "completed_at": "2024-10-01T16:31:35.695930Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:35.696936Z", "completed_at": "2024-10-01T16:31:37.010300Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.4550058841705322, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f6d9-0001-987f01112dd2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_patient_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'PATIENT_ID' as field_name\n    , case when m.patient_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(patient_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_thuxuan.data_quality.observation_patient_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:35.678611Z", "completed_at": "2024-10-01T16:31:35.690258Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:35.691255Z", "completed_at": "2024-10-01T16:31:37.163680Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.6400325298309326, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d496"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_panel_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'PANEL_ID' as field_name\n    , case when m.panel_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(panel_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_thuxuan.data_quality.observation_panel_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:36.491147Z", "completed_at": "2024-10-01T16:31:36.499320Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:36.500345Z", "completed_at": "2024-10-01T16:31:37.797284Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.4526000022888184, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d49a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_source_code", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'SOURCE_CODE' as field_name\n    , case when m.source_code is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_code as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_thuxuan.data_quality.observation_source_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:36.473951Z", "completed_at": "2024-10-01T16:31:36.482261Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:36.483266Z", "completed_at": "2024-10-01T16:31:37.836474Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.5668599605560303, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f6d9-0001-987f01112dd6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_result", "compiled": true, "compiled_code": "\n\n\nSELECT\n    m.data_source\n    ,coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    ,'OBSERVATION' AS table_name\n    ,'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    ,'RESULT' as field_name\n    ,case when m.result is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(substring(result, 1, 255) as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_thuxuan.data_quality.observation_result"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:37.566136Z", "completed_at": "2024-10-01T16:31:37.577152Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:37.582848Z", "completed_at": "2024-10-01T16:31:39.232019Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.886866807937622, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f6d9-0001-987f01112dda"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_source_reference_range_high", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'SOURCE_REFERENCE_RANGE_HIGH' as field_name\n    , case when m.source_reference_range_high is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_reference_range_high as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_thuxuan.data_quality.observation_source_reference_range_high"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:37.555031Z", "completed_at": "2024-10-01T16:31:37.571140Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:37.572157Z", "completed_at": "2024-10-01T16:31:39.139981Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.9019684791564941, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f6d9-0001-987f01112dde"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_source_code_type", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'SOURCE_CODE_TYPE' as field_name\n    , case when m.source_code_type is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_code_type as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_thuxuan.data_quality.observation_source_code_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:37.561030Z", "completed_at": "2024-10-01T16:31:37.571140Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:37.578682Z", "completed_at": "2024-10-01T16:31:39.141605Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.9019904136657715, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f6d9-0001-987f01112de2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_source_description", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'SOURCE_DESCRIPTION' as field_name\n    , case when m.source_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(source_description, 1, 255) as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_thuxuan.data_quality.observation_source_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:37.947384Z", "completed_at": "2024-10-01T16:31:37.954458Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:37.955465Z", "completed_at": "2024-10-01T16:31:39.511956Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.729856014251709, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d49e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_source_reference_range_low", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'SOURCE_REFERENCE_RANGE_LOW' as field_name\n    , case when m.source_reference_range_low is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_reference_range_low as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_thuxuan.data_quality.observation_source_reference_range_low"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:38.054344Z", "completed_at": "2024-10-01T16:31:38.060320Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:38.060320Z", "completed_at": "2024-10-01T16:31:39.612823Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.8034417629241943, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f913-0001-987f0111a48e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_source_units", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS TABLE_NAME\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'SOURCE_UNITS' as field_name\n    , case when m.source_units is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_units as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_thuxuan.data_quality.observation_source_units"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:39.681060Z", "completed_at": "2024-10-01T16:31:39.688006Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:39.688006Z", "completed_at": "2024-10-01T16:31:41.294421Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.746433973312378, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f7c5-0001-987f0110bcca"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_city", "compiled": true, "compiled_code": "\n\n\nSELECT\n    m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    ,'PATIENT' AS table_name\n    ,'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    ,'CITY' AS field_name\n    ,case when m.city is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(city as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m", "relation_name": "dev_thuxuan.data_quality.patient_city"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:39.479138Z", "completed_at": "2024-10-01T16:31:39.491572Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:39.495119Z", "completed_at": "2024-10-01T16:31:41.323413Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.0022315979003906, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b4ae"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_address", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PATIENT' AS table_name\n    , 'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    , 'ADDRESS' as field_name\n    , case when m.address is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(address as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m", "relation_name": "dev_thuxuan.data_quality.patient_address"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:39.485145Z", "completed_at": "2024-10-01T16:31:39.500139Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:39.500139Z", "completed_at": "2024-10-01T16:31:41.355364Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.009420394897461, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b4b6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_birth_date", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PATIENT' AS table_name\n    , 'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    , 'BIRTH_DATE' AS field_name\n    , case\n        when m.birth_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'invalid'\n        when m.birth_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.birth_date > m.death_date then 'invalid'\n        when m.birth_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.birth_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'future'\n        when m.birth_date <= cast('1901-01-01' as date) then 'too old'\n        when m.birth_date > m.death_date then 'Birth date after death date'\n        else null\n    end as invalid_reason\n    , cast(birth_date as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m", "relation_name": "dev_thuxuan.data_quality.patient_birth_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:39.854240Z", "completed_at": "2024-10-01T16:31:39.866756Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:39.866756Z", "completed_at": "2024-10-01T16:31:41.401992Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.760279893875122, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b4ba"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_county", "compiled": true, "compiled_code": "\n\n\nSELECT\n    m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    ,'PATIENT' AS table_name\n    ,'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    ,'COUNTY' as field_name\n    ,case when m.county is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(county as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m", "relation_name": "dev_thuxuan.data_quality.patient_county"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:39.465872Z", "completed_at": "2024-10-01T16:31:39.491572Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:39.492572Z", "completed_at": "2024-10-01T16:31:41.396992Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.1513257026672363, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b4b2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_patient", "compiled": true, "compiled_code": "\n\nwith tuva_last_run as(\n    select\n       cast('2024-10-01 16:29:14.142894+00:00' as timestamp ) as tuva_last_run_datetime\n       , cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date ) as tuva_last_run_date\n)\nSELECT\n    cast(patient_id as TEXT ) as patient_id\n    , cast(first_name as TEXT ) as first_name\n    , cast(last_name as TEXT ) as last_name\n    , cast(sex as TEXT ) as sex\n    , cast(race as TEXT ) as race\n    , try_cast( birth_date as date ) as birth_date\n    , try_cast( death_date as date ) as death_date\n    , cast(death_flag as integer ) as death_flag\n    , cast(social_security_number as TEXT ) as social_security_number\n    , cast(address as TEXT ) as address\n    , cast(city as TEXT ) as city\n    , cast(state as TEXT ) as state\n    , cast(zip_code as TEXT ) as zip_code\n    , cast(county as TEXT ) as county\n    , cast(latitude as float ) as latitude\n    , cast(longitude as float ) as longitude\n    , cast(data_source as TEXT ) as data_source\n    , cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) as age\n    , cast(\n        CASE\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 10 THEN '0-9'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 20 THEN '10-19'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 30 THEN '20-29'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 40 THEN '30-39'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 50 THEN '40-49'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 60 THEN '50-59'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 70 THEN '60-69'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 80 THEN '70-79'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 90 THEN '80-89'\n            ELSE '90+'\n        END as TEXT\n    ) AS age_group\n    , tuva_last_run_datetime as tuva_last_run\nFROM tuva.input_layer.patient\ncross join tuva_last_run", "relation_name": "dev_thuxuan.core._stg_clinical_patient"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:41.495076Z", "completed_at": "2024-10-01T16:31:41.502089Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:41.502089Z", "completed_at": "2024-10-01T16:31:43.056526Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.7141046524047852, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f7c5-0001-987f0110bcce"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_death_flag", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PATIENT' AS table_name\n    , 'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    , 'DEATH_FLAG' as field_name\n    , case when m.death_flag is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(death_flag as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m", "relation_name": "dev_thuxuan.data_quality.patient_death_flag"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:41.431817Z", "completed_at": "2024-10-01T16:31:41.436817Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:41.436817Z", "completed_at": "2024-10-01T16:31:43.248112Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.9420733451843262, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f6d9-0001-987f01112de6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_data_source", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PATIENT' AS table_name\n    , 'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    , 'DATA_SOURCE' as field_name\n    , case when m.data_source is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(data_source as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m", "relation_name": "dev_thuxuan.data_quality.patient_data_source"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:41.470827Z", "completed_at": "2024-10-01T16:31:41.478469Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:41.479474Z", "completed_at": "2024-10-01T16:31:43.226305Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.9084806442260742, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f913-0001-987f0111a492"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_death_date", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PATIENT' AS table_name\n    , 'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    , 'DEATH_DATE' AS field_name\n    , case\n        when m.death_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'invalid'\n        when m.death_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.death_date > m.birth_date then 'invalid'\n        when m.death_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.death_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'future'\n        when m.death_date <= cast('1901-01-01' as date) then 'too old'\n        when m.death_date > m.birth_date then 'Death date after birth date'\n        else null\n    end as invalid_reason\n    , cast(death_date as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m", "relation_name": "dev_thuxuan.data_quality.patient_death_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:41.631648Z", "completed_at": "2024-10-01T16:31:41.649815Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:41.650954Z", "completed_at": "2024-10-01T16:31:43.395977Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.9145221710205078, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b4be"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_last_name", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PATIENT' AS table_name\n    , 'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    , 'LAST_NAME' AS field_name\n    , case when m.last_name is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(last_name as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m", "relation_name": "dev_thuxuan.data_quality.patient_last_name"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:41.624031Z", "completed_at": "2024-10-01T16:31:41.639633Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:41.640544Z", "completed_at": "2024-10-01T16:31:43.393457Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.0744147300720215, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f7c5-0001-987f0110bcd2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_first_name", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PATIENT' AS table_name\n    , 'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    , 'FIRST_NAME' as field_name\n    , case when m.first_name is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(first_name as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m", "relation_name": "dev_thuxuan.data_quality.patient_first_name"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:43.215765Z", "completed_at": "2024-10-01T16:31:43.224380Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:43.227185Z", "completed_at": "2024-10-01T16:31:44.616244Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.536602258682251, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f6d9-0001-987f01112dea"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_latitude", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PATIENT' AS table_name\n    , 'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    , 'LATITUDE' as field_name\n    , case when m.latitude is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(latitude as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m", "relation_name": "dev_thuxuan.data_quality.patient_latitude"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:43.411004Z", "completed_at": "2024-10-01T16:31:43.419541Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:43.420547Z", "completed_at": "2024-10-01T16:31:45.210270Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.9219214916229248, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d4a2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_patient_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PATIENT' AS table_name\n    , 'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    , 'PATIENT_ID' as field_name\n    , case when m.patient_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(patient_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m", "relation_name": "dev_thuxuan.data_quality.patient_patient_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:43.717041Z", "completed_at": "2024-10-01T16:31:43.725648Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:43.726676Z", "completed_at": "2024-10-01T16:31:45.248990Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.666381597518921, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b4c2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_zip_code", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PATIENT' AS table_name\n    , 'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    , 'ZIP_CODE' as field_name\n    , case when m.zip_code is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(zip_code as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m", "relation_name": "dev_thuxuan.data_quality.patient_zip_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:43.547267Z", "completed_at": "2024-10-01T16:31:43.695516Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:43.697529Z", "completed_at": "2024-10-01T16:31:45.246984Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.8382976055145264, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d4a6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_state", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PATIENT' AS table_name\n    , 'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    , 'STATE' as field_name\n    , case when m.state is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(state as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m", "relation_name": "dev_thuxuan.data_quality.patient_state"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:43.380376Z", "completed_at": "2024-10-01T16:31:43.391423Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:43.397973Z", "completed_at": "2024-10-01T16:31:45.211817Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.26230525970459, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f913-0001-987f0111a496"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_longitude", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PATIENT' AS table_name\n    , 'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    , 'LONGITUDE' as field_name\n    , case when m.longitude is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(longitude as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m", "relation_name": "dev_thuxuan.data_quality.patient_longitude"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:44.757575Z", "completed_at": "2024-10-01T16:31:44.765409Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:44.765409Z", "completed_at": "2024-10-01T16:31:45.856086Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3203656673431396, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b4c6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_practitioner", "compiled": true, "compiled_code": "\n\nselect\n    cast(practitioner_id as TEXT ) as practitioner_id\n    , cast(npi as TEXT ) as npi\n    , cast(first_name as TEXT ) as first_name\n    , cast(last_name as TEXT ) as last_name\n    , cast(practice_affiliation as TEXT ) as practice_affiliation\n    , cast(specialty as TEXT ) as specialty\n    , cast(sub_specialty as TEXT ) as sub_specialty\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-10-01 16:29:14.142894+00:00' as timestamp ) as tuva_last_run\nfrom tuva.input_layer.practitioner", "relation_name": "dev_thuxuan.core._stg_clinical_practitioner"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:45.398015Z", "completed_at": "2024-10-01T16:31:45.410278Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:45.410278Z", "completed_at": "2024-10-01T16:31:46.885647Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.0728390216827393, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f7c5-0001-987f0110bcd6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__practitioner_last_name", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PRACTITIONER' AS table_name\n    , 'Practitioner ID' as drill_down_key\n    , coalesce(practitioner_id, 'NULL') AS drill_down_value\n    , 'LAST_NAME' as field_name\n    , case when m.last_name is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(last_name as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.practitioner m", "relation_name": "dev_thuxuan.data_quality.practitioner_last_name"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:46.082940Z", "completed_at": "2024-10-01T16:31:46.091929Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:46.091929Z", "completed_at": "2024-10-01T16:31:47.404198Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.4585785865783691, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f913-0001-987f0111a49a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__practitioner_practitioner_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PRACTITIONER' AS table_name\n    , 'Practitioner ID' as drill_down_key\n    , coalesce(practitioner_id, 'NULL') AS drill_down_value\n    , 'PRACTITIONER_ID' as field_name\n    , case when m.practitioner_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(practitioner_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.practitioner m", "relation_name": "dev_thuxuan.data_quality.practitioner_practitioner_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:45.389427Z", "completed_at": "2024-10-01T16:31:45.397018Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:45.404017Z", "completed_at": "2024-10-01T16:31:47.991997Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.737516403198242, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b4ce"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__practitioner_first_name", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PRACTITIONER' AS table_name\n    , 'Practitioner ID' as drill_down_key\n    , coalesce(practitioner_id, 'NULL') AS drill_down_value\n    , 'FIRST_NAME' as field_name\n    , case when m.first_name is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(first_name as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.practitioner m", "relation_name": "dev_thuxuan.data_quality.practitioner_first_name"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:45.336804Z", "completed_at": "2024-10-01T16:31:45.345485Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:45.346506Z", "completed_at": "2024-10-01T16:31:47.975240Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.9125277996063232, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b4ca"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__practitioner_data_source", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PRACTITIONER' AS table_name\n    , 'Practitioner ID' as drill_down_key\n    , coalesce(practitioner_id, 'NULL') AS drill_down_value\n    , 'DATA_SOURCE' as field_name\n    , case when m.data_source is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(data_source as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.practitioner m", "relation_name": "dev_thuxuan.data_quality.practitioner_data_source"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:45.647280Z", "completed_at": "2024-10-01T16:31:45.654282Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:45.655279Z", "completed_at": "2024-10-01T16:31:48.373079Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.8571698665618896, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b4d2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__practitioner_practice_affiliation", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PRACTITIONER' AS table_name\n    , 'Practitioner ID' as drill_down_key\n    , coalesce(practitioner_id, 'NULL') AS drill_down_value\n    , 'PRACTICE_AFFILIATION' AS field_name\n    , case when m.practice_affiliation is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(practice_affiliation as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.practitioner m", "relation_name": "dev_thuxuan.data_quality.practitioner_practice_affiliation"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:47.476277Z", "completed_at": "2024-10-01T16:31:47.486859Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:47.487881Z", "completed_at": "2024-10-01T16:31:49.320275Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.98136305809021, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f6d9-0001-987f01112dee"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__practitioner_specialty", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PRACTITIONER' AS table_name\n    , 'Practitioner ID' as drill_down_key\n    , coalesce(practitioner_id, 'NULL') AS drill_down_value\n    , 'SPECIALTY' as field_name\n    , case when m.specialty is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(specialty as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.practitioner m", "relation_name": "dev_thuxuan.data_quality.practitioner_specialty"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:47.549715Z", "completed_at": "2024-10-01T16:31:47.558741Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:47.559726Z", "completed_at": "2024-10-01T16:31:49.326803Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.9521610736846924, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d4aa"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__practitioner_sub_specialty", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PRACTITIONER' AS table_name\n    , 'Practitioner ID' as drill_down_key\n    , coalesce(practitioner_id, 'NULL') AS drill_down_value\n    , 'SUB_SPECIALTY' as field_name\n    , case when m.sub_specialty is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(sub_specialty as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.practitioner m", "relation_name": "dev_thuxuan.data_quality.practitioner_sub_specialty"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:48.259507Z", "completed_at": "2024-10-01T16:31:48.275422Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:48.276915Z", "completed_at": "2024-10-01T16:31:50.403755Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.272351026535034, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f6d9-0001-987f01112df2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_claim_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'CLAIM_ID' as field_name\n    , case when m.claim_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(claim_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m", "relation_name": "dev_thuxuan.data_quality.procedure_claim_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:48.136061Z", "completed_at": "2024-10-01T16:31:48.162052Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:48.163318Z", "completed_at": "2024-10-01T16:31:50.643796Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.9785594940185547, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b4d6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_procedure", "compiled": true, "compiled_code": "\n\nselect\n    cast(procedure_id as TEXT ) as procedure_id \n    , cast(patient_id as TEXT ) as patient_id\n    , cast(encounter_id as TEXT ) as encounter_id\n    , cast(claim_id as TEXT ) as claim_id\n    , try_cast( procedure_date as date ) as procedure_date\n    , cast(source_code_type as TEXT ) as source_code_type\n    , cast(source_code as TEXT ) as source_code\n    , cast(source_description as TEXT ) as source_description\n    , cast(normalized_code_type as TEXT ) as normalized_code_type\n    , cast(normalized_code as TEXT ) as normalized_code\n    , cast(normalized_description as TEXT ) as normalized_description\n    , cast(modifier_1 as TEXT ) as modifier_1\n    , cast(modifier_2 as TEXT ) as modifier_2\n    , cast(modifier_3 as TEXT ) as modifier_3\n    , cast(modifier_4 as TEXT ) as modifier_4\n    , cast(modifier_5 as TEXT ) as modifier_5\n    , cast(practitioner_id as TEXT ) as practitioner_id\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-10-01 16:29:14.142894+00:00' as timestamp ) as tuva_last_run\nfrom tuva.input_layer.procedure", "relation_name": "dev_thuxuan.core._stg_clinical_procedure"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:48.758016Z", "completed_at": "2024-10-01T16:31:48.776775Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:48.778644Z", "completed_at": "2024-10-01T16:31:51.116520Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.5950441360473633, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b4da"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_data_source", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'DATA_SOURCE' as field_name\n    , case when m.data_source is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(data_source as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m", "relation_name": "dev_thuxuan.data_quality.procedure_data_source"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:49.477055Z", "completed_at": "2024-10-01T16:31:49.497385Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:49.501387Z", "completed_at": "2024-10-01T16:31:51.535635Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.3017258644104004, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d4ae"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_encounter_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'ENCOUNTER_ID' as field_name\n    , case when m.encounter_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(encounter_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m", "relation_name": "dev_thuxuan.data_quality.procedure_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:49.546469Z", "completed_at": "2024-10-01T16:31:49.564404Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:49.566416Z", "completed_at": "2024-10-01T16:31:51.889624Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.567112445831299, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f7c5-0001-987f0110bcda"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_normalized_description", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_DESCRIPTION' AS field_name\n    , case when m.normalized_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(normalized_description, 1, 255) as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m", "relation_name": "dev_thuxuan.data_quality.procedure_normalized_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:50.537520Z", "completed_at": "2024-10-01T16:31:50.550058Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:50.551062Z", "completed_at": "2024-10-01T16:31:52.319889Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.9896557331085205, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f7c5-0001-987f0110bcde"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_patient_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'PATIENT_ID' AS field_name\n    , case when m.patient_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(patient_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m", "relation_name": "dev_thuxuan.data_quality.procedure_patient_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:51.134416Z", "completed_at": "2024-10-01T16:31:51.144400Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:51.145907Z", "completed_at": "2024-10-01T16:31:53.016440Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.048527956008911, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d4b2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_practitioner_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'PRACTITIONER_ID' AS field_name\n    , case when m.practitioner_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(practitioner_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m", "relation_name": "dev_thuxuan.data_quality.procedure_practitioner_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:51.359240Z", "completed_at": "2024-10-01T16:31:51.380333Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:51.381336Z", "completed_at": "2024-10-01T16:31:53.318301Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.0965044498443604, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f7c5-0001-987f0110bce2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_procedure_date", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'PROCEDURE_DATE' as field_name\n    , case\n        when m.procedure_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'invalid'\n        when m.procedure_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.procedure_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.procedure_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'future'\n        when m.procedure_date <= cast('1901-01-01' as date) then 'too old'\n        else null\n    end as invalid_reason\n    , cast(procedure_date as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m", "relation_name": "dev_thuxuan.data_quality.procedure_procedure_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:52.114613Z", "completed_at": "2024-10-01T16:31:52.129319Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:52.130332Z", "completed_at": "2024-10-01T16:31:53.607046Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.664747953414917, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f7c5-0001-987f0110bce6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_source_code", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'SOURCE_CODE' as field_name\n    , case when m.source_code is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_code as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m", "relation_name": "dev_thuxuan.data_quality.procedure_source_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:51.784388Z", "completed_at": "2024-10-01T16:31:51.793398Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:51.794415Z", "completed_at": "2024-10-01T16:31:53.512785Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.9975526332855225, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d4b6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_procedure_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'PROCEDURE_ID' AS field_name\n    , case when m.procedure_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(procedure_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m", "relation_name": "dev_thuxuan.data_quality.procedure_procedure_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:52.532695Z", "completed_at": "2024-10-01T16:31:52.541695Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:52.542693Z", "completed_at": "2024-10-01T16:31:53.981787Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.5895488262176514, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f7c5-0001-987f0110bcea"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_source_code_type", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'SOURCE_CODE_TYPE' as field_name\n    , case when m.source_code_type is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_code_type as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m", "relation_name": "dev_thuxuan.data_quality.procedure_source_code_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:53.187927Z", "completed_at": "2024-10-01T16:31:53.195501Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:53.196541Z", "completed_at": "2024-10-01T16:31:54.663843Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.600475549697876, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f6d9-0001-987f01112df6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_source_description", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'SOURCE_DESCRIPTION' as field_name\n    , case when m.source_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(source_description, 1, 255) as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m", "relation_name": "dev_thuxuan.data_quality.procedure_source_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:53.459736Z", "completed_at": "2024-10-01T16:31:53.465254Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:53.466254Z", "completed_at": "2024-10-01T16:31:54.951251Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.8925676345825195, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f6d9-0001-987f01112dfa"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.input_layer.eligibility", "compiled": true, "compiled_code": "select\n      patient_id\n    , member_id\n    , subscriber_id\n    , gender\n    , race\n    , birth_date\n    , death_date\n    , death_flag\n    , enrollment_start_date\n    , enrollment_end_date\n    , payer\n    , payer_type\n    , plan\n    , original_reason_entitlement_code\n    , dual_status_code\n    , medicare_status_code\n    , first_name\n    , last_name\n    , social_security_number\n    , subscriber_relation\n    , address\n    , city\n    , state\n    , zip_code\n    , phone\n    , data_source\n    , file_name\n    , ingest_datetime\nfrom dev_thuxuan._tuva_synthetic.eligibility_seed", "relation_name": "tuva.input_layer.eligibility"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:53.796373Z", "completed_at": "2024-10-01T16:31:53.808388Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:53.809387Z", "completed_at": "2024-10-01T16:31:55.350304Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.8428575992584229, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b4de"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.input_layer.pharmacy_claim", "compiled": true, "compiled_code": "select\n      claim_id\n    , claim_line_number\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , prescribing_provider_npi\n    , dispensing_provider_npi\n    , dispensing_date\n    , ndc_code\n    , quantity\n    , days_supply\n    , refills\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , in_network_flag\n    , data_source\n    , file_name\n    , ingest_datetime\nfrom dev_thuxuan._tuva_synthetic.pharmacy_claim_seed", "relation_name": "tuva.input_layer.pharmacy_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:53.788864Z", "completed_at": "2024-10-01T16:31:53.802381Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:53.803381Z", "completed_at": "2024-10-01T16:31:55.656242Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.381582736968994, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d4ba"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.input_layer.medical_claim", "compiled": true, "compiled_code": "select\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , rendering_tin\n    , billing_npi\n    , billing_tin\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , in_network_flag\n    , data_source\n    , file_name\n    , ingest_datetime\nfrom dev_thuxuan._tuva_synthetic.medical_claim_seed", "relation_name": "tuva.input_layer.medical_claim"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:55.642720Z", "completed_at": "2024-10-01T16:31:55.658241Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:55.659284Z", "completed_at": "2024-10-01T16:31:56.448412Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.0263173580169678, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f913-0001-987f0111a49e"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_ed_classification__johnston_icd10_icd10.d04e7f84c7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect icd10\nfrom dev_thuxuan.ed_classification._value_set_johnston_icd10\nwhere icd10 is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:54.128680Z", "completed_at": "2024-10-01T16:31:54.145239Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:54.145239Z", "completed_at": "2024-10-01T16:31:56.553295Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.559434413909912, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b4e2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ccsr__dx_vertical_pivot", "compiled": true, "compiled_code": "\n\nwith codes as (\n    \n    select\n        icd_10_cm_code as code, \n        icd_10_cm_code_description as code_description,\n        -- loop to generate columns for CCSR categories 1-6\n        ccsr_category_1,\n        ccsr_category_1_description,\n        ccsr_category_2,\n        ccsr_category_2_description,\n        ccsr_category_3,\n        ccsr_category_3_description,\n        ccsr_category_4,\n        ccsr_category_4_description,\n        ccsr_category_5,\n        ccsr_category_5_description,\n        ccsr_category_6,\n        ccsr_category_6_description,\n        default_ccsr_category_ip,\n        default_ccsr_category_op\n    from dev_thuxuan.ccsr._value_set_dxccsr_v2023_1_cleaned_map\n\n), long_union as (\n    -- generate select & union statements to pivot category columns to rows\n    \n    select \n        code,\n        code_description,\n        substring(ccsr_category_1, 1, 3) as ccsr_parent_category,\n        ccsr_category_1 as ccsr_category,\n        ccsr_category_1_description as ccsr_category_description,\n        1 as ccsr_category_rank,\n        CASE WHEN ccsr_category_1 = default_ccsr_category_ip THEN 1 ELSE 0 END as is_ip_default_category,\n        CASE WHEN ccsr_category_1 = default_ccsr_category_op THEN 1 ELSE 0 END as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        substring(ccsr_category_2, 1, 3) as ccsr_parent_category,\n        ccsr_category_2 as ccsr_category,\n        ccsr_category_2_description as ccsr_category_description,\n        2 as ccsr_category_rank,\n        CASE WHEN ccsr_category_2 = default_ccsr_category_ip THEN 1 ELSE 0 END as is_ip_default_category,\n        CASE WHEN ccsr_category_2 = default_ccsr_category_op THEN 1 ELSE 0 END as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        substring(ccsr_category_3, 1, 3) as ccsr_parent_category,\n        ccsr_category_3 as ccsr_category,\n        ccsr_category_3_description as ccsr_category_description,\n        3 as ccsr_category_rank,\n        CASE WHEN ccsr_category_3 = default_ccsr_category_ip THEN 1 ELSE 0 END as is_ip_default_category,\n        CASE WHEN ccsr_category_3 = default_ccsr_category_op THEN 1 ELSE 0 END as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        substring(ccsr_category_4, 1, 3) as ccsr_parent_category,\n        ccsr_category_4 as ccsr_category,\n        ccsr_category_4_description as ccsr_category_description,\n        4 as ccsr_category_rank,\n        CASE WHEN ccsr_category_4 = default_ccsr_category_ip THEN 1 ELSE 0 END as is_ip_default_category,\n        CASE WHEN ccsr_category_4 = default_ccsr_category_op THEN 1 ELSE 0 END as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        substring(ccsr_category_5, 1, 3) as ccsr_parent_category,\n        ccsr_category_5 as ccsr_category,\n        ccsr_category_5_description as ccsr_category_description,\n        5 as ccsr_category_rank,\n        CASE WHEN ccsr_category_5 = default_ccsr_category_ip THEN 1 ELSE 0 END as is_ip_default_category,\n        CASE WHEN ccsr_category_5 = default_ccsr_category_op THEN 1 ELSE 0 END as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        substring(ccsr_category_6, 1, 3) as ccsr_parent_category,\n        ccsr_category_6 as ccsr_category,\n        ccsr_category_6_description as ccsr_category_description,\n        6 as ccsr_category_rank,\n        CASE WHEN ccsr_category_6 = default_ccsr_category_ip THEN 1 ELSE 0 END as is_ip_default_category,\n        CASE WHEN ccsr_category_6 = default_ccsr_category_op THEN 1 ELSE 0 END as is_op_default_category\n    from codes \n    \n\n)\n\nselect distinct\n    *,\n    '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom long_union\n-- as not all diagnosis codes have multiple categories, we can discard nulls\nwhere ccsr_category is not null", "relation_name": "dev_thuxuan.ccsr.dx_vertical_pivot"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:56.176765Z", "completed_at": "2024-10-01T16:31:56.183532Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:56.183532Z", "completed_at": "2024-10-01T16:31:57.056496Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.0084636211395264, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f6d9-0001-987f01112e02"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.unique_ed_classification__johnston_icd10_icd10.3d55f2b2dd", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    icd10 as unique_field,\n    count(*) as n_records\n\nfrom dev_thuxuan.ed_classification._value_set_johnston_icd10\nwhere icd10 is not null\ngroup by icd10\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:55.359095Z", "completed_at": "2024-10-01T16:31:55.364419Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:55.365413Z", "completed_at": "2024-10-01T16:31:57.275247Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.04740571975708, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f6d9-0001-987f01112dfe"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.clinical_concept_library__value_set_member_relevant_fields", "compiled": true, "compiled_code": "with value_set_member_relevant_fields as (\nselect \n  aa.concept_id,\n  aa.concept_name,\n  aa.concept_type,\n  \n  bb.value_set_member_id,\n  bb.code,\n  bb.coding_system_id,\n  bb.include_descendants,\n\n  cc.coding_system_name\n  \nfrom dev_thuxuan.clinical_concept_library.clinical_concepts aa\n\nleft join dev_thuxuan.clinical_concept_library.value_set_members bb\non aa.concept_id = bb.concept_id\n\nleft join dev_thuxuan.clinical_concept_library.coding_systems cc\non bb.coding_system_id = cc.coding_system_id\n)\n\n\nselect *\nfrom value_set_member_relevant_fields", "relation_name": "dev_thuxuan.clinical_concept_library.value_set_member_relevant_fields"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:54.797887Z", "completed_at": "2024-10-01T16:31:54.808323Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:54.809334Z", "completed_at": "2024-10-01T16:31:57.573169Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.922614336013794, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f7c5-0001-987f0110bcee"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ccsr__procedure_category_map", "compiled": true, "compiled_code": "\n\nselect \n    icd_10_pcs as code,\n    icd_10_pcs_description as code_description,\n    prccsr as ccsr_category,\n    substring(prccsr, 1, 3) as ccsr_parent_category,\n    prccsr_description as ccsr_category_description,\n    clinical_domain,\n   '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ccsr._value_set_prccsr_v2023_1_cleaned_map", "relation_name": "dev_thuxuan.ccsr.procedure_category_map"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:56.693598Z", "completed_at": "2024-10-01T16:31:56.699158Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:56.699158Z", "completed_at": "2024-10-01T16:31:57.815336Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.3135275840759277, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f913-0001-987f0111a4a2"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.unique_ed_classification__johnston_icd9_icd9.08c1dc4617", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    icd9 as unique_field,\n    count(*) as n_records\n\nfrom dev_thuxuan.ed_classification._value_set_johnston_icd9\nwhere icd9 is not null\ngroup by icd9\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:56.673034Z", "completed_at": "2024-10-01T16:31:56.678579Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:56.679590Z", "completed_at": "2024-10-01T16:31:57.809801Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.3371798992156982, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f6d9-0001-987f01112e06"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_ed_classification__johnston_icd9_icd9.a7feea49c0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect icd9\nfrom dev_thuxuan.ed_classification._value_set_johnston_icd9\nwhere icd9 is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:57.411994Z", "completed_at": "2024-10-01T16:31:57.425008Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:57.426005Z", "completed_at": "2024-10-01T16:31:58.742397Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.517775058746338, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b4e6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cbe0055__performance_period", "compiled": true, "compiled_code": "/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\nwith period_end as (\n\n    select\n        cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', convert_timezone('UTC', current_timestamp()))\n        )\n\n\n        )\n\n\n        as date)\n        \n         as performance_period_end\n         \n)\n\n/*\n    set performance period begin to a year and a day prior\n    for a complete calendar year\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    dateadd(\n        day,\n        1,\n        \n\n    dateadd(\n        year,\n        -1,\n        performance_period_end\n        )\n\n\n        )\n\n as performance_period_begin\n    from period_end\n\n)\n\nselect\n      cast((select id\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'CBE0055') as TEXT) as measure_id\n    , cast((select name\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'CBE0055') as TEXT) as measure_name\n    , cast((select version\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'CBE0055') as TEXT) as measure_version\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\nfrom period_begin", "relation_name": "dev_thuxuan.quality_measures._int_cbe0055__performance_period"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:57.189214Z", "completed_at": "2024-10-01T16:31:57.197720Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:57.197720Z", "completed_at": "2024-10-01T16:31:59.127031Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.0621190071105957, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d4be"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.mart_review__quality_measures_value_set", "compiled": true, "compiled_code": "\n\nselect *    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.quality_measures._value_set_measures p", "relation_name": "dev_thuxuan.data_quality.mart_review__quality_measures_value_set"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:57.724012Z", "completed_at": "2024-10-01T16:31:57.740811Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:57.741780Z", "completed_at": "2024-10-01T16:31:59.198275Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.6943702697753906, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b4ea"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cbe0101__performance_period", "compiled": true, "compiled_code": "/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided   \n*/\n\nwith period_end as (\n\n    select\n        cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', convert_timezone('UTC', current_timestamp()))\n        )\n\n\n        )\n\n\n        as date)\n        \n         as performance_period_end\n         \n)\n\n/*\n    set performance period begin to following day of 1 year prior\n*/\n\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    dateadd(\n        day,\n        1,\n        \n\n    dateadd(\n        year,\n        -1,\n        performance_period_end\n        )\n\n\n        )\n\n as performance_period_begin\n    from period_end\n\n)\n\nselect\n      cast((select id\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'CBE0101') as TEXT) as measure_id\n    , cast((select name\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'CBE0101') as TEXT) as measure_name\n    , cast((select version\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'CBE0101') as TEXT) as measure_version\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\nfrom period_begin", "relation_name": "dev_thuxuan.quality_measures._int_cbe0101__performance_period"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:58.020136Z", "completed_at": "2024-10-01T16:31:58.049307Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:58.050308Z", "completed_at": "2024-10-01T16:31:59.947206Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.07706618309021, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f8ce-0001-987f0111d4c2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm130__performance_period", "compiled": true, "compiled_code": "/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\nwith period_end as (\n\n    select\n        cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', convert_timezone('UTC', current_timestamp()))\n        )\n\n\n        )\n\n\n        as date)\n        \n         as performance_period_end\n)\n\n/*\n    set performance period begin to following day of 1 year prior\n*/\n\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    dateadd(\n        day,\n        1,\n        \n\n    dateadd(\n        year,\n        -1,\n        performance_period_end\n        )\n\n\n        )\n\n as performance_period_begin\n    from period_end\n\n)\n\nselect\n      cast((select id\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'CQM130') as TEXT) as measure_id\n    , cast((select name\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'CQM130') as TEXT) as measure_name\n    , cast((select version\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'CQM130') as TEXT) as measure_version\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\nfrom period_begin", "relation_name": "dev_thuxuan.quality_measures._int_cqm130__performance_period"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:58.035652Z", "completed_at": "2024-10-01T16:31:58.057312Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:58.063880Z", "completed_at": "2024-10-01T16:32:00.032946Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.170693874359131, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f7c5-0001-987f0110bcf2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm236__performance_period", "compiled": true, "compiled_code": "/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\nwith period_end as (\n\n    select\n        cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', convert_timezone('UTC', current_timestamp()))\n        )\n\n\n        )\n\n\n        as date)\n        \n         as performance_period_end\n)\n\n/*\n    set performance period begin to a year and a day prior\n    for a complete calendar year\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    dateadd(\n        day,\n        1,\n        \n\n    dateadd(\n        year,\n        -1,\n        performance_period_end\n        )\n\n\n        )\n\n as performance_period_begin\n    from period_end\n\n)\n\nselect\n      cast((select id\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'CQM236') as TEXT) as measure_id\n    , cast((select name\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'CQM236') as TEXT) as measure_name\n    , cast((select version\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'CQM236') as TEXT) as measure_version\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\nfrom period_begin", "relation_name": "dev_thuxuan.quality_measures._int_cqm236__performance_period"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:58.937402Z", "completed_at": "2024-10-01T16:31:58.949630Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:58.950641Z", "completed_at": "2024-10-01T16:32:00.069034Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.254044532775879, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f6d9-0001-987f01112e0a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm438__performance_period", "compiled": true, "compiled_code": "/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\nwith period_end as (\n\n    select\n        cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', convert_timezone('UTC', current_timestamp()))\n        )\n\n\n        )\n\n\n        as date)\n        \n         as performance_period_end\n         \n)\n\n/*\n    set performance period begin to a year and a day prior\n    for a complete calendar year\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    dateadd(\n        day,\n        1,\n        \n\n    dateadd(\n        year,\n        -1,\n        performance_period_end\n        )\n\n\n        )\n\n as performance_period_begin\n    from period_end\n\n)\n\nselect\n      cast((select id\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'CQM438') as TEXT) as measure_id\n    , cast((select name\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'CQM438') as TEXT) as measure_name\n    , cast((select version\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'CQM438') as TEXT) as measure_version\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\nfrom period_begin", "relation_name": "dev_thuxuan.quality_measures._int_cqm438__performance_period"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:59.257325Z", "completed_at": "2024-10-01T16:31:59.272086Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:59.273004Z", "completed_at": "2024-10-01T16:32:00.357928Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2389700412750244, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b766ff-010a-f912-0001-987f0111b4ee"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm48__performance_period", "compiled": true, "compiled_code": "/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided   \n*/\n\nwith period_end as (\n\n    select\n        cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', convert_timezone('UTC', current_timestamp()))\n        )\n\n\n        )\n\n\n        as date)\n        \n         as performance_period_end\n         \n)\n\n/*\n    set performance period begin to following day of 1 year prior\n*/\n\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    dateadd(\n        day,\n        1,\n        \n\n    dateadd(\n        year,\n        -1,\n        performance_period_end\n        )\n\n\n        )\n\n as performance_period_begin\n    from period_end\n\n)\n\nselect\n      cast((select id\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'CQM48') as TEXT) as measure_id\n    , cast((select name\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'CQM48') as TEXT) as measure_name\n    , cast((select version\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'CQM48') as TEXT) as measure_version\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\nfrom period_begin", "relation_name": "dev_thuxuan.quality_measures._int_cqm48__performance_period"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:31:59.423483Z", "completed_at": "2024-10-01T16:31:59.441412Z"}, {"name": "execute", "started_at": "2024-10-01T16:31:59.442380Z", "completed_at": "2024-10-01T16:32:00.475585Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.3144316673278809, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f912-0001-987f0111b4f2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0041__performance_period", "compiled": true, "compiled_code": "/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n      - set quality_measures_period_end to december end for last quarter measurement period\n      - set quality_measures_period_end to march end for first quarter measurement period     \n*/\n\nwith period_end as (\n\n    select\n        cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', convert_timezone('UTC', current_timestamp()))\n        )\n\n\n        )\n\n\n        as date)\n        \n         as performance_period_end\n         \n)\n\n/*\n    set performance period begin to following day of 3 months prior\n    for visits in influenza season\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    dateadd(\n        day,\n        1,\n        \n\n    dateadd(\n        month,\n        -3,\n        performance_period_end\n        )\n\n\n        )\n\n as performance_period_begin\n    from period_end\n\n)\n\n/*\n    lookback_period for august of either current or previous year\n    for immunization qualifying date\n*/\n, lookback_period as (\n\n  select\n      *\n        , case\n            when date_part('month', performance_period_end) between 1 and 8\n            then (cast(date_part('year', performance_period_end) as integer) - 1) || '-08-01'\n            else date_part('year', performance_period_end) || '-08-01'\n        end as lookback_period_august\n  from period_begin\n\n)\n\nselect\n      cast((select id\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'NQF0041') as TEXT) as measure_id\n    , cast((select name\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'NQF0041') as TEXT) as measure_name\n    , cast((select version\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'NQF0041') as TEXT) as measure_version\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\n    , cast(lookback_period_august as date) as lookback_period_august\nfrom lookback_period", "relation_name": "dev_thuxuan.quality_measures._int_nqf0041__performance_period"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:00.099818Z", "completed_at": "2024-10-01T16:32:00.113050Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:00.116064Z", "completed_at": "2024-10-01T16:32:01.472870Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.4950675964355469, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f7c5-0001-987f0110bcf6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0053__performance_period", "compiled": true, "compiled_code": "/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\nwith period_end as (\n\n    select\n        cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', convert_timezone('UTC', current_timestamp()))\n        )\n\n\n        )\n\n\n        as date)\n        \n         as performance_period_end\n)\n\n/*\n    set performance period begin to a year and a day prior\n    for a complete calendar year\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    dateadd(\n        day,\n        1,\n        \n\n    dateadd(\n        year,\n        -1,\n        performance_period_end\n        )\n\n\n        )\n\n as performance_period_begin\n    from period_end\n\n)\n\n-- lookback_period for last june 30 and december 31\n, lookback_period as (\n\nSELECT\n  *\n  , case\n      when performance_period_end >= cast((date_part('year', performance_period_end) || '-06-30') as date)\n      then date_part('year', performance_period_end) || '-06-30'\n      else date_part('year', performance_period_begin) || '-06-30'\n    end as lookback_period_june\n  , case\n      when performance_period_end >= cast((date_part('year', performance_period_end) || '-12-31') as date)\n      then date_part('year', performance_period_end) || '-12-31'\n      else date_part('year', performance_period_begin) || '-12-31'\n    end as lookback_period_december\nFROM period_begin\n\n)\n\nselect\n      cast((select id\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'NQF0053') as TEXT) as measure_id\n    , cast((select name\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'NQF0053') as TEXT) as measure_name\n    , cast((select version\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'NQF0053') as TEXT) as measure_version\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\n    , cast(lookback_period_june as date) as lookback_period_june\n    , cast(lookback_period_december as date) as lookback_period_december\nfrom lookback_period", "relation_name": "dev_thuxuan.quality_measures._int_nqf0053__performance_period"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:00.202381Z", "completed_at": "2024-10-01T16:32:00.228574Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:00.229515Z", "completed_at": "2024-10-01T16:32:01.483500Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.4334642887115479, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f912-0001-987f0111b4f6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0059__performance_period", "compiled": true, "compiled_code": "/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\nwith period_end as (\n\n    select\n        cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', convert_timezone('UTC', current_timestamp()))\n        )\n\n\n        )\n\n\n        as date)\n        \n         as performance_period_end\n)\n\n/*\n    set performance period begin to a year and a day prior\n    for a complete calendar year\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    dateadd(\n        day,\n        1,\n        \n\n    dateadd(\n        year,\n        -1,\n        performance_period_end\n        )\n\n\n        )\n\n as performance_period_begin\n    from period_end\n\n)\n\nselect\n      cast((select id\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'NQF0059') as TEXT) as measure_id\n    , cast((select name\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'NQF0059') as TEXT) as measure_name\n    , cast((select version\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'NQF0059') as TEXT) as measure_version\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\nfrom period_begin", "relation_name": "dev_thuxuan.quality_measures._int_nqf0059__performance_period"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:00.216913Z", "completed_at": "2024-10-01T16:32:00.234595Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:00.235515Z", "completed_at": "2024-10-01T16:32:01.516949Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.4529173374176025, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e0e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0097__performance_period", "compiled": true, "compiled_code": "/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\nwith period_end as (\n\n    select\n        cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', convert_timezone('UTC', current_timestamp()))\n        )\n\n\n        )\n\n\n        as date)\n        \n         as performance_period_end\n         \n)\n\n/*\n    set performance period begin to a year and a day prior\n    for a complete calendar year\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    dateadd(\n        day,\n        1,\n        \n\n    dateadd(\n        year,\n        -1,\n        performance_period_end\n        )\n\n\n        )\n\n as performance_period_begin\n    from period_end\n\n)\n\nselect\n      cast((select id\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'NQF0097') as TEXT) as measure_id\n    , cast((select name\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'NQF0097') as TEXT) as measure_name\n    , cast((select version\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'NQF0097') as TEXT) as measure_version\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\nfrom period_begin", "relation_name": "dev_thuxuan.quality_measures._int_nqf0097__performance_period"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:00.743531Z", "completed_at": "2024-10-01T16:32:00.754137Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:00.755140Z", "completed_at": "2024-10-01T16:32:01.980496Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.3661813735961914, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f913-0001-987f0111a4a6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.pharmacy__int_brand_with_generic_available", "compiled": true, "compiled_code": "\n\nselect distinct \n    product_rxcui as brand_with_generic_available\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.pharmacy.rxnorm_generic_available\nwhere \n    ndc_product_tty in ('SCD', 'GPCK')\n    \n        and cast(product_startmarketingdate as date) <= current_date\n", "relation_name": "dev_thuxuan.pharmacy._int_brand_with_generic_available"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:00.504208Z", "completed_at": "2024-10-01T16:32:00.527733Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:00.528732Z", "completed_at": "2024-10-01T16:32:02.103682Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.877091884613037, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e12"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372__performance_period", "compiled": true, "compiled_code": "/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\nwith period_end as (\n\n    select\n        cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', convert_timezone('UTC', current_timestamp()))\n        )\n\n\n        )\n\n\n        as date)\n        \n         as performance_period_end\n)\n\n/*\n    set performance period begin to a year and a day prior\n    for a complete calendar year\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    dateadd(\n        day,\n        1,\n        \n\n    dateadd(\n        year,\n        -1,\n        performance_period_end\n        )\n\n\n        )\n\n as performance_period_begin\n    from period_end\n\n)\n\n/*\n    set performance lookback period to 27 months prior to the end of the\n    performance period\n*/\n, period_lookback as (\n\n    select\n          performance_period_end\n        , performance_period_begin\n        , \n\n    dateadd(\n        month,\n        -27,\n        performance_period_end\n        )\n\n as performance_period_lookback\n    from period_begin\n\n\n)\n\nselect\n      cast((select id\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'NQF2372') as TEXT) as measure_id\n    , cast((select name\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'NQF2372') as TEXT) as measure_name\n    , cast((select version\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'NQF2372') as TEXT) as measure_version\n    , cast(performance_period_end as date) as performance_period_end\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_lookback as date) as performance_period_lookback\nfrom period_lookback", "relation_name": "dev_thuxuan.quality_measures._int_nqf2372__performance_period"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:01.601232Z", "completed_at": "2024-10-01T16:32:01.610147Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:01.611142Z", "completed_at": "2024-10-01T16:32:02.985632Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.5062079429626465, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e16"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_normalized_code_type", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    , 'CONDITION' AS table_name\n    , 'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_CODE_TYPE' AS field_name\n    , case when term.code_type is not null then 'valid'\n           when m.normalized_code_type is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.normalized_code_type is not null and term.code_type is null\n           then 'Normalized Code Type does not join to Terminology code_type table'\n           else null end as invalid_reason\n    , cast(normalized_code_type as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m\nleft join dev_thuxuan.reference_data.code_type as term on m.normalized_code_type = term.code_type", "relation_name": "dev_thuxuan.data_quality.condition_normalized_code_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:01.925024Z", "completed_at": "2024-10-01T16:32:01.939032Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:01.939032Z", "completed_at": "2024-10-01T16:32:03.456488Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.8133502006530762, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e1a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_normalized_code_type", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_CODE_TYPE' as field_name\n    , case when term.code_type is not null then 'valid'\n          when m.normalized_code_type is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    , case when m.normalized_code_type is not null and term.code_type is null\n           then 'Normalized code type does not join to Terminology code_type table'\n           else null end as invalid_reason\n    , cast(normalized_code_type as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m\nleft join dev_thuxuan.reference_data.code_type term on m.normalized_code_type = term.code_type", "relation_name": "dev_thuxuan.data_quality.lab_result_normalized_code_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:02.116198Z", "completed_at": "2024-10-01T16:32:02.123200Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:02.124199Z", "completed_at": "2024-10-01T16:32:03.830796Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.893921136856079, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f913-0001-987f0111a4aa"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_normalized_code_type", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_CODE_TYPE' as field_name\n    , case when term.code_type is not null then 'valid'\n           when m.normalized_code_type is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.normalized_code_type is not null and term.code_type is null\n           then 'Normalized code type does not join to Terminology code_type table'\n           else null end as invalid_reason\n    , cast(normalized_code_type as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m\nleft join dev_thuxuan.reference_data.code_type term on m.normalized_code_type = term.code_type", "relation_name": "dev_thuxuan.data_quality.procedure_normalized_code_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:01.917023Z", "completed_at": "2024-10-01T16:32:01.931032Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:01.932029Z", "completed_at": "2024-10-01T16:32:04.392726Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.713092803955078, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f7c5-0001-987f0110bcfa"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_primary_diagnosis_code_type", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'PRIMARY_DIAGNOSIS_CODE_TYPE' AS field_name\n    , case when term.code_type is not null then 'valid'\n          when m.primary_diagnosis_code_type is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    , case when m.primary_diagnosis_code_type is not null and term.code_type is null\n          then 'Primary Diagnosis Code Type does not join to Terminology code_type table'\n          else null end as invalid_reason\n    , cast(primary_diagnosis_code_type as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m\nleft join dev_thuxuan.reference_data.code_type term on m.primary_diagnosis_code_type = term.code_type", "relation_name": "dev_thuxuan.data_quality.encounter_primary_diagnosis_code_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:02.387348Z", "completed_at": "2024-10-01T16:32:02.397824Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:02.398826Z", "completed_at": "2024-10-01T16:32:04.753368Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.612868547439575, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e1e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.mart_review__calendar_month", "compiled": true, "compiled_code": "\n\n\nselect distinct\ncast(year_month_int as TEXT) as year_month\n, full_date\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.reference_data.calendar c\nwhere day = 1", "relation_name": "dev_thuxuan.data_quality.mart_review__calendar_month"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:03.115197Z", "completed_at": "2024-10-01T16:32:03.124195Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:03.125211Z", "completed_at": "2024-10-01T16:32:04.719868Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.9472570419311523, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e22"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_admit_source_code", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'ADMIT_SOURCE_CODE' AS field_name\n    , case when term.admit_source_code is not null then 'valid'\n           when m.admit_source_code is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.admit_source_code is not null and term.admit_source_code is null\n           then 'Admit source code does not join to Terminology admit source table'\n           else null end as invalid_reason\n    , cast(m.admit_source_code as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m\nleft join dev_thuxuan.terminology.admit_source term on m.admit_source_code = term.admit_source_code", "relation_name": "dev_thuxuan.data_quality.encounter_admit_source_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:03.742377Z", "completed_at": "2024-10-01T16:32:03.748651Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:03.749563Z", "completed_at": "2024-10-01T16:32:05.500966Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.9047293663024902, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f7c5-0001-987f0110bcfe"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_admit_type_code", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'ADMIT_TYPE_CODE' AS field_name\n    , case when term.admit_type_code is not null then 'valid'\n          when m.admit_type_code is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    , case when m.admit_type_code is not null and term.admit_type_code is null\n          then 'Admit Type Code does not join to Terminology admit_type table'\n          else null end as invalid_reason\n    , cast(m.admit_type_code as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m\nleft join dev_thuxuan.terminology.admit_type term on m.admit_type_code = term.admit_type_code", "relation_name": "dev_thuxuan.data_quality.encounter_admit_type_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:04.014623Z", "completed_at": "2024-10-01T16:32:04.020705Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:04.021716Z", "completed_at": "2024-10-01T16:32:05.743638Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.939096212387085, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f7c5-0001-987f0110bd02"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_apr_drg_code", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    ,'ENCOUNTER' AS table_name\n    ,'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    ,'APR_DRG_CODE' AS field_name\n    ,case when term.apr_drg_code is not null then 'valid'\n          when m.apr_drg_code is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    ,case when m.apr_drg_code is not null and term.apr_drg_code is null\n          then 'APR DRG Code does not join to Terminology apr_drg table'\n          else null end as invalid_reason\n    ,cast(m.apr_drg_code as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m\nleft join dev_thuxuan.terminology.apr_drg term on m.apr_drg_code = term.apr_drg_code", "relation_name": "dev_thuxuan.data_quality.encounter_apr_drg_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:04.632060Z", "completed_at": "2024-10-01T16:32:04.639097Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:04.639097Z", "completed_at": "2024-10-01T16:32:06.174092Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.7906773090362549, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f913-0001-987f0111a4ae"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_discharge_disposition_code", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'DISCHARGE_DISPOSITION_CODE' AS field_name\n    , case when term.discharge_disposition_code is not null then 'valid'\n           when m.discharge_disposition_code is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.discharge_disposition_code is not null and term.discharge_disposition_code is null\n           then 'Discharge Disposition Code does not join to Terminology discharge_disposition table'\n           else null end as invalid_reason\n    , cast(m.discharge_disposition_code as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m\nleft join dev_thuxuan.terminology.discharge_disposition term on m.discharge_disposition_code = term.discharge_disposition_code", "relation_name": "dev_thuxuan.data_quality.encounter_discharge_disposition_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:05.066914Z", "completed_at": "2024-10-01T16:32:05.073995Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:05.074918Z", "completed_at": "2024-10-01T16:32:06.905345Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.9638173580169678, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f913-0001-987f0111a4b2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_sex", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PATIENT' AS table_name\n    , 'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    , 'SEX' as field_name\n    , case when term.gender is not null then 'valid'\n           when m.sex is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.sex is not null and term.gender is null\n           then 'Sex does not join to Terminology gender table'\n           else null end as invalid_reason\n    , cast(sex as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m\nleft join dev_thuxuan.terminology.gender term on m.sex = term.gender", "relation_name": "dev_thuxuan.data_quality.patient_sex"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:05.004180Z", "completed_at": "2024-10-01T16:32:05.010256Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:05.010256Z", "completed_at": "2024-10-01T16:32:06.916995Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.0617337226867676, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e26"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_encounter_type", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'ENCOUNTER_TYPE' AS field_name\n    , case when term.encounter_type is not null then 'valid'\n          when m.encounter_type is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    , case when m.encounter_type is not null and term.encounter_type is null\n          then 'Encounter type does not join to Terminology encounter_type table'\n          else null end as invalid_reason\n    , cast(m.encounter_type as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m\nleft join dev_thuxuan.terminology.encounter_type term on m.encounter_type = term.encounter_type", "relation_name": "dev_thuxuan.data_quality.encounter_encounter_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:05.652660Z", "completed_at": "2024-10-01T16:32:05.658609Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:05.658609Z", "completed_at": "2024-10-01T16:32:07.109285Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.667428970336914, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f913-0001-987f0111a4b6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_modifier_1", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as SOURCE_DATE\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'MODIFIER_1' as field_name\n    , case when term.hcpcs is not null then 'valid'\n           when m.modifier_1 is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.modifier_1 is not null and term.hcpcs is null\n           then 'Modifier 1 does not join to Terminology hcpcs_level_2 table'\n           else null end as invalid_reason\n    , cast(modifier_1 as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m\nleft join dev_thuxuan.terminology.hcpcs_level_2 term on m.modifier_1 = term.hcpcs", "relation_name": "dev_thuxuan.data_quality.procedure_modifier_1"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:05.958748Z", "completed_at": "2024-10-01T16:32:05.965068Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:05.965962Z", "completed_at": "2024-10-01T16:32:07.512816Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.789285659790039, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f913-0001-987f0111a4ba"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_modifier_2", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'MODIFIER_2' as field_name\n    , case when term.hcpcs is not null then 'valid'\n           when m.modifier_2 is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.modifier_2 is not null and term.hcpcs is null\n           then 'Modifier 2 does not join to Terminology hcpcs_level_2 table'\n           else null end as invalid_reason\n    , cast(modifier_2 as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m\nleft join dev_thuxuan.terminology.hcpcs_level_2 term on m.modifier_2 = term.hcpcs", "relation_name": "dev_thuxuan.data_quality.procedure_modifier_2"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:06.429603Z", "completed_at": "2024-10-01T16:32:06.436689Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:06.437648Z", "completed_at": "2024-10-01T16:32:07.955192Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.6892585754394531, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f913-0001-987f0111a4be"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_modifier_3", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'MODIFIER_3' as field_name\n    , case when term.hcpcs is not null then 'valid'\n           when m.modifier_3 is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.modifier_3 is not null and term.hcpcs is null\n           then 'Modifier 3 does not join to Terminology hcpcs_level_2 table'\n           else null end as invalid_reason\n    , cast(modifier_3 as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m\nleft join dev_thuxuan.terminology.hcpcs_level_2 term on m.modifier_3 = term.hcpcs", "relation_name": "dev_thuxuan.data_quality.procedure_modifier_3"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:07.037066Z", "completed_at": "2024-10-01T16:32:07.042065Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:07.043069Z", "completed_at": "2024-10-01T16:32:09.144002Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.2267072200775146, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f912-0001-987f0111b4fa"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_modifier_4", "compiled": true, "compiled_code": "\n\n\nSELECT\n    m.data_source\n    ,coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    ,'PROCEDURE' AS table_name\n    ,'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    ,'MODIFIER_4' as field_name\n    ,case when term.hcpcs is not null then 'valid'\n          when m.modifier_4 is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    ,case when m.modifier_4 is not null and term.hcpcs is null\n          then 'Modifier 4 does not join to Terminology hcpcs_level_2 table'\n    else null end as invalid_reason\n    ,cast(modifier_4 as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m\nleft join dev_thuxuan.terminology.hcpcs_level_2 term on m.modifier_4 = term.hcpcs", "relation_name": "dev_thuxuan.data_quality.procedure_modifier_4"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:07.070894Z", "completed_at": "2024-10-01T16:32:07.076911Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:07.076911Z", "completed_at": "2024-10-01T16:32:09.191853Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.2789289951324463, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f912-0001-987f0111b4fe"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_modifier_5", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'MODIFIER_5' as field_name\n    , case when term.hcpcs is not null then 'valid'\n           when m.modifier_5 is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.modifier_5 is not null and term.hcpcs is null\n           then 'Modifier 5 does not join to Terminology hcpcs_level_2 table'\n           else null end as invalid_reason\n    , cast(modifier_5 as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m\nleft join dev_thuxuan.terminology.hcpcs_level_2 term on m.modifier_5 = term.hcpcs", "relation_name": "dev_thuxuan.data_quality.procedure_modifier_5"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:07.326078Z", "completed_at": "2024-10-01T16:32:07.334604Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:07.335609Z", "completed_at": "2024-10-01T16:32:09.253201Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.081413984298706, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f912-0001-987f0111b502"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_normalized_code", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    , 'CONDITION' AS table_name\n    , 'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_CODE' AS field_name\n    , case when term.icd_10_cm is not null then 'valid'\n          when m.normalized_code is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    , case when m.normalized_code is not null and term.icd_10_cm is null\n           then 'Normalized code does not join to Terminology icd_10_cm table'\n           else null end as invalid_reason\n    , cast(normalized_code as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m\nleft join dev_thuxuan.terminology.icd_10_cm term on m.normalized_code = term.icd_10_cm", "relation_name": "dev_thuxuan.data_quality.condition_normalized_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:07.753723Z", "completed_at": "2024-10-01T16:32:07.760764Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:07.761702Z", "completed_at": "2024-10-01T16:32:09.464737Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.48158597946167, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e2a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_primary_diagnosis_code", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'PRIMARY_DIAGNOSIS_CODE' AS field_name\n    , case when term.icd_10_cm is not null then 'valid'\n          when m.primary_diagnosis_code is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    , case when m.primary_diagnosis_code is not null and term.icd_10_cm is null\n          then 'Primary diagnosis code does not join to Terminology icd_10_cm table'\n    else null end as invalid_reason\n    , cast(primary_diagnosis_code as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m\nleft join dev_thuxuan.terminology.icd_10_cm term on m.primary_diagnosis_code = term.icd_10_cm", "relation_name": "dev_thuxuan.data_quality.encounter_primary_diagnosis_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:08.125649Z", "completed_at": "2024-10-01T16:32:08.140164Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:08.141164Z", "completed_at": "2024-10-01T16:32:10.225912Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.2472407817840576, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f7c5-0001-987f0110bd06"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_normalized_code", "compiled": true, "compiled_code": "\n\nwith icd9 as (\n    SELECT\n          m.data_source\n        , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n        , 'PROCEDURE' AS table_name\n        , 'Procedure ID' as drill_down_key\n        , coalesce(procedure_id, 'NULL') AS drill_down_value\n        , 'NORMALIZED_CODE' as field_name\n        , case when term.icd_9_pcs is not null then 'valid'\n               when m.normalized_code is not null then 'invalid'\n               else 'null'\n        end as bucket_name\n        , case when m.normalized_code is not null and term.icd_9_pcs is null\n               then 'Normalized code does not join to Terminology icd_9_pcs table'\n               else null end as invalid_reason\n        , cast(normalized_code as TEXT) as field_value\n    from tuva.input_layer.procedure m\n    left join dev_thuxuan.terminology.icd_9_pcs term on m.normalized_code = term.icd_9_pcs\n    where\n        m.normalized_code_type = 'icd-9-pcs'\n),\nicd10 as (\n    SELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_CODE' as field_name\n    , case when term.icd_10_pcs is not null then 'valid'\n           when m.normalized_code is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.normalized_code is not null and term.icd_10_pcs is null\n           then 'Normalized code does not join to Terminology icd_10_pcs table'\n           else null end as invalid_reason\n    , cast(normalized_code as TEXT) as field_value\nfrom tuva.input_layer.procedure m\nleft join dev_thuxuan.terminology.icd_10_pcs term on m.normalized_code = term.icd_10_pcs\nwhere\n    m.normalized_code_type = 'icd_10_pcs'\n),\nhcpcs_level_2 as (\n    SELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_CODE' as field_name\n    , case when term.hcpcs is not null then 'valid'\n           when m.normalized_code is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.normalized_code is not null and term.hcpcs is null\n           then 'Normalized code does not join to Terminology hcpcs_level_2 table'\n           else null end as invalid_reason\n    , cast(normalized_code as TEXT) as field_value\nfrom tuva.input_layer.procedure m\nleft join dev_thuxuan.terminology.hcpcs_level_2 term on m.normalized_code = term.hcpcs\nwhere\n    m.normalized_code_type = 'hcpcs_level_2'\n),\n\nothers as (\n    SELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_CODE' as field_name\n    , 'null' as bucket_name\n    , 'code type does not have a matching code terminology table' as invalid_reason\n    , cast(normalized_code as TEXT) as field_value\nfrom tuva.input_layer.procedure m\nwhere\n    m.normalized_code_type not in ('icd-9-pcs', 'icd-10-pcs','hcpcs_level_2')\n)\n\nSELECT *, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run FROM icd9\n\nunion all\n\nSELECT * , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run FROM icd10\n\nunion all\n\nSELECT * , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run FROM hcpcs_level_2\n\nunion all\n\nSELECT * , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run FROM others", "relation_name": "dev_thuxuan.data_quality.procedure_normalized_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:09.410491Z", "completed_at": "2024-10-01T16:32:09.417046Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:09.418051Z", "completed_at": "2024-10-01T16:32:10.993915Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.7561757564544678, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f8ce-0001-987f0111d4c6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_ms_drg_code", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'MS_DRG_CODE' AS field_name\n    , case when term.ms_drg_code is not null then 'valid'\n          when m.ms_drg_code is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    , case when m.ms_drg_code is not null and term.ms_drg_code is null\n          then 'MS DRG Code does not join to Terminology ms_drg table'\n          else null end as invalid_reason\n    , cast(m.ms_drg_code as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m\nleft join dev_thuxuan.terminology.ms_drg term on m.ms_drg_code = term.ms_drg_code", "relation_name": "dev_thuxuan.data_quality.encounter_ms_drg_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:09.354458Z", "completed_at": "2024-10-01T16:32:09.360465Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:09.362054Z", "completed_at": "2024-10-01T16:32:10.991592Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.820746660232544, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e2e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_normalized_component", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_COMPONENT' as field_name\n    , case when term.loinc is not null then 'valid'\n          when m.normalized_component is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    , case when m.normalized_component is not null and term.loinc is null\n           then 'Normalized component does not join to Terminology loinc table'\n           else null end as invalid_reason\n    , cast(normalized_component as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m\nleft join dev_thuxuan.terminology.loinc term on m.normalized_component = term.loinc", "relation_name": "dev_thuxuan.data_quality.lab_result_normalized_component"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:09.268701Z", "completed_at": "2024-10-01T16:32:09.274701Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:09.274701Z", "completed_at": "2024-10-01T16:32:11.307684Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.2015748023986816, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f7c5-0001-987f0110bd0a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_normalized_code", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_CODE' as field_name\n    , case when term.loinc is not null then 'valid'\n          when m.normalized_code is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    , case when m.normalized_code is not null and term.loinc is null\n           then 'Normalized code does not join to Terminology loinc table'\n           else null end as invalid_reason\n    , cast(normalized_code as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m\nleft join dev_thuxuan.terminology.loinc term on m.normalized_code = term.loinc", "relation_name": "dev_thuxuan.data_quality.lab_result_normalized_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:10.376955Z", "completed_at": "2024-10-01T16:32:10.382471Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:10.383474Z", "completed_at": "2024-10-01T16:32:11.887704Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.8252999782562256, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f913-0001-987f0111a4c2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_ndc_description", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'NDC_DESCRIPTION' as field_name\n    , case when term.ndc is not null then 'valid'\n           when m.ndc_code is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.ndc_code is not null and term.ndc is null\n           then 'NDC code type does not join to Terminology ndc table'\n           else null end as invalid_reason\n    , cast(substring(ndc_description, 1, 255) as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m\nleft join dev_thuxuan.terminology.ndc term on m.ndc_code = term.ndc", "relation_name": "dev_thuxuan.data_quality.medication_ndc_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:10.240242Z", "completed_at": "2024-10-01T16:32:10.246890Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:10.247842Z", "completed_at": "2024-10-01T16:32:11.623814Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.9789881706237793, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f8ce-0001-987f0111d4ca"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_present_on_admit_code", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    ,'CONDITION' AS table_name\n    ,'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    ,'PRESENT_ON_ADMIT_CODE' AS field_name\n    ,case when term.present_on_admit_code is not null then 'valid'\n          when m.present_on_admit_code is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    ,case when m.present_on_admit_code is not null and term.present_on_admit_code is null\n          then 'Present On Admit Code does not join to Terminology present_on_admission table'\n          else null\n    end as invalid_reason\n    ,cast(m.present_on_admit_code as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m\nleft join dev_thuxuan.terminology.present_on_admission term on m.present_on_admit_code = term.present_on_admit_code", "relation_name": "dev_thuxuan.data_quality.condition_present_on_admit_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:11.176163Z", "completed_at": "2024-10-01T16:32:11.309018Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:11.312530Z", "completed_at": "2024-10-01T16:32:13.343768Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.3591020107269287, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f912-0001-987f0111b506"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_race", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PATIENT' AS table_name\n    , 'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    , 'RACE' as field_name\n    , case when term.description is not null then 'valid'\n           when m.race is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.race is not null and term.description is null\n           then 'Race description does not join to Terminology race table'\n           else null end as invalid_reason\n    , cast(race as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m\nleft join dev_thuxuan.terminology.race term on m.race = term.description", "relation_name": "dev_thuxuan.data_quality.patient_race"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:11.323546Z", "completed_at": "2024-10-01T16:32:11.332161Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:11.333092Z", "completed_at": "2024-10-01T16:32:13.354295Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.2201192378997803, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e32"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_atc_code", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'ATC_CODE' as field_name\n    , case when coalesce(term_1.atc_1_name,term_2.atc_2_name,term_3.atc_3_name,term_4.atc_4_name) is not null then 'valid'\n           when m.atc_code is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.atc_code is not null and coalesce(term_1.atc_1_name,term_2.atc_2_name,term_3.atc_3_name,term_4.atc_4_name) is null\n           then 'ATC Code does not join to Terminology rxnorm_to_atc table on any atc level'\n           else null end as invalid_reason\n    , cast(atc_code as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m\nleft join dev_thuxuan.terminology.rxnorm_to_atc term_1 on m.atc_code = term_1.atc_1_name\nleft join dev_thuxuan.terminology.rxnorm_to_atc term_2 on m.atc_code = term_2.atc_2_name\nleft join dev_thuxuan.terminology.rxnorm_to_atc term_3 on m.atc_code = term_3.atc_3_name\nleft join dev_thuxuan.terminology.rxnorm_to_atc term_4 on m.atc_code = term_4.atc_4_name", "relation_name": "dev_thuxuan.data_quality.medication_atc_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:11.474175Z", "completed_at": "2024-10-01T16:32:11.481690Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:11.481690Z", "completed_at": "2024-10-01T16:32:13.341828Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.07609224319458, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f8ce-0001-987f0111d4ce"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_rxnorm_code", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'RXNORM_CODE' as field_name\n    , case when term.rxcui is not null then 'valid'\n           when m.rxnorm_code is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.rxnorm_code is not null and term.rxcui is null\n           then 'RX norm code does not join to Terminology rxnorm_to_atc table'\n           else null end as invalid_reason\n    , cast(rxnorm_code as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m\nleft join dev_thuxuan.terminology.rxnorm_to_atc term on m.rxnorm_code = term.rxcui", "relation_name": "dev_thuxuan.data_quality.medication_rxnorm_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:12.206513Z", "completed_at": "2024-10-01T16:32:12.219236Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:12.220547Z", "completed_at": "2024-10-01T16:32:15.099115Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 3.087322235107422, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f8ce-0001-987f0111d4d6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__medication", "compiled": true, "compiled_code": "\n\n\nwith source_mapping as (\n\n    select\n     meds.medication_id\n   , meds.patient_id\n   , meds.encounter_id\n   , meds.dispensing_date\n   , meds.prescribing_date\n   , meds.source_code_type\n   , meds.source_code\n   , meds.source_description\n   , coalesce(\n       meds.ndc_code\n       , ndc.ndc\n       ) as ndc_code\n   ,  coalesce(\n       meds.ndc_description\n       , ndc.fda_description\n       , ndc.rxnorm_description\n       ) as ndc_description\n   , case\n        when meds.ndc_code is not null then 'manual'\n        when ndc.ndc is not null then 'automatic'\n        end as ndc_mapping_method\n   , coalesce(\n        meds.rxnorm_code\n        , rxatc.rxcui\n        ) as rxnorm_code\n   , coalesce(\n       meds.rxnorm_description\n       , rxatc.rxnorm_description\n       ) as rxnorm_description\n   , case\n        when meds.rxnorm_code is not null then 'manual'\n        when rxatc.rxcui is not null then 'automatic'\n        end as rxnorm_mapping_method\n   , coalesce(\n        meds.atc_code\n        , rxatc.atc_3_code\n        ) as atc_code\n   , coalesce(\n        meds.atc_description\n        , rxatc.atc_4_name\n        ) as atc_description\n   , case\n        when meds.atc_code is not null then 'manual'\n        when rxatc.atc_3_name is not null then 'automatic'\n        end as atc_mapping_method\n   , meds.route\n   , meds.strength\n   , meds.quantity\n   , meds.quantity_unit\n   , meds.days_supply\n   , meds.practitioner_id\n   , meds.data_source\n   , meds.tuva_last_run\nfrom dev_thuxuan.core._stg_clinical_medication meds\n    left join dev_thuxuan.terminology.ndc ndc\n        on meds.source_code_type = 'ndc'\n        and meds.source_code = ndc.ndc\n    left join dev_thuxuan.terminology.rxnorm_to_atc rxatc\n        on meds.source_code_type = 'rxnorm'\n        and meds.source_code = rxatc.rxcui\n\n\n\n   )\n\n\n-- add auto rxnorm + atc\nselect\n     sm.medication_id\n   , sm.patient_id\n   , sm.encounter_id\n   , sm.dispensing_date\n   , sm.prescribing_date\n   , sm.source_code_type\n   , sm.source_code\n   , sm.source_description\n   , sm.ndc_code\n   , sm.ndc_description\n   , sm.ndc_mapping_method\n   , coalesce(\n        sm.rxnorm_code\n        , ndc.rxcui\n        ) as rxnorm_code\n   , coalesce(\n        sm.rxnorm_description\n        , ndc.rxnorm_description\n        ) as rxnorm_description\n   , case\n        when sm.rxnorm_mapping_method is not null then sm.rxnorm_mapping_method\n        when ndc.rxcui is not null then 'automatic'\n        end as rxnorm_mapping_method\n   , coalesce(\n        sm.atc_code\n        , rxatc.atc_3_code\n        ) as atc_code\n   , coalesce(\n        sm.atc_description\n        , rxatc.atc_3_name\n        ) as atc_description\n   , case\n        when sm.atc_mapping_method is not null then sm.atc_mapping_method\n        when rxatc.atc_3_name is not null then 'automatic'\n        end as atc_mapping_method\n   , sm.route\n   , sm.strength\n   , sm.quantity\n   , sm.quantity_unit\n   , sm.days_supply\n   , sm.practitioner_id\n   , sm.data_source\n   , sm.tuva_last_run\nfrom source_mapping sm\n    left join dev_thuxuan.terminology.ndc ndc\n        on sm.ndc_code = ndc.ndc\n    left join dev_thuxuan.terminology.rxnorm_to_atc rxatc\n        on coalesce( sm.rxnorm_code, ndc.rxcui ) = rxatc.rxcui", "relation_name": "dev_thuxuan.core.medication"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:12.233654Z", "completed_at": "2024-10-01T16:32:12.242658Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:12.243654Z", "completed_at": "2024-10-01T16:32:15.100140Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 3.0622217655181885, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f8ce-0001-987f0111d4d2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__primary_keys_medication_medication_id", "compiled": true, "compiled_code": "\n\nWITH valid_conditions AS (\n    SELECT\n        *\n    FROM\n        dev_thuxuan.data_quality.medication_medication_id\n    WHERE\n        bucket_name = 'valid'\n)\n, uniqueness_check as (\n        SELECT\n                field_value,\n                COUNT(*) AS duplicate_count\n        FROM\n                valid_conditions\n        GROUP BY\n                field_value\n        HAVING\n                COUNT(*) > 1\n)\n\n, random_sample AS (\n    SELECT\n        data_source,\n        source_date,\n        table_name,\n        drill_down_key,\n        drill_down_value,\n        field_name,\n        field_value,\n        bucket_name,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_thuxuan.data_quality.medication_medication_id\n    WHERE\n        bucket_name = 'valid'\n)\n\n, duplicates_summary AS (\n    SELECT\n        a.data_source,\n        a.source_date,\n        a.table_name,\n        a.drill_down_key,\n        a.drill_down_value,\n        a.field_name,\n        a.field_value,\n        a.bucket_name,\n        b.duplicate_count,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_thuxuan.data_quality.medication_medication_id a\n    JOIN\n        uniqueness_check b on a.field_value = b.field_value\n)\n\nSELECT\n    *\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM\n    duplicates_summary\nwhere row_number_value <= 5\n\nunion all\n\nSELECT\n    *,\n    0 as duplicate_count\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM\n    random_sample\nWHERE\n    row_number_value <= 5\n    and NOT EXISTS (SELECT 1 FROM duplicates_summary)", "relation_name": "dev_thuxuan.data_quality.primary_keys_medication_medication_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:13.556266Z", "completed_at": "2024-10-01T16:32:13.563816Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:13.564815Z", "completed_at": "2024-10-01T16:32:16.261663Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.8392810821533203, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f7c5-0001-987f0110bd0e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_facility_id", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'FACILITY_ID' AS field_name\n    , case when term.npi is not null then 'valid'\n          when m.facility_id is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    , case when m.facility_id is not null and term.npi is null\n          then 'Facility NPI does not join to Terminology provider table'\n          else null end as invalid_reason\n    , cast(facility_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m\nleft join dev_thuxuan.terminology.provider term on m.facility_id = term.npi", "relation_name": "dev_thuxuan.data_quality.encounter_facility_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:15.307859Z", "completed_at": "2024-10-01T16:32:15.315086Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:15.320617Z", "completed_at": "2024-10-01T16:32:16.800659Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.6508407592773438, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f912-0001-987f0111b50e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__practitioner_npi", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PRACTITIONER' AS table_name\n    , 'Practitioner ID' as drill_down_key\n    , coalesce(practitioner_id, 'NULL') AS drill_down_value\n    , 'NPI' as field_name\n    , case when term.npi is not null then 'valid'\n           when m.npi is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.npi is not null and term.npi is null\n           then 'NPI does not join to Terminology provider table'\n           else null end as invalid_reason\n    , cast(m.npi as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.practitioner m\nleft join dev_thuxuan.terminology.provider term on m.npi = term.npi", "relation_name": "dev_thuxuan.data_quality.practitioner_npi"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:14.110367Z", "completed_at": "2024-10-01T16:32:14.117308Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:14.118320Z", "completed_at": "2024-10-01T16:32:16.153317Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.9877333641052246, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f912-0001-987f0111b50a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_ordering_practitioner_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'ORDERING_PRACTITIONER_ID' as field_name\n    , case when term.npi is not null then 'valid'\n          when m.ordering_practitioner_id is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    , case when m.ordering_practitioner_id is not null and term.npi is null\n           then 'Ordering practitioner ID does not join to Terminology provider table'\n           else null end as invalid_reason\n    , cast(ordering_practitioner_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m\nleft join dev_thuxuan.terminology.provider term on m.ordering_practitioner_id = term.npi", "relation_name": "dev_thuxuan.data_quality.lab_result_ordering_practitioner_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:13.536738Z", "completed_at": "2024-10-01T16:32:13.542739Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:13.543738Z", "completed_at": "2024-10-01T16:32:17.142888Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.74041485786438, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f8ce-0001-987f0111d4da"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_attending_provider_id", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'ATTENDING_PROVIDER_ID' AS field_name\n    , case when term.npi is not null then 'valid'\n          when m.attending_provider_id is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    , case when m.attending_provider_id is not null and term.npi is null\n          then 'Attending provider ID does not join to Terminology provider table'\n          else null end as invalid_reason\n    , cast(attending_provider_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m\nleft join dev_thuxuan.terminology.provider term on m.attending_provider_id = term.npi", "relation_name": "dev_thuxuan.data_quality.encounter_attending_provider_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:15.302665Z", "completed_at": "2024-10-01T16:32:15.314077Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:15.315086Z", "completed_at": "2024-10-01T16:32:17.723374Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.6189348697662354, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f8ce-0001-987f0111d4de"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__location_npi", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'LOCATION' AS table_name\n    , 'Location ID' as drill_down_key\n    , coalesce(location_id, 'NULL') AS drill_down_value\n    , 'NPI' as field_name\n    , case when term.npi is not null then 'valid'\n          when m.npi is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    , case when m.npi is not null and term.npi is null\n          then 'NPI does not join to Terminology provider table'\n    else null end as invalid_reason\n    , cast(m.npi as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.location m\nleft join dev_thuxuan.terminology.provider term on m.npi = term.npi", "relation_name": "dev_thuxuan.data_quality.location_npi"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:16.399144Z", "completed_at": "2024-10-01T16:32:16.405916Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:16.405916Z", "completed_at": "2024-10-01T16:32:17.997082Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.7462348937988281, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e36"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__primary_keys_encounter_encounter_id", "compiled": true, "compiled_code": "\n\nWITH valid_conditions AS (\n    SELECT\n        *\n    FROM\n        dev_thuxuan.data_quality.encounter_encounter_id\n    WHERE\n        bucket_name = 'valid'\n)\n, uniqueness_check as (\n        SELECT\n                field_value,\n                COUNT(*) AS duplicate_count\n        FROM\n                valid_conditions\n        GROUP BY\n                field_value\n        HAVING\n                COUNT(*) > 1\n)\n\n, random_sample AS (\n    SELECT\n        data_source,\n        source_date,\n        table_name,\n        drill_down_key,\n        drill_down_value,\n        field_name,\n        field_value,\n        bucket_name,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_thuxuan.data_quality.encounter_encounter_id\n    WHERE\n        bucket_name = 'valid'\n\n)\n\n, duplicates_summary AS (\n    SELECT\n        a.data_source,\n        a.source_date,\n        a.table_name,\n        a.drill_down_key,\n        a.drill_down_value,\n        a.field_name,\n        a.field_value,\n        a.bucket_name,\n        b.duplicate_count,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_thuxuan.data_quality.encounter_encounter_id a\n    JOIN\n        uniqueness_check b on a.field_value = b.field_value\n)\n\nSELECT\n    *\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM\n    duplicates_summary\nwhere row_number_value <= 5\n\nunion all\n\nSELECT\n    *,\n    0 as duplicate_count\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM\n    random_sample\nWHERE\n    row_number_value <= 5\n    and NOT EXISTS (SELECT 1 FROM duplicates_summary)", "relation_name": "dev_thuxuan.data_quality.primary_keys_encounter_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:16.958401Z", "completed_at": "2024-10-01T16:32:16.965892Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:16.965892Z", "completed_at": "2024-10-01T16:32:18.498325Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.750471830368042, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f7c5-0001-987f0110bd12"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__primary_keys_location_location_id", "compiled": true, "compiled_code": "\n\nWITH valid_conditions AS (\n    SELECT\n        *\n    FROM\n        dev_thuxuan.data_quality.location_location_id\n    WHERE\n        bucket_name = 'valid'\n)\n, uniqueness_check as (\n        SELECT\n                field_value,\n                COUNT(*) AS duplicate_count\n        FROM\n                valid_conditions\n        GROUP BY\n                field_value\n        HAVING\n                COUNT(*) > 1\n)\n\n, random_sample AS (\n    SELECT\n        data_source,\n        source_date,\n        table_name,\n        drill_down_key,\n        drill_down_value,\n        field_name,\n        field_value,\n        bucket_name,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_thuxuan.data_quality.location_location_id\n    WHERE\n        bucket_name = 'valid'\n\n)\n\n, duplicates_summary AS (\n    SELECT\n        a.data_source,\n        a.source_date,\n        a.table_name,\n        a.drill_down_key,\n        a.drill_down_value,\n        a.field_name,\n        a.field_value,\n        a.bucket_name,\n        b.duplicate_count,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_thuxuan.data_quality.location_location_id a\n    JOIN\n        uniqueness_check b on a.field_value = b.field_value\n)\n\nSELECT\n    *\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM\n    duplicates_summary\nwhere row_number_value <= 5\n\nunion all\n\nSELECT\n    *,\n    0 as duplicate_count\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM\n    random_sample\nWHERE\n    row_number_value <= 5\n    and NOT EXISTS (SELECT 1 FROM duplicates_summary)", "relation_name": "dev_thuxuan.data_quality.primary_keys_location_location_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:17.103136Z", "completed_at": "2024-10-01T16:32:17.110173Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:17.110173Z", "completed_at": "2024-10-01T16:32:18.502418Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.6100506782531738, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f8ce-0001-987f0111d4e2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__primary_keys_condition_condition_id", "compiled": true, "compiled_code": "\n\nWITH valid_conditions AS (\n    SELECT\n        *\n    FROM\n        dev_thuxuan.data_quality.condition_condition_id\n    WHERE\n        bucket_name = 'valid'\n)\n, uniqueness_check as (\n        SELECT\n                field_value,\n                COUNT(*) AS duplicate_count\n        FROM\n                valid_conditions\n        GROUP BY\n                field_value\n        HAVING\n                COUNT(*) > 1\n)\n\n, random_sample AS (\n    SELECT\n        data_source,\n        source_date,\n        table_name,\n        drill_down_key,\n        drill_down_value,\n        field_name,\n        field_value,\n        bucket_name,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_thuxuan.data_quality.condition_condition_id\n    WHERE\n        bucket_name = 'valid'\n\n)\n\n, duplicates_summary AS (\n    SELECT\n        a.data_source,\n        a.source_date,\n        a.table_name,\n        a.drill_down_key,\n        a.drill_down_value,\n        a.field_name,\n        a.field_value,\n        a.bucket_name,\n        b.duplicate_count,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_thuxuan.data_quality.condition_condition_id a\n    inner JOIN\n        uniqueness_check b on a.field_value = b.field_value\n)\n\nSELECT\n    *\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM\n    duplicates_summary\nwhere row_number_value <= 5\n\nunion all\n\nSELECT\n    *,\n    0 as duplicate_count\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM\n    random_sample\nWHERE\n    row_number_value <= 5\n    and NOT EXISTS (SELECT 1 FROM duplicates_summary)", "relation_name": "dev_thuxuan.data_quality.primary_keys_condition_condition_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:17.282661Z", "completed_at": "2024-10-01T16:32:17.290734Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:17.291662Z", "completed_at": "2024-10-01T16:32:18.583533Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.4326891899108887, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f913-0001-987f0111a4c6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__lab_result", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n      labs.lab_result_id\n    , labs.patient_id\n    , labs.encounter_id\n    , labs.accession_number\n    , labs.source_code_type\n    , labs.source_code\n    , labs.source_description\n    , labs.source_component\n    , case\n        when labs.normalized_code_type is not null then labs.normalized_code_type\n        when loinc.loinc is not null then 'loinc'\n        when snomed_ct.snomed_ct is not null then 'snomed-ct'\n        else null end as normalized_code_type\n    , coalesce(\n        labs.normalized_code\n        , loinc.loinc\n        , snomed_ct.snomed_ct\n        ) as normalized_code\n    , coalesce(\n        labs.normalized_description\n        , loinc.long_common_name\n        , snomed_ct.description\n        ) normalized_description\n    , case when coalesce(labs.normalized_code, labs.normalized_description) is not null then 'manual'\n         when coalesce(loinc.loinc,snomed_ct.snomed_ct) is not null then 'automatic'\n         end as mapping_method\n    , labs.normalized_component\n    , labs.status\n    , labs.result\n    , labs.result_date\n    , labs.collection_date\n    , labs.source_units\n    , labs.normalized_units\n    , labs.source_reference_range_low\n    , labs.source_reference_range_high\n    , labs.normalized_reference_range_low\n    , labs.normalized_reference_range_high\n    , labs.source_abnormal_flag\n    , labs.normalized_abnormal_flag\n    , labs.specimen\n    , labs.ordering_practitioner_id\n    , labs.data_source\n    , labs.tuva_last_run\nFrom dev_thuxuan.core._stg_clinical_lab_result as labs\nleft join dev_thuxuan.terminology.loinc loinc\n    on labs.source_code_type = 'loinc'\n        and labs.source_code = loinc.loinc\nleft join dev_thuxuan.terminology.snomed_ct snomed_ct\n    on labs.source_code_type = 'snomed-ct'\n        and labs.source_code = snomed_ct.snomed_ct\n\n ", "relation_name": "dev_thuxuan.core.lab_result"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:17.926467Z", "completed_at": "2024-10-01T16:32:17.934987Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:17.934987Z", "completed_at": "2024-10-01T16:32:19.341815Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.5402920246124268, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e3a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__primary_keys_lab_result_lab_result_id", "compiled": true, "compiled_code": "\n\nWITH valid_conditions AS (\n    SELECT\n        *\n    FROM\n        dev_thuxuan.data_quality.lab_result_lab_result_id\n    WHERE\n        bucket_name = 'valid'\n)\n, uniqueness_check as (\n        SELECT\n                field_value,\n                COUNT(*) AS duplicate_count\n        FROM\n                valid_conditions\n        GROUP BY\n                field_value\n        HAVING\n                COUNT(*) > 1\n)\n\n, random_sample AS (\n    SELECT\n        data_source,\n        source_date,\n        table_name,\n        drill_down_key,\n        drill_down_value,\n        field_name,\n        field_value,\n        bucket_name,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_thuxuan.data_quality.lab_result_lab_result_id\n    WHERE\n        bucket_name = 'valid'\n)\n\n, duplicates_summary AS (\n    SELECT\n        a.data_source,\n        a.source_date,\n        a.table_name,\n        a.drill_down_key,\n        a.drill_down_value,\n        a.field_name,\n        a.field_value,\n        a.bucket_name,\n        b.duplicate_count,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_thuxuan.data_quality.lab_result_lab_result_id a\n    JOIN\n        uniqueness_check b on a.field_value = b.field_value\n)\n\nSELECT\n    *\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM\n    duplicates_summary\nwhere row_number_value <= 5\n\nunion all\n\nSELECT\n    *,\n    0 as duplicate_count\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM\n    random_sample\nWHERE\n    row_number_value <= 5\n    and NOT EXISTS (SELECT 1 FROM duplicates_summary)", "relation_name": "dev_thuxuan.data_quality.primary_keys_lab_result_lab_result_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:18.151476Z", "completed_at": "2024-10-01T16:32:18.161972Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:18.162984Z", "completed_at": "2024-10-01T16:32:19.918604Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.8823249340057373, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f8ce-0001-987f0111d4e6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__observation", "compiled": true, "compiled_code": "\n\n\nselect\n      obs.observation_id\n    , obs.patient_id\n    , obs.encounter_id\n    , obs.panel_id\n    , obs.observation_date\n    , obs.observation_type\n    , obs.source_code_type\n    , obs.source_code\n    , obs.source_description\n    , case\n        when obs.normalized_code_type is not null then obs.normalized_code_type\n        when icd10cm.icd_10_cm is not null then 'icd-10-cm'\n        when icd9cm.icd_9_cm is not null then 'icd-9-cm'\n        when icd10pcs.icd_10_pcs is not null then 'icd-10-pcs'\n        when icd9pcs.icd_9_pcs is not null then 'icd-10-pcs'\n        when hcpcs.hcpcs is not null then 'hcpcs'\n        when snomed_ct.snomed_ct is not null then 'snomed-ct'\n        when loinc.loinc is not null then 'loinc'\n        end as normalized_code_type\n  , coalesce(\n        obs.normalized_code\n      , icd10cm.icd_10_cm\n      , icd9cm.icd_9_cm\n      , icd10pcs.icd_10_pcs\n      , icd9pcs.icd_9_pcs\n      , hcpcs.hcpcs\n      , snomed_ct.snomed_ct\n      , loinc.loinc\n      ) as normalized_code\n      , coalesce(\n        obs.normalized_description\n      , icd10cm.short_description\n      , icd9cm.short_description\n      , icd10pcs.description\n      , icd9pcs.short_description\n      , hcpcs.short_description\n      , snomed_ct.description\n      , loinc.long_common_name\n      ) as normalized_description\n     , case\n         when coalesce(obs.normalized_code, obs.normalized_description) is not null then 'manual'\n         when coalesce(\n            icd10cm.icd_10_cm\n          , icd9cm.icd_9_cm\n          , icd10pcs.icd_10_pcs\n          , icd9pcs.icd_9_pcs\n          , hcpcs.hcpcs\n          , snomed_ct.snomed_ct\n          , loinc.loinc) is not null then 'automatic'\n         end as mapping_method\n    , obs.result\n    , obs.source_units\n    , obs.normalized_units\n    , obs.source_reference_range_low\n    , obs.source_reference_range_high\n    , obs.normalized_reference_range_low\n    , obs.normalized_reference_range_high\n    , obs.data_source\n    , obs.tuva_last_run\nfrom dev_thuxuan.core._stg_clinical_observation obs\nleft join dev_thuxuan.terminology.icd_10_cm icd10cm\n    on obs.source_code_type = 'icd-10-cm'\n        and replace(obs.source_code,'.','') = icd10cm.icd_10_cm\nleft join dev_thuxuan.terminology.icd_9_cm icd9cm\n    on obs.source_code_type = 'icd-9-cm'\n        and replace(obs.source_code,'.','') = icd9cm.icd_9_cm\nleft join dev_thuxuan.terminology.icd_10_pcs icd10pcs\n    on obs.source_code_type = 'icd-10-pcs'\n        and obs.source_code = icd10pcs.icd_10_pcs\nleft join dev_thuxuan.terminology.icd_9_pcs icd9pcs\n    on obs.source_code_type = 'icd-9-pcs'\n        and replace(obs.source_code,'.','') = icd9pcs.icd_9_pcs\nleft join dev_thuxuan.terminology.hcpcs_level_2 hcpcs\n    on obs.source_code_type = 'hcpcs'\n        and obs.source_code = hcpcs.hcpcs\nleft join dev_thuxuan.terminology.snomed_ct snomed_ct\n    on obs.source_code_type = 'snomed-ct'\n        and obs.source_code = snomed_ct.snomed_ct\nleft join dev_thuxuan.terminology.loinc loinc\n    on obs.source_code_type = 'loinc'\n        and obs.source_code = loinc.loinc\n\n", "relation_name": "dev_thuxuan.core.observation"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:18.730457Z", "completed_at": "2024-10-01T16:32:18.748641Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:18.749641Z", "completed_at": "2024-10-01T16:32:20.563644Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.961458683013916, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f913-0001-987f0111a4ca"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__primary_keys_patient_patient_id", "compiled": true, "compiled_code": "\n\nWITH valid_conditions AS (\n    SELECT\n        *\n    FROM\n        dev_thuxuan.data_quality.patient_patient_id\n    WHERE\n        bucket_name = 'valid'\n)\n, uniqueness_check as (\n        SELECT\n                field_value,\n                COUNT(*) AS duplicate_count\n        FROM\n                valid_conditions\n        GROUP BY\n                field_value\n        HAVING\n                COUNT(*) > 1\n)\n\n, random_sample AS (\n    SELECT\n        data_source,\n        source_date,\n        table_name,\n        drill_down_key,\n        drill_down_value,\n        field_name,\n        field_value,\n        bucket_name,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_thuxuan.data_quality.patient_patient_id\n    WHERE\n        bucket_name = 'valid'\n\n)\n\n, duplicates_summary AS (\n    SELECT\n        a.data_source,\n        a.source_date,\n        a.table_name,\n        a.drill_down_key,\n        a.drill_down_value,\n        a.field_name,\n        a.field_value,\n        a.bucket_name,\n        b.duplicate_count,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_thuxuan.data_quality.patient_patient_id a\n    JOIN\n        uniqueness_check b on a.field_value = b.field_value\n)\n\nSELECT\n    *\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM\n    duplicates_summary\nwhere row_number_value <= 5\n\nunion all\n\nSELECT\n    *,\n    0 as duplicate_count\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM\n    random_sample\nWHERE\n    row_number_value <= 5\n    and NOT EXISTS (SELECT 1 FROM duplicates_summary)", "relation_name": "dev_thuxuan.data_quality.primary_keys_patient_patient_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:18.743115Z", "completed_at": "2024-10-01T16:32:18.757356Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:18.760412Z", "completed_at": "2024-10-01T16:32:20.555115Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.9557263851165771, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f912-0001-987f0111b512"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__primary_keys_practitioner_practitioner_id", "compiled": true, "compiled_code": "\n\nWITH valid_conditions AS (\n    SELECT\n        *\n    FROM\n        dev_thuxuan.data_quality.practitioner_practitioner_id\n    WHERE\n        bucket_name = 'valid'\n)\n, uniqueness_check as (\n        SELECT\n                field_value,\n                COUNT(*) AS duplicate_count\n        FROM\n                valid_conditions\n        GROUP BY\n                field_value\n        HAVING\n                COUNT(*) > 1\n)\n\n, random_sample AS (\n    SELECT\n        data_source,\n        source_date,\n        table_name,\n        drill_down_key,\n        drill_down_value,\n        field_name,\n        field_value,\n        bucket_name,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_thuxuan.data_quality.practitioner_practitioner_id\n    WHERE\n        bucket_name = 'valid'\n)\n\n, duplicates_summary AS (\n    SELECT\n        a.data_source,\n        a.source_date,\n        a.table_name,\n        a.drill_down_key,\n        a.drill_down_value,\n        a.field_name,\n        a.field_value,\n        a.bucket_name,\n        b.duplicate_count,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_thuxuan.data_quality.practitioner_practitioner_id a\n    JOIN\n        uniqueness_check b on a.field_value = b.field_value\n)\n\nSELECT\n    *\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM\n    duplicates_summary\nwhere row_number_value <= 5\n\nunion all\n\nSELECT\n    *,\n    0 as duplicate_count\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM\n    random_sample\nWHERE\n    row_number_value <= 5\n    and NOT EXISTS (SELECT 1 FROM duplicates_summary)", "relation_name": "dev_thuxuan.data_quality.primary_keys_practitioner_practitioner_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:18.723245Z", "completed_at": "2024-10-01T16:32:18.735472Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:18.736496Z", "completed_at": "2024-10-01T16:32:20.600741Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.017624616622925, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f912-0001-987f0111b516"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__primary_keys_observation_observation_id", "compiled": true, "compiled_code": "\n\nWITH valid_conditions AS (\n    SELECT\n        *\n    FROM\n        dev_thuxuan.data_quality.observation_observation_id\n    WHERE\n        bucket_name = 'valid'\n)\n, uniqueness_check as (\n        SELECT\n                field_value,\n                COUNT(*) AS duplicate_count\n        FROM\n                valid_conditions\n        GROUP BY\n                field_value\n        HAVING\n                COUNT(*) > 1\n)\n\n, random_sample AS (\n    SELECT\n        data_source,\n        source_date,\n        table_name,\n        drill_down_key,\n        drill_down_value,\n        field_name,\n        field_value,\n        bucket_name,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_thuxuan.data_quality.observation_observation_id\n    WHERE\n        bucket_name = 'valid'\n)\n\n, duplicates_summary AS (\n    SELECT\n        a.data_source,\n        a.source_date,\n        a.table_name,\n        a.drill_down_key,\n        a.drill_down_value,\n        a.field_name,\n        a.field_value,\n        a.bucket_name,\n        b.duplicate_count,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_thuxuan.data_quality.observation_observation_id a\n    JOIN\n        uniqueness_check b on a.field_value = b.field_value\n)\n\nSELECT\n    *\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM\n    duplicates_summary\nwhere row_number_value <= 5\n\nunion all\n\nSELECT\n    *,\n    0 as duplicate_count\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM\n    random_sample\nWHERE\n    row_number_value <= 5\n    and NOT EXISTS (SELECT 1 FROM duplicates_summary)", "relation_name": "dev_thuxuan.data_quality.primary_keys_observation_observation_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:19.474813Z", "completed_at": "2024-10-01T16:32:19.481677Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:19.482701Z", "completed_at": "2024-10-01T16:32:21.031418Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.7318973541259766, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f912-0001-987f0111b51a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__primary_keys_procedure_procedure_id", "compiled": true, "compiled_code": "\n\nWITH valid_conditions AS (\n    SELECT\n        *\n    FROM\n        dev_thuxuan.data_quality.procedure_procedure_id\n    WHERE\n        bucket_name = 'valid'\n)\n, uniqueness_check as (\n        SELECT\n                field_value,\n                COUNT(*) AS duplicate_count\n        FROM\n                valid_conditions\n        GROUP BY\n                field_value\n        HAVING\n                COUNT(*) > 1\n)\n\n, random_sample AS (\n    SELECT\n        data_source,\n        source_date,\n        table_name,\n        drill_down_key,\n        drill_down_value,\n        field_name,\n        field_value,\n        bucket_name,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_thuxuan.data_quality.procedure_procedure_id\n    WHERE\n        bucket_name = 'valid'\n)\n\n, duplicates_summary AS (\n    SELECT\n        a.data_source,\n        a.source_date,\n        a.table_name,\n        a.drill_down_key,\n        a.drill_down_value,\n        a.field_name,\n        a.field_value,\n        a.bucket_name,\n        b.duplicate_count,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_thuxuan.data_quality.procedure_procedure_id a\n    JOIN\n        uniqueness_check b on a.field_value = b.field_value\n)\n\nSELECT\n    *\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM\n    duplicates_summary\nwhere row_number_value <= 5\n\nunion all\n\nSELECT\n    *,\n    0 as duplicate_count\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM\n    random_sample\nWHERE\n    row_number_value <= 5\n    and NOT EXISTS (SELECT 1 FROM duplicates_summary)", "relation_name": "dev_thuxuan.data_quality.primary_keys_procedure_procedure_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:20.041347Z", "completed_at": "2024-10-01T16:32:20.048018Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:20.048018Z", "completed_at": "2024-10-01T16:32:21.577249Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.6621475219726562, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f912-0001-987f0111b51e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_address", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT \n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'eligibility' as table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'ADDRESS' AS field_name\n    ,case when m.address is  null then 'null'\n                             else 'valid' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,CAST(address as TEXT) AS field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM tuva.input_layer.eligibility m", "relation_name": "dev_thuxuan.data_quality.eligibility_address"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:20.716899Z", "completed_at": "2024-10-01T16:32:20.738462Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:20.740459Z", "completed_at": "2024-10-01T16:32:22.594735Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.100159168243408, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e3e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_city", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT \n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n        ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'CITY' AS field_name\n    ,case when m.race is  null then 'null'\n                             else 'valid' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,CAST(city as TEXT) AS field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM tuva.input_layer.eligibility m", "relation_name": "dev_thuxuan.data_quality.eligibility_city"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:20.701361Z", "completed_at": "2024-10-01T16:32:20.725899Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:20.726920Z", "completed_at": "2024-10-01T16:32:22.817482Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.2535886764526367, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f912-0001-987f0111b522"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_birth_date", "compiled": true, "compiled_code": "\n\nWITH base as (\n    SELECT * \n    FROM tuva.input_layer.eligibility\n\n),\nunique_field as (\n    SELECT DISTINCT member_id\n        ,cast(birth_date as TEXT) as field\n        ,data_source\n    FROM base\n),\nclaim_grain as (\n    SELECT member_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    GROUP BY member_id\n        ,data_source\n),\nclaim_agg as (\nSELECT\n    member_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) AS field_aggregated\nFROM\n    unique_field\nGROUP BY\n    data_source,\n    member_id\n)\nSELECT DISTINCT\n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'BIRTH_DATE' AS field_name\n    ,CASE \n        WHEN cg.frequency > 1 THEN 'multiple'\n        WHEN m.birth_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) THEN 'invalid'\n        WHEN m.birth_date <= cast('1901-01-01' as date) THEN 'invalid'\n        WHEN m.birth_date IS NULL THEN 'null'\n        ELSE 'valid' \n    END AS bucket_name\n    ,CASE \n        WHEN cg.frequency > 1 THEN 'multiple'\n        WHEN m.birth_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) THEN 'future'\n        WHEN m.birth_date <= cast('1901-01-01' as date) THEN 'too old'\n        else null\n    END AS invalid_reason\n,CAST(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) AS field_value\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM base m\nleft join claim_grain cg on m.member_id = cg.member_id and m.data_source = cg.data_source\nleft join claim_agg agg on m.member_id = agg.member_id and m.data_source = agg.data_source", "relation_name": "dev_thuxuan.data_quality.eligibility_birth_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:20.772004Z", "completed_at": "2024-10-01T16:32:20.784539Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:20.785543Z", "completed_at": "2024-10-01T16:32:22.841961Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.183541774749756, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f912-0001-987f0111b526"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_data_source", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain \n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n        ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'DATA_SOURCE' AS field_name\n    ,case when m.data_source is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(data_source as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM tuva.input_layer.eligibility m", "relation_name": "dev_thuxuan.data_quality.eligibility_data_source"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:21.216225Z", "completed_at": "2024-10-01T16:32:21.234752Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:21.235752Z", "completed_at": "2024-10-01T16:32:22.927556Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.8644075393676758, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f913-0001-987f0111a4ce"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_death_date", "compiled": true, "compiled_code": "\n\nWITH base as (\n    SELECT * \n    FROM tuva.input_layer.eligibility\n\n),\nunique_field as (\n    select distinct member_id\n        ,cast(death_date as TEXT) as field\n        ,data_source\n    from base\n),\nclaim_grain as (\n    select member_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by member_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    member_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    data_source,\n    member_id\n)\nselect distinct\n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'DEATH_DATE' AS field_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.death_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'invalid'\n        when m.death_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.death_date <= m.birth_date then 'invalid'\n        when m.death_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.death_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'future'\n        when m.death_date <= cast('1901-01-01' as date) then 'too old'\n        when m.death_date <= m.birth_date then 'death date before birth date'\n        else null\n    end as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.member_id = cg.member_id and m.data_source = cg.data_source\nleft join claim_agg agg on m.member_id = agg.member_id and m.data_source = agg.data_source", "relation_name": "dev_thuxuan.data_quality.eligibility_death_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:21.710574Z", "completed_at": "2024-10-01T16:32:21.720269Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:21.721269Z", "completed_at": "2024-10-01T16:32:23.332340Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.7521812915802002, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f912-0001-987f0111b52a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_death_flag", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT\n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'DEATH_FLAG' AS field_name\n    ,case\n        when m.death_flag in (1,0) then 'valid'\n        when m.death_flag is null then 'null'\n        else 'invalid'\n        end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(death_flag as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m", "relation_name": "dev_thuxuan.data_quality.eligibility_death_flag"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:22.805719Z", "completed_at": "2024-10-01T16:32:22.819481Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:22.819481Z", "completed_at": "2024-10-01T16:32:24.509712Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.8250508308410645, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f912-0001-987f0111b52e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_dual_status_code", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT\n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n        ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'DUAL_STATUS_CODE' AS field_name\n    ,case when m.dual_status_code is null then 'null'\n          when term.dual_status_code is null then 'invalid'\n                             else 'valid' end as bucket_name\n    ,case\n        when m.dual_status_code is not null and term.dual_status_code is null then 'Dual Status Code does not join to Terminology Medicare Dual Eligibility table'\n        else null\n    end as invalid_reason\n    , m.dual_status_code || '|' || coalesce(term.dual_status_description,'') as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m\nleft join dev_thuxuan.terminology.medicare_dual_eligibility term on m.dual_status_code = term.dual_status_code", "relation_name": "dev_thuxuan.data_quality.eligibility_dual_status_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:22.967479Z", "completed_at": "2024-10-01T16:32:22.979732Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:22.980740Z", "completed_at": "2024-10-01T16:32:24.508633Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.6643123626708984, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f8ce-0001-987f0111d4ea"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_first_name", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT \n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'FIRST_NAME' AS field_name\n    ,case when m.first_name is null then 'null'\n                             else 'valid' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(first_name as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m", "relation_name": "dev_thuxuan.data_quality.eligibility_first_name"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:22.959927Z", "completed_at": "2024-10-01T16:32:22.973998Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:22.974999Z", "completed_at": "2024-10-01T16:32:24.507146Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.6815969944000244, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e42"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_end_date", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT\n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID' AS drill_down_key\n    ,coalesce(m.member_id,'NULL') AS drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'ENROLLMENT_END_DATE' AS field_name\n    ,case\n        when m.enrollment_end_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.enrollment_end_date < m.enrollment_start_date then 'invalid'\n        when m.enrollment_end_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    ,case\n\n        when m.enrollment_end_date <= cast('1901-01-01' as date) then 'too old'\n        when m.enrollment_end_date < m.enrollment_start_date then 'end date before start date'\n        else null\n    end as invalid_reason\n    ,cast(enrollment_end_date as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m", "relation_name": "dev_thuxuan.data_quality.eligibility_end_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:23.085157Z", "completed_at": "2024-10-01T16:32:23.093156Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:23.093156Z", "completed_at": "2024-10-01T16:32:24.651047Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.7229270935058594, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f8ce-0001-987f0111d4ee"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_gender", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT \n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'GENDER' AS field_name\n    ,case when m.gender is  null then 'null'\n          when term.gender is null then 'invalid'\n                             else 'valid' end as bucket_name\n    ,case\n        when m.gender is not null and term.gender is null then 'Gender does not join to Terminology Gender table'\n        else null\n    end as invalid_reason\n    ,cast(m.gender as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m\nleft join dev_thuxuan.terminology.gender term on m.gender = term.gender", "relation_name": "dev_thuxuan.data_quality.eligibility_gender"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:23.467757Z", "completed_at": "2024-10-01T16:32:23.476312Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:23.477316Z", "completed_at": "2024-10-01T16:32:24.963401Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.679837703704834, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f7c5-0001-987f0110bd16"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_last_name", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT \n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'LAST_NAME' AS field_name\n    ,case when m.last_name is null then 'null'\n                             else 'valid' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(last_name as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m", "relation_name": "dev_thuxuan.data_quality.eligibility_last_name"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:24.643522Z", "completed_at": "2024-10-01T16:32:24.658043Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:24.659043Z", "completed_at": "2024-10-01T16:32:26.349164Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.9659109115600586, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e4a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_medicare_status_code", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT \n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'MEDICARE_STATUS_CODE' AS field_name\n    ,case when m.medicare_status_code is null then 'null'\n          when term.medicare_status_code is null then 'invalid'\n                             else 'valid' end as bucket_name\n    ,case\n        when m.medicare_status_code is not null and term.medicare_status_code is null then 'Medicare Status Code does not join to Terminology Medicare Status table'\n        else null\n    end as invalid_reason\n    , m.medicare_status_code || '|' || coalesce(term.medicare_status_description,'') as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m\nleft join dev_thuxuan.terminology.medicare_status term on m.medicare_status_code = term.medicare_status_code", "relation_name": "dev_thuxuan.data_quality.eligibility_medicare_status_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:24.651047Z", "completed_at": "2024-10-01T16:32:24.664163Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:24.665230Z", "completed_at": "2024-10-01T16:32:26.351163Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.9668262004852295, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e46"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_member_id", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain \n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'MEMBER_ID' AS field_name\n    ,case when m.member_id is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(member_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m", "relation_name": "dev_thuxuan.data_quality.eligibility_member_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:24.671088Z", "completed_at": "2024-10-01T16:32:24.677200Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:24.679710Z", "completed_at": "2024-10-01T16:32:26.352183Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.9439740180969238, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f8ce-0001-987f0111d4f2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_original_reason_entitlement_code", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT \n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'ORIGINAL_REASON_ENTITLEMENT_CODE' AS field_name\n    ,case when m.original_reason_entitlement_code is null then 'null'\n          when term.original_reason_entitlement_code is null then 'invalid'\n                             else 'valid' end as bucket_name\n    ,case\n        when m.original_reason_entitlement_code is not null and term.original_reason_entitlement_code is null then 'Original Reason Entitlement Code does not join to Terminology Original Reason Entitlement Code table'\n        else null\n    end as invalid_reason\n    , m.original_reason_entitlement_code || '|' || coalesce(term.original_reason_entitlement_description,'') as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m\nleft join dev_thuxuan.terminology.medicare_orec term on m.original_reason_entitlement_code = term.original_reason_entitlement_code", "relation_name": "dev_thuxuan.data_quality.eligibility_original_reason_entitlement_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:26.616545Z", "completed_at": "2024-10-01T16:32:26.621594Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:26.622542Z", "completed_at": "2024-10-01T16:32:27.826080Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.1897945404052734, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f8ce-0001-987f0111d4f6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_payer_type", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT \n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'PAYER_TYPE' AS field_name\n    ,case when m.payer_type is  null then 'null'\n          when term.payer_type is null then 'invalid'\n                             else 'valid' end as bucket_name\n    ,case\n        when m.payer_type is not null and term.payer_type is null then 'Payer Type does not join to Terminology Payer Type table'\n        else null\n    end as invalid_reason\n    ,cast(m.payer_type as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m\nleft join dev_thuxuan.terminology.payer_type term on m.payer_type = term.payer_type", "relation_name": "dev_thuxuan.data_quality.eligibility_payer_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:25.154651Z", "completed_at": "2024-10-01T16:32:25.164676Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:25.164676Z", "completed_at": "2024-10-01T16:32:26.630584Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.653700113296509, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f912-0001-987f0111b532"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_payer", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT\n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'PAYER' AS field_name\n    ,case when m.payer is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(payer as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m", "relation_name": "dev_thuxuan.data_quality.eligibility_payer"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:26.847254Z", "completed_at": "2024-10-01T16:32:26.860261Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:26.861769Z", "completed_at": "2024-10-01T16:32:29.750992Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 3.054199457168579, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f7c5-0001-987f0110bd1a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_phone", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT \n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'PHONE' AS field_name\n    ,case when m.phone is null then 'null'\n                             else 'valid' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(phone as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m", "relation_name": "dev_thuxuan.data_quality.eligibility_phone"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:24.812713Z", "completed_at": "2024-10-01T16:32:24.819720Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:24.819720Z", "completed_at": "2024-10-01T16:32:30.149208Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 5.4627110958099365, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e52"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_patient_id", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT\n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'PATIENT_ID' AS field_name\n    ,case when m.patient_id is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(patient_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m", "relation_name": "dev_thuxuan.data_quality.eligibility_patient_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:26.856260Z", "completed_at": "2024-10-01T16:32:26.868793Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:26.869784Z", "completed_at": "2024-10-01T16:32:30.145200Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 3.435335397720337, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e4e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_plan", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT\n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'PLAN' AS field_name\n    ,case when m.plan is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(m.plan as TEXT) as field_value\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m", "relation_name": "dev_thuxuan.data_quality.eligibility_plan"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:28.815729Z", "completed_at": "2024-10-01T16:32:28.827727Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:28.827727Z", "completed_at": "2024-10-01T16:32:30.656313Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.9817662239074707, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e56"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_race", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain \n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'RACE' AS field_name\n    ,case when m.race is  null then 'null'\n          when r.description is  null then 'invalid'\n                             else 'valid' end as bucket_name\n    ,case\n        when m.race is not null and r.description is null then 'Race does not join to terminology race table'\n        else null\n    end as invalid_reason\n    ,cast(race as TEXT) as field_value\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m\nleft join dev_thuxuan.terminology.race r on m.race=r.description", "relation_name": "dev_thuxuan.data_quality.eligibility_race"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:28.821727Z", "completed_at": "2024-10-01T16:32:28.832415Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:28.832415Z", "completed_at": "2024-10-01T16:32:30.704080Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.0820107460021973, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f912-0001-987f0111b536"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_start_date", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT\n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'ENROLLMENT_START_DATE' AS field_name\n    ,case\n        when m.enrollment_start_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'invalid'\n        when m.enrollment_start_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.enrollment_start_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    ,case\n        when m.enrollment_start_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'future'\n        when m.enrollment_start_date <= cast('1901-01-01' as date) then 'too old'\n    else null\n    end as invalid_reason\n    ,cast(enrollment_start_date as TEXT) as field_value\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m", "relation_name": "dev_thuxuan.data_quality.eligibility_start_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:29.906449Z", "completed_at": "2024-10-01T16:32:29.910450Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:29.912070Z", "completed_at": "2024-10-01T16:32:31.559116Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.8743748664855957, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e5a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_state", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT \n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'STATE' AS field_name\n    ,case when m.state is  null then 'null'\n          when term.ssa_fips_state_name is null then 'invalid'\n                             else 'valid' end as bucket_name\n    ,case\n        when m.state is not null and term.ssa_fips_state_name is null then 'State does not join to Terminology SSA_FIPS_STATE table'\n        else null\n    end as invalid_reason\n    ,cast(state as TEXT) as field_value\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m\nleft join dev_thuxuan.reference_data.ssa_fips_state as term on m.state = term.ssa_fips_state_name", "relation_name": "dev_thuxuan.data_quality.eligibility_state"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:30.281363Z", "completed_at": "2024-10-01T16:32:30.288584Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:30.290194Z", "completed_at": "2024-10-01T16:32:31.665755Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.5045208930969238, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f7c5-0001-987f0110bd1e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_zip_code", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain\n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'ZIP_CODE' AS field_name\n    \n    ,case when m.zip_code is  null then 'null'\n          when length(m.zip_code) in  (5,9,10) then 'valid'\n                             else 'invalid' end as bucket_name\n    ,case\n        when m.zip_code is not null and length(m.zip_code) NOT IN (5,9,10) then 'Invalid Zip Code Length'\n        else null\n     end as invalid_reason\n    \n    ,cast(zip_code as TEXT) as field_value\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m", "relation_name": "dev_thuxuan.data_quality.eligibility_zip_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:30.304963Z", "completed_at": "2024-10-01T16:32:30.308984Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:30.308984Z", "completed_at": "2024-10-01T16:32:32.179345Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.9923665523529053, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f8ce-0001-987f0111d4fa"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__stg_eligibility", "compiled": true, "compiled_code": "\n\nselect * from tuva.input_layer.eligibility", "relation_name": "dev_thuxuan.test.data_quality__stg_eligibility"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:30.907736Z", "completed_at": "2024-10-01T16:32:30.915955Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:30.915955Z", "completed_at": "2024-10-01T16:32:32.304341Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.53641676902771, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e5e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_allowed_amount", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'ALLOWED_AMOUNT' AS field_name\n    , case when m.allowed_amount is null          then        'null'\n                                              else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(allowed_amount as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_thuxuan.data_quality.pharmacy_allowed_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:30.805392Z", "completed_at": "2024-10-01T16:32:30.812060Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:30.813151Z", "completed_at": "2024-10-01T16:32:32.441184Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.8284060955047607, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f8ce-0001-987f0111d4fe"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__stg_eligibility", "compiled": true, "compiled_code": "\n\n\nselect\n      patient_id\n    , patient_id || coalesce(data_source,'') || coalesce(payer,'') || coalesce(plan,'') || coalesce(cast(enrollment_start_date as TEXT),'') || coalesce(cast(enrollment_end_date as TEXT),'') as patient_id_key\n    , member_id\n    , subscriber_id\n    , gender\n    , race\n    , birth_date\n    , death_date\n    , death_flag\n    , enrollment_start_date\n    , enrollment_end_date\n    , payer\n    , payer_type\n    , plan\n    , subscriber_relation\n    , original_reason_entitlement_code\n    , dual_status_code\n    , medicare_status_code\n    , first_name\n    , last_name\n    , social_security_number\n    , address\n    , city\n    , state\n    , zip_code\n    , phone\n    , data_source\n    , file_name\n    , ingest_datetime\nfrom tuva.input_layer.eligibility", "relation_name": "dev_thuxuan.test.normalized_input__stg_eligibility"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:31.792635Z", "completed_at": "2024-10-01T16:32:31.805174Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:31.805174Z", "completed_at": "2024-10-01T16:32:32.998467Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.3661143779754639, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f8ce-0001-987f0111d502"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_claim_id", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'CLAIM_ID' AS field_name\n    , case\n        when m.claim_id is null then 'null' else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(member_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_thuxuan.data_quality.pharmacy_claim_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:32.307341Z", "completed_at": "2024-10-01T16:32:32.312431Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:32.313340Z", "completed_at": "2024-10-01T16:32:33.526469Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.3637301921844482, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e62"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_coinsurance_amount", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'COINSURANCE_AMOUNT' AS field_name\n    , case when m.coinsurance_amount is null          then        'null'\n                                              else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(coinsurance_amount as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_thuxuan.data_quality.pharmacy_coinsurance_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:31.799157Z", "completed_at": "2024-10-01T16:32:31.810155Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:31.812425Z", "completed_at": "2024-10-01T16:32:33.747638Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.093552350997925, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f912-0001-987f0111b53a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_claim_line_number", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'CLAIM_LINE_NUMBER' AS field_name\n    , case\n        when m.claim_line_number is null then 'null' else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(member_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_thuxuan.data_quality.pharmacy_claim_line_number"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:32.448585Z", "completed_at": "2024-10-01T16:32:32.455590Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:32.456588Z", "completed_at": "2024-10-01T16:32:33.840865Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.5372602939605713, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f8ce-0001-987f0111d506"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_copayment_amount", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'COPAYMENT_AMOUNT' AS field_name\n    , case when m.copayment_amount is null then 'null'\n                                           else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(copayment_amount as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_thuxuan.data_quality.pharmacy_copayment_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:32.640776Z", "completed_at": "2024-10-01T16:32:32.654299Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:32.654299Z", "completed_at": "2024-10-01T16:32:33.964136Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.5579452514648438, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f913-0001-987f0111a4d2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_data_source", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'DATA_SOURCE' AS field_name\n    , case\n        when m.data_source is null then 'null' else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(data_source as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_thuxuan.data_quality.pharmacy_data_source"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:33.675071Z", "completed_at": "2024-10-01T16:32:33.683601Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:33.684602Z", "completed_at": "2024-10-01T16:32:34.972375Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.4303417205810547, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f8ce-0001-987f0111d50a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_deductible_amount", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'DEDUCTIBLE_AMOUNT' AS field_name\n    , case when m.deductible_amount is null then 'null'\n                                            else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(deductible_amount as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_thuxuan.data_quality.pharmacy_deductible_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:33.898191Z", "completed_at": "2024-10-01T16:32:33.907299Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:33.907299Z", "completed_at": "2024-10-01T16:32:35.355246Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.7698721885681152, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f8ce-0001-987f0111d50e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_dispensing_date", "compiled": true, "compiled_code": "\nwith tuva_last_run as(\n    select cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) as tuva_last_run\n)\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'DISPENSING_DATE' AS field_name\n    , case\n        when m.dispensing_date > tuva_last_run then 'invalid'\n        when m.dispensing_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'invalid'\n        when m.dispensing_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.dispensing_date > tuva_last_run then 'future'\n        when m.dispensing_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'too old'\n        else null\n        end as invalid_reason\n    , cast(dispensing_date as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m\ncross join tuva_last_run cte", "relation_name": "dev_thuxuan.data_quality.pharmacy_dispensing_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:33.163070Z", "completed_at": "2024-10-01T16:32:33.170200Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:33.171143Z", "completed_at": "2024-10-01T16:32:35.392265Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.506011962890625, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e66"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_days_supply", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'DAYS_SUPPLY' AS field_name\n    , case\n        when m.days_supply is null then 'null' else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(days_supply as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_thuxuan.data_quality.pharmacy_days_supply"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:33.991315Z", "completed_at": "2024-10-01T16:32:34.002701Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:34.003804Z", "completed_at": "2024-10-01T16:32:35.807099Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.9330434799194336, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f8ce-0001-987f0111d512"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_dispensing_provider_npi", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'DISPENSING_PROVIDER_NPI' AS field_name\n    , case when term.npi is not null                     then        'valid'\n          when m.dispensing_provider_npi is not null    then 'invalid'\n                                                        else 'null'\n                                                        end as bucket_name\n    , case\n        when m.dispensing_provider_npi is not null\n            and term.npi is null\n            then 'dispensing provider npi does not join to terminology provider table'\n        else null\n    end as invalid_reason\n    , cast(m.dispensing_provider_npi as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m\nleft join dev_thuxuan.terminology.provider as term on m.dispensing_provider_npi = term.npi", "relation_name": "dev_thuxuan.data_quality.pharmacy_dispensing_provider_npi"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:35.111493Z", "completed_at": "2024-10-01T16:32:35.116545Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:35.117493Z", "completed_at": "2024-10-01T16:32:36.511092Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.5534493923187256, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f7c5-0001-987f0110bd22"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_ndc_code", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'NDC_CODE' AS field_name\n    , case when term.ndc is not null          then        'valid'\n          when m.ndc_code is not null        then 'invalid'\n                                             else 'null' end as bucket_name\n    , case\n        when m.ndc_code is not null\n            and term.ndc is null\n            then 'NDC Code does not join to Terminology NDC table'\n        else null\n    end as invalid_reason\n    , m.ndc_code || '|' || coalesce(term.rxnorm_description, term.fda_description, '') as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m\nleft join dev_thuxuan.terminology.ndc as term on m.ndc_code = term.ndc", "relation_name": "dev_thuxuan.data_quality.pharmacy_ndc_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:34.204453Z", "completed_at": "2024-10-01T16:32:34.215059Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:34.216059Z", "completed_at": "2024-10-01T16:32:36.813758Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.8628623485565186, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e6a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_member_id", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'MEMBER_ID' AS field_name\n    , case\n        when m.member_id is null then 'null' else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(member_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_thuxuan.data_quality.pharmacy_member_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:35.674075Z", "completed_at": "2024-10-01T16:32:35.690646Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:35.690646Z", "completed_at": "2024-10-01T16:32:36.926496Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.4859144687652588, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f912-0001-987f0111b53e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_paid_amount", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'PAID_AMOUNT' AS field_name\n    , case when m.paid_amount is null          then        'null'\n                                              else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(paid_amount as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_thuxuan.data_quality.pharmacy_paid_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:35.929383Z", "completed_at": "2024-10-01T16:32:35.937382Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:35.938382Z", "completed_at": "2024-10-01T16:32:37.253220Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.598053216934204, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f913-0001-987f0111a4d6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_patient_id", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'PATIENT_ID' AS field_name\n    , case\n        when m.patient_id is null then 'null' else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(patient_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_thuxuan.data_quality.pharmacy_patient_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:35.681633Z", "completed_at": "2024-10-01T16:32:35.696998Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:35.698004Z", "completed_at": "2024-10-01T16:32:37.345406Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.8462917804718018, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f912-0001-987f0111b542"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_paid_date", "compiled": true, "compiled_code": "\nwith tuva_last_run as(\n     select cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) as tuva_last_run\n)\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'PAID_DATE' AS field_name\n    , case\n        when m.paid_date > tuva_last_run then 'invalid'\n        when m.paid_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'invalid'\n        when m.paid_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.paid_date > tuva_last_run then 'future'\n        when m.paid_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'too old'\n        else null\n        end as invalid_reason\n    , cast(paid_date as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m\ncross join tuva_last_run cte", "relation_name": "dev_thuxuan.data_quality.pharmacy_paid_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:36.681446Z", "completed_at": "2024-10-01T16:32:36.692947Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:36.692947Z", "completed_at": "2024-10-01T16:32:40.693691Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 4.25502610206604, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f8ce-0001-987f0111d516"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_payer", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'PAYER' AS field_name\n    , case\n        when m.payer is null then 'null' else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(payer as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_thuxuan.data_quality.pharmacy_payer"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:37.289281Z", "completed_at": "2024-10-01T16:32:37.340403Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:37.350904Z", "completed_at": "2024-10-01T16:32:40.675151Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 3.653170108795166, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f7c5-0001-987f0110bd26"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_prescribing_provider_npi", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'PRESCRIBING_PROVIDER_NPI' AS field_name\n    , case when term.npi is not null          then        'valid'\n          when m.prescribing_provider_npi is not null    then 'invalid'\n                                             else 'null' end as bucket_name\n    , case\n        when m.prescribing_provider_npi is not null\n            and term.npi is null\n            then 'Prescribing Provider NPI does not join to Terminology Provider table'\n        else null\n    end as invalid_reason\n    , cast(m.prescribing_provider_npi as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m\nleft join dev_thuxuan.terminology.provider as term on m.prescribing_provider_npi = term.npi", "relation_name": "dev_thuxuan.data_quality.pharmacy_prescribing_provider_npi"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:37.568551Z", "completed_at": "2024-10-01T16:32:37.839229Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:37.878315Z", "completed_at": "2024-10-01T16:32:40.798972Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 3.483966827392578, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f913-0001-987f0111a4da"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_refills", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'REFILLS' AS field_name\n    , case\n        when m.refills is null then 'null' else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(refills as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_thuxuan.data_quality.pharmacy_refills"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:37.543459Z", "completed_at": "2024-10-01T16:32:37.575549Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:37.632210Z", "completed_at": "2024-10-01T16:32:40.785459Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.5060386657714844, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f913-0001-987f0111a4de"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_quantity", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'PAID_DATE' AS field_name\n    , case\n        when m.quantity is null then 'null' else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(quantity as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_thuxuan.data_quality.pharmacy_quantity"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:37.225408Z", "completed_at": "2024-10-01T16:32:37.294790Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:37.316866Z", "completed_at": "2024-10-01T16:32:41.168744Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 4.108042240142822, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f7c5-0001-987f0110bd2a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_plan", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'PLAN' AS field_name\n    , case\n        when m.plan is null then 'null' else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(plan as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_thuxuan.data_quality.pharmacy_plan"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:40.951995Z", "completed_at": "2024-10-01T16:32:40.967229Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:40.978748Z", "completed_at": "2024-10-01T16:32:43.564480Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.9119865894317627, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f7c5-0001-987f0110bd2e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__stg_pharmacy_claim", "compiled": true, "compiled_code": "\n\nselect * from tuva.input_layer.pharmacy_claim", "relation_name": "dev_thuxuan.test.data_quality__stg_pharmacy_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:40.968231Z", "completed_at": "2024-10-01T16:32:40.989783Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:40.991781Z", "completed_at": "2024-10-01T16:32:43.559938Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.9013054370880127, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f8ce-0001-987f0111d51a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__stg_pharmacy_claim", "compiled": true, "compiled_code": "\n\n\nselect\n      claim_id\n    , claim_line_number\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , prescribing_provider_npi\n    , dispensing_provider_npi\n    , dispensing_date\n    , ndc_code\n    , quantity\n    , days_supply\n    , refills\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , in_network_flag\n    , data_source\n    , file_name\n    , ingest_datetime\nfrom tuva.input_layer.pharmacy_claim", "relation_name": "dev_thuxuan.test.normalized_input__stg_pharmacy_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:41.273559Z", "completed_at": "2024-10-01T16:32:41.307550Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:41.309759Z", "completed_at": "2024-10-01T16:32:43.747573Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.6038401126861572, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f8ce-0001-987f0111d51e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_allowed_amount", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , m.claim_type as claim_type\n    , 'ALLOWED_AMOUNT' AS field_name\n    , case when m.allowed_amount is null then 'null'\n                                    else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(allowed_amount as TEXT) as field_value\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_thuxuan.data_quality.claim_allowed_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:41.291130Z", "completed_at": "2024-10-01T16:32:41.323397Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:41.324394Z", "completed_at": "2024-10-01T16:32:43.756072Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.6008384227752686, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e6e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_charge_amount", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , m.claim_type as claim_type\n    , 'CHARGE_AMOUNT' AS field_name\n    , case when m.charge_amount is null then 'null'\n                                    else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(charge_amount as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_thuxuan.data_quality.claim_charge_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:41.353979Z", "completed_at": "2024-10-01T16:32:41.361978Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:41.363032Z", "completed_at": "2024-10-01T16:32:44.132357Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.904508352279663, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f913-0001-987f0111a4e2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_claim_id", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain \n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' as drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,m.claim_type as claim_type\n    ,'CLAIM_ID' AS field_name\n    ,case when m.claim_id is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(member_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_thuxuan.data_quality.claim_claim_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:43.935660Z", "completed_at": "2024-10-01T16:32:43.958776Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:43.962949Z", "completed_at": "2024-10-01T16:32:46.115706Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.3481364250183105, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f7c5-0001-987f0110bd32"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_claim_line_start_date", "compiled": true, "compiled_code": "\n\nwith tuva_last_run as(\n\n    select cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) as tuva_last_run\n\n)\nSELECT\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , m.claim_type as claim_type\n    , 'CLAIM_LINE_START_DATE' AS field_name\n    , case\n        when m.claim_line_start_date > tuva_last_run then 'invalid'\n        when m.claim_line_start_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'invalid'\n        when m.claim_line_start_date < m.claim_start_date then 'invalid'\n        when m.claim_line_start_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.claim_line_start_date > tuva_last_run then 'future'\n        when m.claim_line_start_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'too old'\n        when m.claim_line_start_date < m.claim_start_date then 'line date less than than claim date'\n        else null\n    end as invalid_reason\n    , cast(claim_line_start_date as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m\ncross join tuva_last_run cte", "relation_name": "dev_thuxuan.data_quality.claim_claim_line_start_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:43.875603Z", "completed_at": "2024-10-01T16:32:43.889688Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:43.903241Z", "completed_at": "2024-10-01T16:32:46.113880Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.396446943283081, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e72"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_claim_line_end_date", "compiled": true, "compiled_code": "\n\nwith tuva_last_run as(\n\n    select cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) as tuva_last_run\n\n)\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , m.claim_type as claim_type\n    , 'CLAIM_LINE_END_DATE' AS field_name\n    , case\n        when m.claim_line_end_date > tuva_last_run then 'invalid'\n        when m.claim_line_end_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'invalid'\n        when m.claim_line_end_date > m.claim_line_end_date then 'invalid'\n        when m.claim_line_end_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.claim_line_end_date > tuva_last_run then 'future'\n        when m.claim_line_end_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'too old'\n        when m.claim_line_end_date > m.claim_end_date then 'line date greater than claim date'\n        else null\n    end as invalid_reason\n    , cast(claim_line_end_date as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m\ncross join tuva_last_run cte", "relation_name": "dev_thuxuan.data_quality.claim_claim_line_end_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:43.892577Z", "completed_at": "2024-10-01T16:32:43.915353Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:43.922263Z", "completed_at": "2024-10-01T16:32:46.176268Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.5470759868621826, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f7c5-0001-987f0110bd36"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_claim_line_number", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' as drill_down_key\n    ,coalesce(claim_id, 'NULL') AS drill_down_value\n    ,m.claim_type as claim_type\n    ,'CLAIM_LINE_NUMBER' AS field_name\n    ,case when m.claim_line_number is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(member_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_thuxuan.data_quality.claim_claim_line_number"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:44.264335Z", "completed_at": "2024-10-01T16:32:44.280878Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:44.281883Z", "completed_at": "2024-10-01T16:32:46.284774Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.1969473361968994, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e76"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_coinsurance_amount", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , m.claim_type as claim_type\n    , 'COINSURANCE_AMOUNT' AS field_name\n    , case when m.coinsurance_amount is null then 'null'\n                                    else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(coinsurance_amount as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_thuxuan.data_quality.claim_coninsurance_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:43.950293Z", "completed_at": "2024-10-01T16:32:43.961943Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:43.972023Z", "completed_at": "2024-10-01T16:32:46.505055Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.691938638687134, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e7a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_claim_type", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain \n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' as drill_down_key\n,coalesce(claim_id, 'NULL') AS drill_down_value\n    ,m.claim_type as claim_type\n    ,'CLAIM_TYPE' AS field_name\n    ,case when m.claim_type is null then 'null'\n          when term.claim_type is null then 'invalid'\n                             else 'valid' end as bucket_name\n    ,case\n        when m.claim_type is not null and term.claim_type is null then 'Claim Type does not join to Terminology Claim Type table'\n        else null\n    end as invalid_reason\n    ,cast(m.claim_type as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m\nleft join dev_thuxuan.terminology.claim_type term on m.claim_type = term.claim_type", "relation_name": "dev_thuxuan.data_quality.claim_claim_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:46.275271Z", "completed_at": "2024-10-01T16:32:46.284774Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:46.291775Z", "completed_at": "2024-10-01T16:32:47.883724Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.7361345291137695, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e82"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_copayment_amount", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , m.claim_type as claim_type\n    , 'COPAYMENT_AMOUNT' AS field_name\n    , case when m.copayment_amount is null then 'null'\n                                    else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(copayment_amount as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_thuxuan.data_quality.claim_copayment_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:46.286775Z", "completed_at": "2024-10-01T16:32:46.297366Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:46.298367Z", "completed_at": "2024-10-01T16:32:47.885746Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.7403137683868408, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e7e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_data_source", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain \n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' as drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,m.claim_type as claim_type\n    ,'DATA_SOURCE' AS field_name\n    ,case when m.data_source is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(data_source as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_thuxuan.data_quality.claim_data_source"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:46.467752Z", "completed_at": "2024-10-01T16:32:46.475745Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:46.475745Z", "completed_at": "2024-10-01T16:32:47.986309Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.74912428855896, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e86"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_diagnosis_code_type", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain \n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' as drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,m.claim_type as claim_type\n    ,'DIAGNOSIS_CODE_TYPE' AS field_name\n    ,case when m.diagnosis_code_type is null then 'null'\n          when term.code_type is null then 'invalid'\n                             else 'valid' end as bucket_name\n    ,case\n        when m.diagnosis_code_type is not null and term.code_type is null then 'Diagnosis Code Type does not join to Terminology Code Type table'\n        else null\n    end as invalid_reason\n    ,cast(m.diagnosis_code_type as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m\nleft join dev_thuxuan.reference_data.code_type term on m.diagnosis_code_type = term.code_type", "relation_name": "dev_thuxuan.data_quality.claim_diagnosis_code_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:46.440380Z", "completed_at": "2024-10-01T16:32:46.449290Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:46.449290Z", "completed_at": "2024-10-01T16:32:47.961641Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.7774903774261475, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f912-0001-987f0111b546"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_deductible_amount", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n     , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , m.claim_type as claim_type\n    , 'DEDUCTIBLE_AMOUNT' AS field_name\n    , case when m.deductible_amount is null then 'null'\n                                    else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(deductible_amount as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_thuxuan.data_quality.claim_deductible_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:46.632118Z", "completed_at": "2024-10-01T16:32:46.642125Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:46.642125Z", "completed_at": "2024-10-01T16:32:48.140656Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.7375898361206055, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f8ce-0001-987f0111d522"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_hcpcs_code", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , m.claim_type as claim_type\n    , 'HCPCS_CODE' AS field_name\n    , case\n          when term.hcpcs is not null then 'valid'\n          when m.hcpcs_code is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    , case\n        when m.hcpcs_code is not null and term.hcpcs is null then 'HCPCS does not join to Terminology HCPCS_LEVEL_2 table'\n        else null\n     end as invalid_reason\n    , m.hcpcs_code || '|' || coalesce(term.short_description, '') as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\n    from tuva.input_layer.medical_claim m\nleft join dev_thuxuan.terminology.hcpcs_level_2 as term on m.hcpcs_code = term.hcpcs", "relation_name": "dev_thuxuan.data_quality.claim_hcpcs_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:48.034844Z", "completed_at": "2024-10-01T16:32:48.042844Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:48.043865Z", "completed_at": "2024-10-01T16:32:49.578783Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.6722993850708008, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f912-0001-987f0111b54a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_paid_amount", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , m.claim_type as claim_type\n    , 'PAID_AMOUNT' AS field_name\n    , case when m.paid_amount is null then 'null'\n                                    else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(paid_amount as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_thuxuan.data_quality.claim_paid_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:48.018173Z", "completed_at": "2024-10-01T16:32:48.026717Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:48.027740Z", "completed_at": "2024-10-01T16:32:49.573811Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.6889679431915283, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f7c5-0001-987f0110bd3a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_member_id", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain \n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,m.claim_type as claim_type\n    ,'MEMBER_ID' AS field_name\n    ,case when m.member_id is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(member_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_thuxuan.data_quality.claim_member_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:48.225867Z", "completed_at": "2024-10-01T16:32:48.243405Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:48.243405Z", "completed_at": "2024-10-01T16:32:49.753099Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.6645495891571045, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f912-0001-987f0111b54e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_paid_date", "compiled": true, "compiled_code": "\n\nwith tuva_last_run as(\n\n     select cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) as tuva_last_run\n\n)\nSELECT\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , m.claim_type as claim_type\n    , 'PAID_DATE' AS field_name\n    , case\n        when m.paid_date > tuva_last_run then 'invalid'\n        when m.paid_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'invalid'\n        when m.paid_date < m.claim_start_date then 'invalid'\n        when m.paid_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.paid_date > tuva_last_run then 'future'\n        when m.paid_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'too old'\n        when m.paid_date < m.claim_start_date then 'paid date before claim start date'\n        else null\n    end as invalid_reason\n    , cast(claim_line_start_date as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m\ncross join tuva_last_run cte", "relation_name": "dev_thuxuan.data_quality.claim_paid_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:48.236507Z", "completed_at": "2024-10-01T16:32:48.251926Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:48.252925Z", "completed_at": "2024-10-01T16:32:49.787670Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.8055510520935059, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f912-0001-987f0111b552"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_patient_id", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain \n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n,coalesce(claim_id, 'NULL') AS drill_down_value\n    ,m.claim_type as claim_type\n    ,'PATIENT_ID' AS field_name\n    ,case when m.patient_id is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(patient_id as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_thuxuan.data_quality.claim_patient_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:48.375708Z", "completed_at": "2024-10-01T16:32:48.386232Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:48.386232Z", "completed_at": "2024-10-01T16:32:49.785671Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.6567111015319824, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f8ce-0001-987f0111d526"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_payer", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain \n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n,coalesce(claim_id, 'NULL') AS drill_down_value\n    ,m.claim_type as claim_type\n    ,'PAYER' AS field_name\n    ,case when m.payer is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(payer as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_thuxuan.data_quality.claim_payer"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:49.720688Z", "completed_at": "2024-10-01T16:32:49.729617Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:49.730621Z", "completed_at": "2024-10-01T16:32:51.254301Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.6629900932312012, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f913-0001-987f0111a4e6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_total_cost_amount", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , m.claim_type as claim_type\n    , 'TOTAL_COST_AMOUNT' AS field_name\n    , case when m.total_cost_amount is null then 'null'\n                                    else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(total_cost_amount as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_thuxuan.data_quality.claim_total_cost_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:50.048925Z", "completed_at": "2024-10-01T16:32:50.063993Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:50.063993Z", "completed_at": "2024-10-01T16:32:51.848853Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.107457160949707, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f913-0001-987f0111a4ea"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_billing_npi", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'institutional'\n),\nunique_field as (\n    select distinct claim_id\n        ,cast(billing_npi as TEXT) as field\n        ,data_source\n    from base\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n\t)\nselect distinct -- to bring to claim_id grain\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,'institutional' AS claim_type\n    ,'BILLING_NPI' AS field_name\n    ,case when cg.frequency > 1                then 'multiple'\n          when term.npi is not null            then 'valid'\n          when m.billing_npi is not null      then 'invalid'\n                                               else 'null' end as bucket_name\n    ,case\n        when cg.frequency = 1\n            and m.billing_npi is not null\n            and term.npi is null\n            then 'NPI is not in Terminology Provider table'\n        else null\n    end as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_thuxuan.terminology.provider as term on m.billing_npi = term.npi\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_thuxuan.data_quality.institutional_billing_npi"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:51.386695Z", "completed_at": "2024-10-01T16:32:51.399268Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:51.400250Z", "completed_at": "2024-10-01T16:32:52.805302Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.6373720169067383, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f913-0001-987f0111a4ee"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_claim_end_date", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'institutional'\n)\n, tuva_last_run as(\n    select cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) as tuva_last_run\n)\n,unique_field as (\n    select distinct claim_id\n        ,cast(claim_end_date as TEXT) as field\n        ,data_source\n    from base\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n\t)\nselect distinct -- to bring to claim_id grain\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,'institutional' AS claim_type\n    ,'CLAIM_END_DATE' AS field_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.claim_end_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'invalid'\n        when m.claim_end_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'invalid'\n        when m.claim_end_date < m.claim_start_date then 'invalid'\n        when m.claim_end_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.claim_end_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'future'\n        when m.claim_end_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'too old'\n        when m.claim_end_date < m.claim_start_date then 'claim end date before claim start date'\n        else null\n        end as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source\ncross join tuva_last_run cte", "relation_name": "dev_thuxuan.data_quality.institutional_claim_end_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:49.713687Z", "completed_at": "2024-10-01T16:32:49.724703Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:49.725790Z", "completed_at": "2024-10-01T16:32:53.552627Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 4.589568853378296, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f912-0001-987f0111b556"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_plan", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n,coalesce(claim_id, 'NULL') AS drill_down_value\n    ,m.claim_type as claim_type\n    ,'PLAN' AS field_name\n    ,case when m.plan is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(plan as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_thuxuan.data_quality.claim_plan"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:49.893466Z", "completed_at": "2024-10-01T16:32:49.900014Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:49.900014Z", "completed_at": "2024-10-01T16:32:53.543121Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 4.40777850151062, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f8ce-0001-987f0111d52a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_type_summary", "compiled": true, "compiled_code": "select\n    data_source\n    ,claim_type\n    ,count(distinct claim_id) as claim_count\n    ,sum(paid_amount) as paid_amount\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim\ngroup by\n    data_source\n    ,claim_type\n\n", "relation_name": "dev_thuxuan.data_quality.claim_type_summary"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:52.151887Z", "completed_at": "2024-10-01T16:32:52.162399Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:52.163410Z", "completed_at": "2024-10-01T16:32:54.324265Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.3221123218536377, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f7c5-0001-987f0110bd42"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_claim_start_date", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'institutional'\n)\n, tuva_last_run as(\n    select cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) as tuva_last_run\n)\n,unique_field as (\n    select distinct claim_id\n        ,cast(claim_start_date as TEXT) as field\n        ,data_source\n    from base\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n\t)\nselect distinct -- to bring to claim_id grain\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,'institutional' AS claim_type\n    ,'CLAIM_START_DATE' AS field_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.claim_start_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'invalid'\n        when m.claim_start_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'invalid'\n        when m.claim_start_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.claim_start_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'future'\n        when m.claim_start_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'too old'\n        else null\n        end as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source\ncross join tuva_last_run cte", "relation_name": "dev_thuxuan.data_quality.institutional_claim_start_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:50.039420Z", "completed_at": "2024-10-01T16:32:50.054929Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:50.055925Z", "completed_at": "2024-10-01T16:32:54.375585Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 4.556928873062134, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f7c5-0001-987f0110bd3e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_bill_type_code", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'institutional'\n),\n\nunique_field as (\n    select distinct claim_id\n        , base.bill_type_code || '|' || coalesce(term.bill_type_description, '') as field\n        , data_source\n    from base\n    left join dev_thuxuan.terminology.bill_type as term on base.bill_type_code = term.bill_type_code\n),\n\nclaim_grain as (\n    select claim_id\n        , data_source\n        , count(*) as frequency\n    from unique_field\n    group by claim_id\n        , data_source\n),\n\nclaim_agg as (\nselect\n      claim_id\n    , data_source\n    , \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n      claim_id\n    , data_source\n\t)\n\nselect distinct -- to bring to claim_id grain\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID' AS drill_down_key\n    , coalesce(m.claim_id, 'NULL') AS drill_down_value\n    , 'institutional' AS claim_type\n    , 'BILL_TYPE_CODE' AS field_name\n    , case when cg.frequency > 1                then 'multiple'\n          when term.bill_type_code is not null then 'valid'\n          when m.bill_type_code is not null    then 'invalid'\n                                               else 'null' end as bucket_name\n    , case\n        when m.bill_type_code is not null\n            and term.bill_type_code is null\n            and cg.frequency = 1\n            then 'Bill Type Code does not join to Terminology Bill_Type table'\n        else null\n    end as invalid_reason\n    , cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_thuxuan.terminology.bill_type as term on m.bill_type_code = term.bill_type_code\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_thuxuan.data_quality.institutional_bill_type_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:53.029182Z", "completed_at": "2024-10-01T16:32:53.040138Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:53.041206Z", "completed_at": "2024-10-01T16:32:54.756280Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.8712890148162842, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e8a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_diagnosis_code_1", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'institutional'\n),\n\nunique_field as (\n    select distinct claim_id\n        , diagnosis_code_1 || '|' || coalesce(term.short_description, '') as field\n        , data_source\n    from base\n    left join dev_thuxuan.terminology.icd_10_cm as term on base.diagnosis_code_1 = term.icd_10_cm\n),\n\nclaim_grain as (\n    select claim_id\n        , data_source\n        , count(*) as frequency\n    from unique_field\n    group by claim_id\n        , data_source\n),\n\nclaim_agg as (\nselect\n      claim_id\n    , data_source\n    , \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n      claim_id\n    , data_source\n\t)\n\nselect distinct -- to bring to claim_id grain\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID' AS drill_down_key\n    , coalesce(m.claim_id, 'NULL') AS drill_down_value\n    , 'institutional' AS claim_type\n    , 'DIAGNOSIS_CODE_1' AS field_name\n    , case when cg.frequency > 1                then 'multiple'\n          when term.icd_10_cm is not null      then 'valid'\n          when m.diagnosis_code_1 is not null  then 'invalid'\n        else 'null'\n    end as bucket_name\n    , case\n        when cg.frequency = 1\n            and m.diagnosis_code_1 is not null\n            and term.icd_10_cm is null\n            then 'Diagnosis Code is not in Terminology ICD_10_CM table'\n        else null\n    end as invalid_reason\n    , cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_thuxuan.terminology.icd_10_cm as term on m.diagnosis_code_1 = term.icd_10_cm\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_thuxuan.data_quality.institutional_diagnosis_code_1"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:54.308159Z", "completed_at": "2024-10-01T16:32:54.322265Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:54.324265Z", "completed_at": "2024-10-01T16:32:55.838301Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.688237190246582, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f8ce-0001-987f0111d52e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_diagnosis_code_2", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'institutional'\n),\n\nunique_field as (\n    select distinct claim_id\n        , diagnosis_code_2 || '|' || coalesce(term.short_description, '') as field\n        , data_source\n    from base\n    left join dev_thuxuan.terminology.icd_10_cm as term on base.diagnosis_code_2 = term.icd_10_cm\n),\n\nclaim_grain as (\n    select claim_id\n        , data_source\n        , count(*) as frequency\n    from unique_field\n    group by claim_id\n        , data_source\n),\n\nclaim_agg as (\nselect\n      claim_id\n    , data_source\n    , \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n      claim_id\n    , data_source\n\t)\n\nselect distinct -- to bring to claim_id grain\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID' AS drill_down_key\n    , coalesce(m.claim_id, 'NULL') AS drill_down_value\n    , 'institutional' AS claim_type\n    , 'DIAGNOSIS_CODE_2' AS field_name\n    , case when cg.frequency > 1                then 'multiple'\n          when term.icd_10_cm is not null      then 'valid'\n          when m.diagnosis_code_2 is not null  then 'invalid'\n                                               else 'null' end as bucket_name\n    , case\n        when cg.frequency = 1\n            and m.diagnosis_code_2 is not null\n            and term.icd_10_cm is null\n            then 'Diagnosis Code is not in Terminology ICD_10_CM table'\n        else null\n    end as invalid_reason\n    , cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_thuxuan.terminology.icd_10_cm as term on m.diagnosis_code_2 = term.icd_10_cm\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_thuxuan.data_quality.institutional_diagnosis_code_2"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:54.315716Z", "completed_at": "2024-10-01T16:32:54.324265Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:54.329800Z", "completed_at": "2024-10-01T16:32:56.006029Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.8271596431732178, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f912-0001-987f0111b55a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_diagnosis_code_3", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'institutional'\n),\n\nunique_field as (\n    select distinct claim_id\n        , diagnosis_code_3 || '|' || coalesce(term.short_description, '') as field\n        , data_source\n    from base\n    left join dev_thuxuan.terminology.icd_10_cm as term on base.diagnosis_code_3 = term.icd_10_cm\n),\n\nclaim_grain as (\n    select claim_id\n        , data_source\n        , count(*) as frequency\n    from unique_field\n    group by claim_id\n        , data_source\n),\n\nclaim_agg as (\nselect\n      claim_id\n    , data_source\n    , \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n      claim_id\n    , data_source\n\t)\n\nselect distinct -- to bring to claim_id grain\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID' AS drill_down_key\n    , coalesce(m.claim_id, 'NULL') AS drill_down_value\n    , 'institutional' AS claim_type\n    , 'DIAGNOSIS_CODE_3' AS field_name\n    , case when cg.frequency > 1                then 'multiple'\n          when term.icd_10_cm is not null      then 'valid'\n          when m.diagnosis_code_3 is not null  then 'invalid'\n                                               else 'null' end as bucket_name\n    , case\n        when cg.frequency = 1\n            and m.diagnosis_code_3 is not null\n            and term.icd_10_cm is null\n            then 'Diagnosis Code is not in Terminology ICD_10_CM table'\n        else null\n    end as invalid_reason\n    , cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_thuxuan.terminology.icd_10_cm as term on m.diagnosis_code_3 = term.icd_10_cm\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_thuxuan.data_quality.institutional_diagnosis_code_3"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:54.600900Z", "completed_at": "2024-10-01T16:32:54.608869Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:54.608869Z", "completed_at": "2024-10-01T16:32:56.412961Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.944498062133789, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f912-0001-987f0111b55e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_facility_npi", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'institutional'\n),\nunique_field as (\n    select distinct claim_id\n        ,cast(facility_npi as TEXT) as field\n        ,data_source\n    from base\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n\t)\nselect distinct -- to bring to claim_id grain\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,'institutional' AS claim_type\n    ,'FACILITY_NPI' AS field_name\n    ,case when cg.frequency > 1                then 'multiple'\n          when term.npi is not null then 'valid'\n          when m.facility_npi is not null    then 'invalid'\n                                               else 'null' end as bucket_name\n    ,case\n        when cg.frequency = 1\n            and m.facility_npi is not null\n            and term.npi is null\n            then 'NPI not in Terminology Provider Table'\n        else null\n    end as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_thuxuan.terminology.provider as term on m.facility_npi = term.npi\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_thuxuan.data_quality.institutional_facility_npi"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:54.478502Z", "completed_at": "2024-10-01T16:32:54.487608Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:54.488608Z", "completed_at": "2024-10-01T16:32:56.574484Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.2475171089172363, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f913-0001-987f0111a4f2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_discharge_disposition_code", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'institutional'\n),\n\nunique_field as (\n    select distinct claim_id\n        , base.discharge_disposition_code || '|' || coalesce(term.discharge_disposition_description, '') as field\n        , data_source\n    from base\n    left join dev_thuxuan.terminology.discharge_disposition as term on base.discharge_disposition_code = term.discharge_disposition_code\n),\n\nclaim_grain as (\n    select claim_id\n        , data_source\n        , count(*) as frequency\n    from unique_field\n    group by claim_id\n        , data_source\n),\n\nclaim_agg as (\nselect\n      claim_id\n    , data_source\n    , \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n      claim_id\n    , data_source\n\t)\n\nselect distinct -- to bring to claim_id grain\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID' AS drill_down_key\n    , coalesce(m.claim_id, 'NULL') AS drill_down_value\n    , 'institutional' AS claim_type\n    , 'DISCHARGE_DISPOSITION_CODE' AS field_name\n    , case when cg.frequency > 1                then 'multiple'\n          when term.discharge_disposition_code is not null then 'valid'\n          when m.discharge_disposition_code is not null    then 'invalid'\n                                               else 'null' end as bucket_name\n    , case\n        when cg.frequency = 1\n            and m.discharge_disposition_code is not null\n            and term.discharge_disposition_code is null\n            then 'Discharge Disposition Code does not join to Terminology Discharge_Disposition Table'\n        else null\n    end as invalid_reason\n    , cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_thuxuan.terminology.discharge_disposition as term on m.discharge_disposition_code = term.discharge_disposition_code\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_thuxuan.data_quality.institutional_discharge_disposition_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:55.291275Z", "completed_at": "2024-10-01T16:32:55.298889Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:55.298889Z", "completed_at": "2024-10-01T16:32:57.081659Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.9117355346679688, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e8e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_present_on_admission_1", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'institutional'\n\n),\nunique_field as (\n    select distinct claim_id\n        ,cast(diagnosis_poa_1 as TEXT)  as field\n        ,data_source\n    from base\n\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n\t)\nselect distinct -- to bring to claim_id grain\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,'institutional' AS claim_type\n    ,'DIAGNOSIS_POA_1' AS field_name\n       ,case when cg.frequency > 1                then 'multiple'\n        when m.diagnosis_poa_1 in ('y','n')       then 'valid'\n        when m.diagnosis_poa_1 is null            then 'null'\n                                                  else 'invalid' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_thuxuan.data_quality.institutional_present_on_admission_1"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:56.006958Z", "completed_at": "2024-10-01T16:32:56.014473Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:56.015475Z", "completed_at": "2024-10-01T16:32:57.745137Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.88450288772583, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f6d9-0001-987f01112e92"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_present_on_admission_2", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'institutional'\n),\nunique_field as (\n    select distinct claim_id\n        ,cast(diagnosis_poa_2 as TEXT)  as field\n        ,data_source\n    from base\n\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n\t)\nselect distinct -- to bring to claim_id grain\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,'institutional' AS claim_type\n    ,'DIAGNOSIS_POA_2' AS field_name\n       ,case when cg.frequency > 1                then 'multiple'\n        when m.diagnosis_poa_2 in ('y','n')       then 'valid'\n        when m.diagnosis_poa_2 is null            then 'null'\n                                                  else 'invalid' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_thuxuan.data_quality.institutional_present_on_admission_2"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:56.145431Z", "completed_at": "2024-10-01T16:32:56.153468Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:56.153468Z", "completed_at": "2024-10-01T16:32:57.783312Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.8614113330841064, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f7c5-0001-987f0110bd46"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_present_on_admission_3", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'institutional'\n),\nunique_field as (\n    select distinct claim_id\n        ,cast(diagnosis_poa_3 as TEXT)  as field\n        ,data_source\n    from base\n\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n\t)\nselect distinct -- to bring to claim_id grain\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,'institutional' AS claim_type\n    ,'DIAGNOSIS_POA_3' AS field_name\n       ,case when cg.frequency > 1                then 'multiple'\n        when m.diagnosis_poa_3 in ('y','n')       then 'valid'\n        when m.diagnosis_poa_3 is null            then 'null'\n                                                  else 'invalid' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_thuxuan.data_quality.institutional_present_on_admission_3"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:56.729601Z", "completed_at": "2024-10-01T16:32:56.738608Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:56.739619Z", "completed_at": "2024-10-01T16:32:58.448800Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.93461275100708, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f913-0001-987f0111a4f6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_revenue_center_code", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'institutional' AS claim_type\n    , 'REVENUE_CENTER_CODE' AS field_name\n    , case\n          when term.revenue_center_code is not null then 'valid'\n          when m.revenue_center_code is not null    then 'invalid'\n                                                    else 'null' end as bucket_name\n    , case\n        when m.revenue_center_code is not null\n            and term.revenue_center_code is null\n            then 'Revenue center code does not join to Terminology Revenue Center table'\n        else null\n    end as invalid_reason\n    , m.revenue_center_code || '|' || coalesce(term.revenue_center_description, '') as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\n    from tuva.input_layer.medical_claim m\nleft join dev_thuxuan.terminology.revenue_center as term on m.revenue_center_code = term.revenue_center_code", "relation_name": "dev_thuxuan.data_quality.institutional_revenue_center_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:56.550042Z", "completed_at": "2024-10-01T16:32:56.559060Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:56.560064Z", "completed_at": "2024-10-01T16:32:58.464378Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.1151108741760254, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f7c5-0001-987f0110bd4a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_rendering_npi", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'institutional'\n),\nunique_field as (\n    select distinct claim_id\n        ,cast(facility_npi as TEXT) as field\n        ,data_source\n    from base\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n\t)\nselect distinct -- to bring to claim_id grain\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,'institutional' AS claim_type\n    ,'RENDERING_NPI' AS field_name\n    ,case when cg.frequency > 1                then 'multiple'\n          when term.npi is not null            then 'valid'\n          when m.rendering_npi is not null      then 'invalid'\n                                               else 'null' end as bucket_name\n    ,case\n        when cg.frequency = 1\n            and m.rendering_npi is not null\n            and term.npi is null\n        then 'provider npi does not join to terminology provider table'\n        else null\n    end as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_thuxuan.terminology.provider as term on m.rendering_npi = term.npi\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_thuxuan.data_quality.institutional_rendering_npi"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:57.209083Z", "completed_at": "2024-10-01T16:32:57.217184Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:57.217184Z", "completed_at": "2024-10-01T16:32:59.332646Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.279158592224121, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f912-0001-987f0111b562"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_service_unit_quantity", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , m.claim_type as claim_type\n    , 'service_unit_quantity' as field_name\n    , case when m.service_unit_quantity is null then 'null'\n                                    else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(service_unit_quantity as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_thuxuan.data_quality.institutional_service_unit_quantity"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:57.890471Z", "completed_at": "2024-10-01T16:32:57.900067Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:57.901227Z", "completed_at": "2024-10-01T16:32:59.768911Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.015702247619629, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f913-0001-987f0111a4fe"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__professional_billing_npi", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'professional'\n)\n\nselect\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'professional' AS claim_type\n    , 'BILLING_NPI' AS field_name\n    , case when term.npi is not null          then        'valid'\n          when m.billing_npi is not null    then 'invalid'\n                                             else 'null' end as bucket_name\n    , case\n        when m.billing_npi is not null\n            and term.npi is null\n            then 'Billing NPI does not join to Terminology Provider Table'\n        else null\n    end as invalid_reason\n    , cast(m.billing_npi as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join dev_thuxuan.terminology.provider as term on m.billing_npi = term.npi", "relation_name": "dev_thuxuan.data_quality.professional_billing_npi"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:58.013042Z", "completed_at": "2024-10-01T16:32:58.023553Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:58.023553Z", "completed_at": "2024-10-01T16:32:59.782633Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.9922761917114258, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f913-0001-987f0111a4fa"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__professional_claim_end_date", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'institutional'\n)\n, tuva_last_run as(\n    select cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) as tuva_last_run\n)\n ,unique_field as (\n    select distinct claim_id\n        ,cast(claim_end_date as TEXT) as field\n        ,data_source\n    from base\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n\t)\nselect\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id,'NULL') AS drill_down_value\n    ,'professional' AS claim_type\n    ,'CLAIM_END_DATE' AS field_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.claim_end_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'invalid'\n        when m.claim_end_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'invalid'\n        when m.claim_end_date < m.claim_start_date then 'invalid'\n        when m.claim_end_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.claim_end_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'future'\n        when m.claim_end_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'too old'\n        when m.claim_end_date < m.claim_start_date then 'claim end date before start date'\n        when m.claim_end_date is null then null\n        else 'valid'\n    end as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source\ncross join tuva_last_run cte", "relation_name": "dev_thuxuan.data_quality.professional_claim_end_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:58.672135Z", "completed_at": "2024-10-01T16:32:58.690838Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:58.691837Z", "completed_at": "2024-10-01T16:33:00.561712Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.035717010498047, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f8ce-0001-987f0111d532"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__professional_claim_start_date", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'professional'\n)\n, tuva_last_run as(\n    select cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) as tuva_last_run\n)\n, unique_field as (\n    select distinct claim_id\n        ,cast(claim_start_date as TEXT) as field\n        ,data_source\n    from base\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n\t)\nselect\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id,'NULL') AS drill_down_value\n    ,'professional' AS claim_type\n    ,'CLAIM_START_DATE' AS field_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.claim_start_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'invalid'\n        when m.claim_start_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'invalid'\n        when m.claim_start_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.claim_start_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'future'\n        when m.claim_start_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'too old'\n        else null\n    end as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source\ncross join tuva_last_run cte", "relation_name": "dev_thuxuan.data_quality.professional_claim_start_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:58.682932Z", "completed_at": "2024-10-01T16:32:58.698368Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:58.699366Z", "completed_at": "2024-10-01T16:33:00.566243Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.0396454334259033, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76700-010a-f8ce-0001-987f0111d536"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__professional_diagnosis_code_1", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'professional'\n)\n\nselect\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'professional' AS claim_type\n    , 'DIAGNOSIS_CODE_1' AS field_name\n    , case when term.icd_10_cm is not null          then 'valid'\n          when m.diagnosis_code_1 is not null      then 'invalid'\n                                                   else 'null' end as bucket_name\n    , case\n        when m.diagnosis_code_1 is not null\n            and term.icd_10_cm is null\n            then 'Diagnosis Code does not join to Terminology ICD_10_CM table'\n        else null\n    end as invalid_reason\n    , m.diagnosis_code_1 || '|' || coalesce(term.short_description, '') as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join dev_thuxuan.terminology.icd_10_cm as term on m.diagnosis_code_1 = term.icd_10_cm", "relation_name": "dev_thuxuan.data_quality.professional_diagnosis_code_1"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:59.495648Z", "completed_at": "2024-10-01T16:32:59.657374Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:59.658294Z", "completed_at": "2024-10-01T16:33:01.584539Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.361290216445923, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f913-0001-987f0111a502"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__professional_diagnosis_code_2", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'professional'\n)\n\nselect\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'professional' AS claim_type\n    , 'DIAGNOSIS_CODE_2' AS field_name\n    , case when term.icd_10_cm is not null          then 'valid'\n          when m.diagnosis_code_2 is not null      then 'invalid'\n                                                   else 'null' end as bucket_name\n    , case\n        when m.diagnosis_code_2 is not null\n            and term.icd_10_cm is null\n            then 'Diagnosis Code does not join to Terminology ICD_10_CM table'\n        else null\n    end as invalid_reason\n    , m.diagnosis_code_2 || '|' || coalesce(term.short_description, '') as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join dev_thuxuan.terminology.icd_10_cm as term on m.diagnosis_code_2 = term.icd_10_cm", "relation_name": "dev_thuxuan.data_quality.professional_diagnosis_code_2"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:00.011696Z", "completed_at": "2024-10-01T16:33:00.027138Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:00.028647Z", "completed_at": "2024-10-01T16:33:01.656160Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.8463082313537598, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f6d9-0001-987f01112e96"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__professional_facility_npi", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'professional'\n)\n\nselect\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'professional' AS claim_type\n    , 'FACILITY_NPI' AS field_name\n    , case when term.npi is not null          then        'valid'\n          when m.facility_npi is not null    then 'invalid'\n                                             else 'null' end as bucket_name\n    , case\n        when m.facility_npi is not null\n            and term.npi is null\n            then 'Facility NPI does not join to Terminology Provider Table'\n        else null\n    end as invalid_reason\n    , cast(m.facility_npi as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join dev_thuxuan.terminology.provider as term on m.facility_npi = term.npi", "relation_name": "dev_thuxuan.data_quality.professional_facility_npi"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:32:59.912692Z", "completed_at": "2024-10-01T16:32:59.921698Z"}, {"name": "execute", "started_at": "2024-10-01T16:32:59.923198Z", "completed_at": "2024-10-01T16:33:01.795161Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.0077412128448486, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f912-0001-987f0111b566"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__professional_diagnosis_code_3", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'professional'\n)\n\nselect\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'professional' AS claim_type\n    , 'DIAGNOSIS_CODE_3' AS field_name\n    , case when term.icd_10_cm is not null          then 'valid'\n          when m.diagnosis_code_3 is not null      then 'invalid'\n                                                   else 'null' end as bucket_name\n    , case\n        when m.diagnosis_code_3 is not null\n            and term.icd_10_cm is null\n            then 'Diagnosis Code does not join to Terminology ICD_10_CM table'\n        else null\n    end as invalid_reason\n    , m.diagnosis_code_3 || '|' || coalesce(term.short_description, '') as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join dev_thuxuan.terminology.icd_10_cm as term on m.diagnosis_code_3 = term.icd_10_cm", "relation_name": "dev_thuxuan.data_quality.professional_diagnosis_code_3"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:00.733941Z", "completed_at": "2024-10-01T16:33:00.754235Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:00.755235Z", "completed_at": "2024-10-01T16:33:02.587791Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.0561070442199707, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d53a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__professional_rendering_npi", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'professional'\n)\n\nselect\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'professional' AS claim_type\n    , 'RENDERING_NPI' AS field_name\n    , case when term.npi is not null          then        'valid'\n          when m.rendering_npi is not null    then 'invalid'\n                                             else 'null' end as bucket_name\n    , case\n        when m.rendering_npi is not null\n            and term.npi is null\n            then 'Rendering Provider NPI does not join to Terminology Provider table'\n        else null\n    end as invalid_reason\n    , cast(m.rendering_npi as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join dev_thuxuan.terminology.provider as term on m.rendering_npi = term.npi", "relation_name": "dev_thuxuan.data_quality.professional_rendering_npi"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:00.720309Z", "completed_at": "2024-10-01T16:33:00.743947Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:00.744945Z", "completed_at": "2024-10-01T16:33:02.639184Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.0717408657073975, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f6d9-0001-987f01112e9a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__professional_place_of_service_code", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'professional'\n)\n\nselect\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'professional' AS claim_type\n    , 'PLACE_OF_SERVICE_CODE' AS field_name\n    , case when term.place_of_service_code is not null then 'valid'\n          when m.place_of_service_code is not null    then 'invalid'\n                                               else 'null' end as bucket_name\n    , case\n        when m.place_of_service_code is not null\n            and term.place_of_service_code is null\n            then 'Place of Service Code does not join to Terminology Place of Service table'\n        else null\n    end as invalid_reason\n    , m.place_of_service_code || '|' || coalesce(term.place_of_service_description, '') as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join dev_thuxuan.terminology.place_of_service as term on m.place_of_service_code = term.place_of_service_code", "relation_name": "dev_thuxuan.data_quality.professional_place_of_service_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:01.868944Z", "completed_at": "2024-10-01T16:33:01.883462Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:01.888464Z", "completed_at": "2024-10-01T16:33:04.518727Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.893202781677246, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d53e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__raw_summary", "compiled": true, "compiled_code": "\n\nwith cte as (\n    select \n        'input_layer' as source\n      , 'eligibility' as table_name\n      , count(*) as row_count\n      , count(distinct patient_id) as unique_check\n      , 'Unique Patient Count' as unique_check_desc\n      , 2 as table_order\n    from tuva.input_layer.eligibility\n\n    union all\n\n    select \n        'raw_data' as source\n      , 'eligibility' as table_name\n      , null as row_count\n      , null as unique_check\n      , 'Unique Patient Count' as unique_check_desc\n      , 1 as table_order\n    from tuva.input_layer.eligibility\n\n    union all\n\n    select \n        'input_layer' as source\n      , 'medical_claim' as table_name\n      , count(*) as row_count\n      , count(distinct claim_id) as unique_check\n      , 'Unique Claim Count' as unique_check_desc\n      , 4 as table_order\n    from tuva.input_layer.medical_claim\n\n    union all\n\n    select \n        'raw_data' as source\n      , 'medical_claim' as table_name\n      , null as row_count\n      , null as unique_check\n      , 'Unique Claim Count' as unique_check_desc\n      , 3 as table_order\n    from tuva.input_layer.medical_claim\n\n    union all\n\n    select \n        'input_layer' as source\n      , 'pharmacy_claim' as table_name\n      , count(*) as row_count\n      , count(distinct claim_id) as unique_check\n      , 'Unique Claim Count' as unique_check_desc\n      , 6 as table_order\n    from tuva.input_layer.pharmacy_claim\n\n    union all\n\n    select \n        'raw_data' as source\n      , 'pharmacy_claim' as table_name\n      , null as row_count\n      , null as unique_check\n      , 'Unique Claim Count' as unique_check_desc\n      , 5 as table_order\n    from tuva.input_layer.pharmacy_claim\n)\n\nselect\n    cte.*\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom cte", "relation_name": "dev_thuxuan.data_quality.raw_summary"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:02.800434Z", "completed_at": "2024-10-01T16:33:02.813953Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:02.814957Z", "completed_at": "2024-10-01T16:33:05.167897Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.6500399112701416, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f912-0001-987f0111b56e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.medical_claim_expanded", "compiled": true, "compiled_code": "\n\n\nselect *\nfrom tuva.input_layer.medical_claim", "relation_name": "dev_thuxuan.claims_expanded.medical_claim_expanded"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:04.767671Z", "completed_at": "2024-10-01T16:33:04.775678Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:04.776679Z", "completed_at": "2024-10-01T16:33:05.689543Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.141845464706421, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d542"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.unique_core__medication_medication_id.124fd11fa1", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    medication_id as unique_field,\n    count(*) as n_records\n\nfrom dev_thuxuan.core.medication\nwhere medication_id is not null\ngroup by medication_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:05.914517Z", "completed_at": "2024-10-01T16:33:05.926528Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:05.927525Z", "completed_at": "2024-10-01T16:33:06.773821Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.9931976795196533, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d546"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.unique_core__lab_result_lab_result_id.0ee4fe47af", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    lab_result_id as unique_field,\n    count(*) as n_records\n\nfrom dev_thuxuan.core.lab_result\nwhere lab_result_id is not null\ngroup by lab_result_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:06.912713Z", "completed_at": "2024-10-01T16:33:06.918734Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:06.919719Z", "completed_at": "2024-10-01T16:33:07.897557Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1640145778656006, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f913-0001-987f0111a512"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.unique_core__observation_observation_id.ff5f21de59", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    observation_id as unique_field,\n    count(*) as n_records\n\nfrom dev_thuxuan.core.observation\nwhere observation_id is not null\ngroup by observation_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:01.925948Z", "completed_at": "2024-10-01T16:33:01.932495Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:01.932495Z", "completed_at": "2024-10-01T16:33:11.312451Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 9.558613538742065, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f913-0001-987f0111a506"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__stg_medical_claim", "compiled": true, "compiled_code": "\n\nselect * from tuva.input_layer.medical_claim", "relation_name": "dev_thuxuan.test.data_quality__stg_medical_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:02.805457Z", "completed_at": "2024-10-01T16:33:02.819951Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:02.821952Z", "completed_at": "2024-10-01T16:33:11.721530Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 9.102232694625854, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f913-0001-987f0111a50a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__stg_medical_claim", "compiled": true, "compiled_code": "\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , rendering_tin\n    , billing_npi\n    , billing_tin\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , in_network_flag\n    , data_source\nfrom tuva.input_layer.medical_claim", "relation_name": "dev_thuxuan.test.normalized_input__stg_medical_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:01.875964Z", "completed_at": "2024-10-01T16:33:01.882461Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:01.883462Z", "completed_at": "2024-10-01T16:33:11.013021Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 11.075283765792847, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f912-0001-987f0111b56a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__stg_institutional_inpatient", "compiled": true, "compiled_code": "\n\n\n    SELECT *\n    FROM tuva.input_layer.medical_claim\n    WHERE claim_type = 'institutional'\n    AND \n  substr(bill_type_code, 1, 2)\n = '11'", "relation_name": "dev_thuxuan.test.data_quality__stg_institutional_inpatient"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:08.087280Z", "completed_at": "2024-10-01T16:33:08.107364Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:08.109358Z", "completed_at": "2024-10-01T16:33:11.395236Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 4.872481346130371, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f913-0001-987f0111a516"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__unique_value_examples", "compiled": true, "compiled_code": "\n\nSELECT * FROM dev_thuxuan.data_quality.primary_keys_condition_condition_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.primary_keys_encounter_encounter_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.primary_keys_lab_result_lab_result_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.primary_keys_location_location_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.primary_keys_medication_medication_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.primary_keys_observation_observation_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.primary_keys_patient_patient_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.primary_keys_practitioner_practitioner_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.primary_keys_procedure_procedure_id", "relation_name": "dev_thuxuan.data_quality.unique_value_examples"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:11.523721Z", "completed_at": "2024-10-01T16:33:11.556328Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:11.558326Z", "completed_at": "2024-10-01T16:33:14.717838Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 3.3422746658325195, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d54a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize", "compiled": true, "compiled_code": "\n\n\nselect distinct\n    elig.patient_id\n  , elig.patient_id || coalesce(elig.data_source,'') || coalesce(elig.payer,'') || coalesce(elig.plan,'') || coalesce(cast(elig.enrollment_start_date as TEXT),'') || coalesce(cast(elig.enrollment_end_date as TEXT),'') as patient_id_key\n  , cal_dob.full_date as normalized_birth_date\n  , cal_death.full_date as normalized_death_date\n  , cal_enroll_start.full_date as normalized_enrollment_start_date\n  , cal_enroll_end.full_date as normalized_enrollment_end_date\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.normalized_input__stg_eligibility elig\nleft join dev_thuxuan.reference_data.calendar cal_dob\n    on elig.birth_date = cal_dob.full_date\nleft join dev_thuxuan.reference_data.calendar cal_death\n    on elig.death_date = cal_death.full_date\nleft join dev_thuxuan.reference_data.calendar cal_enroll_start\n    on elig.enrollment_start_date = cal_enroll_start.full_date\nleft join dev_thuxuan.reference_data.calendar cal_enroll_end\n    on elig.enrollment_end_date = cal_enroll_end.full_date", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_eligibility_dates_normalize"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:11.924228Z", "completed_at": "2024-10-01T16:33:12.001490Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:12.004488Z", "completed_at": "2024-10-01T16:33:14.693684Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.9457929134368896, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f6d9-0001-987f01112e9e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__pharmacy_claim", "compiled": true, "compiled_code": "\n\n\nselect\n      cast(claim_id as TEXT ) as claim_id\n    , cast(claim_line_number as int ) as claim_line_number\n    , cast(patient_id as TEXT ) as patient_id\n    , cast(member_id as TEXT ) as member_id\n    , cast(payer as TEXT ) as payer\n    , cast(plan as TEXT ) as plan\n    , cast(prescribing_provider_npi as TEXT ) as prescribing_provider_id\n    , cast(coalesce(pres.provider_last_name || ', ' || pres.provider_first_name, pres.provider_organization_name) as TEXT ) as prescribing_provider_name\n    , cast(dispensing_provider_npi as TEXT ) as dispensing_provider_id\n    , cast(coalesce(disp.provider_last_name || ', ' || disp.provider_first_name, disp.provider_organization_name) as TEXT ) as dispensing_provider_name    , cast(dispensing_date as date ) as dispensing_date\n    , cast(ndc_code as TEXT ) as ndc_code\n    , cast(ndc.fda_description as TEXT ) as ndc_description\n    , cast(quantity as int ) as quantity\n    , cast(days_supply as int ) as days_supply\n    , cast(refills as int ) as refills\n    , cast(paid_date as date ) as paid_date\n    , cast(paid_amount as numeric(28,6) ) as paid_amount\n    , cast(allowed_amount as numeric(28,6) ) as allowed_amount\n    , cast(charge_amount as numeric(28,6) ) as charge_amount\n    , cast(coinsurance_amount as numeric(28,6) ) as coinsurance_amount\n    , cast(copayment_amount as numeric(28,6) ) as copayment_amount\n    , cast(deductible_amount as numeric(28,6) ) as deductible_amount\n    , cast(in_network_flag as int ) as in_network_flag\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-10-01 16:29:14.142894+00:00' as TEXT ) as tuva_last_run\nfrom dev_thuxuan.test.normalized_input__stg_pharmacy_claim pharm\nleft join dev_thuxuan.terminology.provider pres\n      on pharm.prescribing_provider_npi = pres.npi\nleft join dev_thuxuan.terminology.provider disp\n      on pharm.dispensing_provider_npi = disp.npi\nleft join dev_thuxuan.terminology.ndc ndc\n      on pharm.ndc_code = ndc.ndc", "relation_name": "dev_thuxuan.claims_preprocessing.normalized_input_pharmacy_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:13.211749Z", "completed_at": "2024-10-01T16:33:13.281555Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:13.286554Z", "completed_at": "2024-10-01T16:33:15.706660Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.728651285171509, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f6d9-0001-987f01112ea2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__stg_core__medication", "compiled": true, "compiled_code": "\n\nselect\n      patient_id\n    , encounter_id\n    , prescribing_date  \n    , dispensing_date\n    , source_code_type\n    , source_code\n    , ndc_code\n    , rxnorm_code\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.medication\n\n", "relation_name": "dev_thuxuan.quality_measures._stg_medication"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:13.103194Z", "completed_at": "2024-10-01T16:33:13.185679Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:13.187675Z", "completed_at": "2024-10-01T16:33:15.814045Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.9124629497528076, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f6d9-0001-987f01112ea6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__stg_core__medication", "compiled": true, "compiled_code": "\nselect\n      patient_id\n    , dispensing_date\n    , source_code\n    , source_code_type\n    , ndc_code\n    , rxnorm_code\n    , data_source\nfrom dev_thuxuan.core.medication\n\n", "relation_name": "dev_thuxuan.hcc_suspecting._stg_medication"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:05.454887Z", "completed_at": "2024-10-01T16:33:05.508052Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:05.509047Z", "completed_at": "2024-10-01T16:33:16.775566Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 11.490240573883057, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f913-0001-987f0111a50e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__data_quality_clinical_detail", "compiled": true, "compiled_code": "\n\nWITH CTE as (\nSELECT * FROM dev_thuxuan.data_quality.condition_claim_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.condition_condition_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.condition_condition_rank\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.condition_condition_type\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.condition_data_source\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.condition_encounter_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.condition_normalized_code_type\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.condition_normalized_code\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.condition_normalized_description\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.condition_onset_date\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.condition_patient_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.condition_present_on_admit_code\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.condition_present_on_admit_description\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.condition_recorded_date\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.condition_resolved_date\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.condition_source_code\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.condition_source_code_type\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.condition_source_description\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.condition_status\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.encounter_admit_source_code\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.encounter_admit_source_description\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.encounter_admit_type_code\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.encounter_admit_type_description\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.encounter_allowed_amount\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.encounter_apr_drg_code\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.encounter_apr_drg_description\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.encounter_attending_provider_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.encounter_charge_amount\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.encounter_data_source\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.encounter_discharge_disposition_code\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.encounter_discharge_disposition_description\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.encounter_encounter_end_date\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.encounter_encounter_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.encounter_encounter_start_date\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.encounter_encounter_type\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.encounter_facility_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.encounter_length_of_stay\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.encounter_ms_drg_code\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.encounter_ms_drg_description\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.encounter_paid_amount\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.encounter_patient_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.encounter_primary_diagnosis_code\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.encounter_primary_diagnosis_code_type\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.encounter_primary_diagnosis_description\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.practitioner_practice_affiliation\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.practitioner_sub_specialty\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.practitioner_last_name\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.practitioner_practitioner_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.practitioner_data_source\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.practitioner_npi\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.practitioner_first_name\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.practitioner_specialty\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.location_parent_organization\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.location_latitude\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.location_facility_type\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.location_zip_code\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.location_data_source\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.location_city\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.location_npi\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.location_location_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.location_longitude\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.location_address\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.location_state\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.location_name\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.procedure_normalized_code_type\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.procedure_normalized_description\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.procedure_procedure_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.procedure_claim_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.procedure_source_code\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.procedure_source_code_type\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.procedure_source_description\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.procedure_practitioner_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.procedure_data_source\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.procedure_patient_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.procedure_procedure_date\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.procedure_encounter_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.procedure_modifier_5\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.procedure_modifier_4\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.procedure_normalized_code\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.procedure_modifier_1\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.procedure_modifier_3\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.procedure_modifier_2\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.lab_result_source_abnormal_flag\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.lab_result_specimen\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.lab_result_source_reference_range_low\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.lab_result_source_units\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.lab_result_lab_result_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.lab_result_collection_date\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.lab_result_normalized_component\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.lab_result_ordering_practitioner_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.lab_result_result\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.lab_result_source_code_type\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.lab_result_normalized_description\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.lab_result_normalized_reference_range_low\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.lab_result_normalized_reference_range_high\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.lab_result_normalized_code\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.lab_result_source_description\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.lab_result_status\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.lab_result_accession_number\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.lab_result_result_date\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.lab_result_normalized_abnormal_flag\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.lab_result_data_source\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.lab_result_normalized_units\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.lab_result_normalized_code_type\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.lab_result_source_reference_range_high\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.lab_result_source_code\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.lab_result_patient_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.lab_result_source_component\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.lab_result_encounter_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.patient_sex\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.patient_state\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.patient_city\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.patient_longitude\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.patient_county\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.patient_race\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.patient_death_flag\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.patient_address\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.patient_data_source\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.patient_zip_code\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.patient_first_name\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.patient_last_name\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.patient_latitude\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.patient_birth_date\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.patient_death_date\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.patient_patient_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.medication_rxnorm_code\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.medication_source_code\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.medication_atc_code\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.medication_dispensing_date\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.medication_prescribing_date\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.medication_days_supply\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.medication_strength\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.medication_patient_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.medication_rxnorm_description\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.medication_encounter_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.medication_data_source\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.medication_atc_description\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.medication_quantity_unit\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.medication_source_description\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.medication_ndc_code\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.medication_medication_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.medication_source_code_type\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.medication_ndc_description\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.medication_quantity\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.medication_practitioner_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.medication_route\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.observation_source_code\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.observation_normalized_reference_range_high\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.observation_source_units\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.observation_observation_type\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.observation_normalized_code\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.observation_normalized_description\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.observation_data_source\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.observation_panel_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.observation_observation_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.observation_source_reference_range_low\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.observation_result\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.observation_source_code_type\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.observation_normalized_reference_range_low\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.observation_observation_date\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.observation_encounter_id\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.observation_source_description\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.observation_source_reference_range_high\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.observation_normalized_units\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.observation_normalized_code_type\n\nunion all\n\nSELECT * FROM dev_thuxuan.data_quality.observation_patient_id\n\n)\n\nSELECT\n    data_source,\n    cast(source_date as TEXT) as source_date,\n    table_name,\n    drill_down_key,\n    drill_down_value,\n    field_name,\n    bucket_name,\n    invalid_reason,\n    field_value,\n    tuva_last_run,\n    dense_rank() over (order by data_source, table_name, field_name) + 100000 as summary_sk\nFROM CTE", "relation_name": "dev_thuxuan.data_quality.data_quality_clinical_detail"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:14.954845Z", "completed_at": "2024-10-01T16:33:15.045620Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:15.047646Z", "completed_at": "2024-10-01T16:33:17.400877Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.6042184829711914, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d54e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__stg_core__lab_result", "compiled": true, "compiled_code": "\n\nselect\n      patient_id\n    , result\n    , result_date\n    , collection_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.lab_result\n\n", "relation_name": "dev_thuxuan.quality_measures._stg_lab_result"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:14.893583Z", "completed_at": "2024-10-01T16:33:14.952845Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:15.002504Z", "completed_at": "2024-10-01T16:33:17.740874Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 3.0213699340820312, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d552"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__stg_core__lab_result", "compiled": true, "compiled_code": "\n\nselect\n      lab_result_id\n    , patient_id\n    , lower(coalesce(normalized_code_type,source_code_type)) as code_type\n    , coalesce(normalized_code,source_code) as code\n    , status\n    , result\n    , result_date\n    , data_source\nfrom dev_thuxuan.core.lab_result\n\n", "relation_name": "dev_thuxuan.hcc_suspecting._stg_lab_result"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:15.963517Z", "completed_at": "2024-10-01T16:33:16.004625Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:16.009626Z", "completed_at": "2024-10-01T16:33:18.693581Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.9532382488250732, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f913-0001-987f0111a51a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__stg_core__observation", "compiled": true, "compiled_code": "\n\nselect\n      patient_id\n    , observation_date\n    , result\n    , lower(coalesce(normalized_code_type,source_code_type)) as code_type\n    , coalesce(normalized_code,source_code) as code\n    , data_source\nfrom dev_thuxuan.core.observation\n\n", "relation_name": "dev_thuxuan.hcc_suspecting._stg_observation"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:16.058778Z", "completed_at": "2024-10-01T16:33:16.116999Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:16.118999Z", "completed_at": "2024-10-01T16:33:19.170600Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.2764158248901367, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f912-0001-987f0111b572"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__stg_core__observation", "compiled": true, "compiled_code": "\n\nselect\n      patient_id\n    , encounter_id\n    , observation_date\n    , result\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , normalized_description\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.observation\n\n", "relation_name": "dev_thuxuan.quality_measures._stg_observation"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:17.288476Z", "completed_at": "2024-10-01T16:33:17.315586Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:17.317589Z", "completed_at": "2024-10-01T16:33:20.148165Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.9949707984924316, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f913-0001-987f0111a51e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_admit_source_voting", "compiled": true, "compiled_code": "\n\n\n\nwith normalize_cte as(\n    select \n        med.claim_id\n        , med.data_source\n        , admit.admit_source_code\n\n        , admit.admit_source_description\n    from dev_thuxuan.test.normalized_input__stg_medical_claim med\n    inner join dev_thuxuan.terminology.admit_source admit\n        on med.admit_source_code = admit.admit_source_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , admit_source_code\n        , admit_source_description\n        , count(*) as admit_source_occurrence_count\n    from normalize_cte\n    where admit_source_code is not null\n    group by \n        claim_id\n        , data_source\n        , admit_source_code\n        , admit_source_description\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'admit_source_code' as column_name\n        , admit_source_code as normalized_code\n        , admit_source_description as normalized_description\n        , admit_source_occurrence_count as occurrence_count\n        , coalesce(lead(admit_source_occurrence_count) \n            over (partition by claim_id, data_source order by admit_source_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by admit_source_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , normalized_description\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom occurence_comparison", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_admit_source_voting"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:17.580917Z", "completed_at": "2024-10-01T16:33:17.606485Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:17.608483Z", "completed_at": "2024-10-01T16:33:20.425493Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.0443615913391113, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f6d9-0001-987f01112eaa"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_admit_type_voting", "compiled": true, "compiled_code": "\n\n\nwith normalize_cte as(\n    select \n        med.claim_id\n        , med.data_source\n        , admit.admit_type_code\n        , admit.admit_type_description\n    from dev_thuxuan.test.normalized_input__stg_medical_claim med\n    inner join dev_thuxuan.terminology.admit_type admit\n        on med.admit_type_code = admit.admit_type_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , admit_type_code\n        , admit_type_description\n        , count(*) as admit_type_occurrence_count\n    from normalize_cte\n\n    where admit_type_code is not null\n    group by \n        claim_id\n        , data_source\n        , admit_type_code\n        , admit_type_description\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'admit_type_code' as column_name\n        , admit_type_code as normalized_code\n        , admit_type_description as normalized_description\n        , admit_type_occurrence_count as occurrence_count\n        , coalesce(lead(admit_type_occurrence_count) \n            over (partition by claim_id, data_source order by admit_type_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by admit_type_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , normalized_description\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom occurence_comparison", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_admit_type_normalize_voting"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:17.925492Z", "completed_at": "2024-10-01T16:33:17.956080Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:17.959086Z", "completed_at": "2024-10-01T16:33:20.641269Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.8978190422058105, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f6d9-0001-987f01112eae"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_apr_drg_voting", "compiled": true, "compiled_code": "\n\n\nwith normalize_cte as(\n\n    select \n        med.claim_id\n        , med.data_source\n        , apr.apr_drg_code\n        , apr.apr_drg_description\n    from dev_thuxuan.test.normalized_input__stg_medical_claim med\n    inner join dev_thuxuan.terminology.apr_drg apr\n        on med.apr_drg_code = apr.apr_drg_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , apr_drg_code\n        , apr_drg_description\n        , count(*) as apr_drg_occurrence_count\n    from normalize_cte\n    where apr_drg_code is not null\n    group by \n        claim_id\n        , data_source\n        , apr_drg_code\n        , apr_drg_description\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'apr_drg_code' as column_name\n        , apr_drg_code as normalized_code\n        , apr_drg_description as normalized_description\n        , apr_drg_occurrence_count as occurrence_count\n        , coalesce(lead(apr_drg_occurrence_count) \n            over (partition by claim_id, data_source order by apr_drg_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by apr_drg_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , normalized_description\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom occurence_comparison", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_apr_drg_voting"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:18.930796Z", "completed_at": "2024-10-01T16:33:18.956897Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:18.959895Z", "completed_at": "2024-10-01T16:33:21.708169Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.9716107845306396, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f912-0001-987f0111b576"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_bill_type_voting", "compiled": true, "compiled_code": "\n\n\nwith normalize_cte as(\n    select \n        med.claim_id\n        , med.data_source\n        , bill.bill_type_code\n        , bill.bill_type_description\n    from dev_thuxuan.test.normalized_input__stg_medical_claim med\n    inner join dev_thuxuan.terminology.bill_type bill\n        on ltrim(med.bill_type_code, '0') = bill.bill_type_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , bill_type_code\n        , bill_type_description\n        , count(*) as bill_type_occurrence_count\n    from normalize_cte\n    where bill_type_code is not null\n    group by \n        claim_id\n        , data_source\n        , bill_type_code\n        , bill_type_description\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'bill_type_code' as column_name\n        , bill_type_code as normalized_code\n        , bill_type_description as normalized_description\n        , bill_type_occurrence_count as occurrence_count\n        , coalesce(lead(bill_type_occurrence_count) \n            over (partition by claim_id, data_source order by bill_type_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by bill_type_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , normalized_description\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom occurence_comparison", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_bill_type_voting"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:19.366865Z", "completed_at": "2024-10-01T16:33:19.410047Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:19.412051Z", "completed_at": "2024-10-01T16:33:23.111979Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.956040382385254, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d556"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_diagnosis_code_normalize", "compiled": true, "compiled_code": "\n\n\nwith pivot_diagnosis as(\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_1'  as diagnosis_column\n        ,  diagnosis_code_1  as diagnosis_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_2'  as diagnosis_column\n        ,  diagnosis_code_2  as diagnosis_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_3'  as diagnosis_column\n        ,  diagnosis_code_3  as diagnosis_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_4'  as diagnosis_column\n        ,  diagnosis_code_4  as diagnosis_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_5'  as diagnosis_column\n        ,  diagnosis_code_5  as diagnosis_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_6'  as diagnosis_column\n        ,  diagnosis_code_6  as diagnosis_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_7'  as diagnosis_column\n        ,  diagnosis_code_7  as diagnosis_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_8'  as diagnosis_column\n        ,  diagnosis_code_8  as diagnosis_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_9'  as diagnosis_column\n        ,  diagnosis_code_9  as diagnosis_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_10'  as diagnosis_column\n        ,  diagnosis_code_10  as diagnosis_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_11'  as diagnosis_column\n        ,  diagnosis_code_11  as diagnosis_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_12'  as diagnosis_column\n        ,  diagnosis_code_12  as diagnosis_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_13'  as diagnosis_column\n        ,  diagnosis_code_13  as diagnosis_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_14'  as diagnosis_column\n        ,  diagnosis_code_14  as diagnosis_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_15'  as diagnosis_column\n        ,  diagnosis_code_15  as diagnosis_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_16'  as diagnosis_column\n        ,  diagnosis_code_16  as diagnosis_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_17'  as diagnosis_column\n        ,  diagnosis_code_17  as diagnosis_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_18'  as diagnosis_column\n        ,  diagnosis_code_18  as diagnosis_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_19'  as diagnosis_column\n        ,  diagnosis_code_19  as diagnosis_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_20'  as diagnosis_column\n        ,  diagnosis_code_20  as diagnosis_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_21'  as diagnosis_column\n        ,  diagnosis_code_21  as diagnosis_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_22'  as diagnosis_column\n        ,  diagnosis_code_22  as diagnosis_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_23'  as diagnosis_column\n        ,  diagnosis_code_24  as diagnosis_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_24'  as diagnosis_column\n        ,  diagnosis_code_24  as diagnosis_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_25'  as diagnosis_column\n        ,  diagnosis_code_25  as diagnosis_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n)\n\nselect\n    claim_id\n    , data_source\n    , diagnosis_code_type\n    , diagnosis_column\n    , coalesce(icd_9.icd_9_cm,icd_10.icd_10_cm) as normalized_diagnosis_code\n    , count(*) as diagnosis_code_occurrence_count\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom pivot_diagnosis piv\nleft join dev_thuxuan.terminology.icd_10_cm icd_10\n    on replace(piv.diagnosis_code,'.','') = icd_10.icd_10_cm\n    and piv.diagnosis_code_type = 'icd-10-cm'\nleft join dev_thuxuan.terminology.icd_9_cm icd_9\n    on replace(piv.diagnosis_code,'.','') = icd_9.icd_9_cm\n    and piv.diagnosis_code_type = 'icd-9-cm'\nwhere claim_type <> 'undetermined'\ngroup by \n    claim_id\n    , data_source\n    , diagnosis_code_type\n    , diagnosis_column\n    , coalesce(icd_9.icd_9_cm,icd_10.icd_10_cm)", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_diagnosis_code_normalize"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:20.312046Z", "completed_at": "2024-10-01T16:33:20.340173Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:20.341709Z", "completed_at": "2024-10-01T16:33:23.454690Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 3.298586368560791, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f6d9-0001-987f01112eb2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_discharge_disposition_voting", "compiled": true, "compiled_code": "\n\n\nwith normalize_cte as(\n    select \n        med.claim_id\n        , med.data_source\n        , disch.discharge_disposition_code\n        , disch.discharge_disposition_description\n    from dev_thuxuan.test.normalized_input__stg_medical_claim med\n    inner join dev_thuxuan.terminology.discharge_disposition disch\n        on med.discharge_disposition_code = disch.discharge_disposition_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , discharge_disposition_code\n        , discharge_disposition_description\n        , count(*) as discharge_disposition_occurrence_count\n    from normalize_cte\n    where discharge_disposition_code is not null\n    group by \n        claim_id\n        , data_source\n        , discharge_disposition_code\n        , discharge_disposition_description\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'discharge_disposition_code' as column_name\n        , discharge_disposition_code as normalized_code\n        , discharge_disposition_description as normalized_description\n        , discharge_disposition_occurrence_count as occurrence_count\n        , coalesce(lead(discharge_disposition_occurrence_count) \n            over (partition by claim_id, data_source order by discharge_disposition_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by discharge_disposition_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , normalized_description\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom occurence_comparison", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_discharge_disposition_voting"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:20.727007Z", "completed_at": "2024-10-01T16:33:20.770697Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:20.772695Z", "completed_at": "2024-10-01T16:33:23.682897Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.1229264736175537, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f7c5-0001-987f0110bd4e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize", "compiled": true, "compiled_code": "\n\n\nselect distinct\n  med.claim_id\n  , med.claim_line_number\n  , med.claim_type\n  , med.data_source\n  , cal_claim_start.full_date as normalized_claim_start_date\n  , cal_claim_end.full_date as normalized_claim_end_date\n  , cal_claim_line_start.full_date as normalized_claim_line_start_date\n  , cal_claim_line_end.full_date as normalized_claim_line_end_date\n  , cal_admission.full_date as normalized_admission_date\n  , cal_discharge.full_date as normalized_discharge_date\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.normalized_input__stg_medical_claim med\nleft join dev_thuxuan.reference_data.calendar cal_claim_start\n    on med.claim_start_date = cal_claim_start.full_date\nleft join dev_thuxuan.reference_data.calendar cal_claim_end\n    on med.claim_end_date = cal_claim_end.full_date\nleft join dev_thuxuan.reference_data.calendar cal_claim_line_start\n    on med.claim_line_start_date = cal_claim_line_start.full_date\nleft join dev_thuxuan.reference_data.calendar cal_claim_line_end\n    on med.claim_line_end_date = cal_claim_line_end.full_date\nleft join dev_thuxuan.reference_data.calendar cal_admission\n    on med.admission_date = cal_admission.full_date\nleft join dev_thuxuan.reference_data.calendar cal_discharge\n    on med.discharge_date = cal_discharge.full_date", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_medical_claim_date_normalize"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:20.867027Z", "completed_at": "2024-10-01T16:33:20.906142Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:20.909140Z", "completed_at": "2024-10-01T16:33:23.675295Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 3.0461273193359375, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d55a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_medical_npi_normalize", "compiled": true, "compiled_code": "\n\n\nselect distinct\n  med.claim_id\n  , med.claim_line_number\n  , med.claim_type\n  , med.data_source\n  , rend_prov.npi as normalized_rendering_npi\n  , cast(coalesce(rend_prov.provider_last_name || ', ' || rend_prov.provider_first_name, rend_prov.provider_organization_name) as TEXT ) as normalized_rendering_name\n  , bill_prov.npi as normalized_billing_npi\n  , cast(coalesce(bill_prov.provider_last_name || ', ' || bill_prov.provider_first_name, bill_prov.provider_organization_name) as TEXT ) as normalized_billing_name\n  , fac_prov.npi as normalized_facility_npi\n  , cast(coalesce(fac_prov.provider_last_name || ', ' || fac_prov.provider_first_name, fac_prov.provider_organization_name) as TEXT ) as normalized_facility_name\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.normalized_input__stg_medical_claim med\nleft join dev_thuxuan.terminology.provider rend_prov\n    on med.rendering_npi = rend_prov.npi\n    and rend_prov.entity_type_description = 'Individual'\nleft join dev_thuxuan.terminology.provider bill_prov\n    on med.billing_npi = bill_prov.npi\nleft join dev_thuxuan.terminology.provider fac_prov\n    on med.facility_npi = fac_prov.npi\n    and fac_prov.entity_type_description = 'Organization'\n    and med.claim_type = 'institutional'", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_medical_npi_normalize"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:21.918409Z", "completed_at": "2024-10-01T16:33:21.945497Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:21.948043Z", "completed_at": "2024-10-01T16:33:24.246212Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.4816150665283203, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f912-0001-987f0111b57a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_ms_drg_voting", "compiled": true, "compiled_code": "\n\n\nwith normalize_cte as(\n    select \n        med.claim_id\n        , med.data_source\n        , ms.ms_drg_code\n        , ms.ms_drg_description\n    from dev_thuxuan.test.normalized_input__stg_medical_claim med\n    inner join dev_thuxuan.terminology.ms_drg ms\n        on med.ms_drg_code = ms.ms_drg_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , ms_drg_code\n        , ms_drg_description\n        , count(*) as ms_drg_occurrence_count\n    from normalize_cte\n    where ms_drg_code is not null\n    group by \n        claim_id\n        , data_source\n        , ms_drg_code\n        , ms_drg_description\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'ms_drg_code' as column_name\n        , ms_drg_code as normalized_code\n        , ms_drg_description as normalized_description\n        , ms_drg_occurrence_count as occurrence_count\n        , coalesce(lead(ms_drg_occurrence_count) \n            over (partition by claim_id, data_source order by ms_drg_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by ms_drg_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , normalized_description\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom occurence_comparison", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_ms_drg_voting"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:23.342431Z", "completed_at": "2024-10-01T16:33:23.363017Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:23.365028Z", "completed_at": "2024-10-01T16:33:26.163378Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.0256497859954834, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f913-0001-987f0111a522"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_place_of_service_normalize", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , claim_line_number\n    , data_source\n    , pos.place_of_service_code as normalized_code\n    , pos.place_of_service_description as normalized_description\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.normalized_input__stg_medical_claim med\nleft join dev_thuxuan.terminology.place_of_service pos\n    \n        on lpad(med.place_of_service_code, 2, '0') = pos.place_of_service_code\n    \nwhere claim_type = 'professional'", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_place_of_service_normalize"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:23.622181Z", "completed_at": "2024-10-01T16:33:23.699453Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:23.701449Z", "completed_at": "2024-10-01T16:33:26.983983Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 3.519216537475586, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f7c5-0001-987f0110bd52"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_present_on_admit_normalize", "compiled": true, "compiled_code": "\n\n\nwith pivot_poa as(\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_1'  as diagnosis_column\n        ,  diagnosis_poa_1  as present_on_admit_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_2'  as diagnosis_column\n        ,  diagnosis_poa_2  as present_on_admit_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_3'  as diagnosis_column\n        ,  diagnosis_poa_3  as present_on_admit_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_4'  as diagnosis_column\n        ,  diagnosis_poa_4  as present_on_admit_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_5'  as diagnosis_column\n        ,  diagnosis_poa_5  as present_on_admit_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_6'  as diagnosis_column\n        ,  diagnosis_poa_6  as present_on_admit_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_7'  as diagnosis_column\n        ,  diagnosis_poa_7  as present_on_admit_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_8'  as diagnosis_column\n        ,  diagnosis_poa_8  as present_on_admit_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_9'  as diagnosis_column\n        ,  diagnosis_poa_9  as present_on_admit_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_10'  as diagnosis_column\n        ,  diagnosis_poa_10  as present_on_admit_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_11'  as diagnosis_column\n        ,  diagnosis_poa_11  as present_on_admit_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_12'  as diagnosis_column\n        ,  diagnosis_poa_12  as present_on_admit_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_13'  as diagnosis_column\n        ,  diagnosis_poa_13  as present_on_admit_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_14'  as diagnosis_column\n        ,  diagnosis_poa_14  as present_on_admit_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_15'  as diagnosis_column\n        ,  diagnosis_poa_15  as present_on_admit_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_16'  as diagnosis_column\n        ,  diagnosis_poa_16  as present_on_admit_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_17'  as diagnosis_column\n        ,  diagnosis_poa_17  as present_on_admit_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_18'  as diagnosis_column\n        ,  diagnosis_poa_18  as present_on_admit_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_19'  as diagnosis_column\n        ,  diagnosis_poa_19  as present_on_admit_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_20'  as diagnosis_column\n        ,  diagnosis_poa_20  as present_on_admit_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_21'  as diagnosis_column\n        ,  diagnosis_poa_21  as present_on_admit_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_22'  as diagnosis_column\n        ,  diagnosis_poa_22  as present_on_admit_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_23'  as diagnosis_column\n        ,  diagnosis_poa_24  as present_on_admit_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_24'  as diagnosis_column\n        ,  diagnosis_poa_24  as present_on_admit_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_25'  as diagnosis_column\n        ,  diagnosis_poa_25  as present_on_admit_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n)\n\nselect\n    claim_id\n    , data_source\n    , diagnosis_column\n    , poa.present_on_admit_code as normalized_present_on_admit_code\n    , count(*) as present_on_admit_occurrence_count\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom pivot_poa piv\nleft join dev_thuxuan.terminology.present_on_admission poa\n    on replace(piv.present_on_admit_code,'.','') = poa.present_on_admit_code\nwhere claim_type = 'institutional'\ngroup by \n    claim_id\n    , data_source\n    , diagnosis_column\n    , poa.present_on_admit_code", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_present_on_admit_normalize"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:24.415564Z", "completed_at": "2024-10-01T16:33:24.438104Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:24.440104Z", "completed_at": "2024-10-01T16:33:27.027106Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.8466389179229736, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f913-0001-987f0111a526"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_revenue_center_normalize", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , claim_line_number\n    , data_source\n    , rev.revenue_center_code as normalized_code\n    , rev.revenue_center_description as normalized_description\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.normalized_input__stg_medical_claim med\nleft join dev_thuxuan.terminology.revenue_center rev\n    \n        on lpad(med.revenue_center_code, 4, '0') = rev.revenue_center_code\n    \nwhere claim_type = 'institutional'", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_revenue_center_normalize"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:23.958263Z", "completed_at": "2024-10-01T16:33:23.998568Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:24.000567Z", "completed_at": "2024-10-01T16:33:27.331348Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 3.4959940910339355, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f6d9-0001-987f01112eb6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_procedure_date_normalize", "compiled": true, "compiled_code": "\n\n\nwith pivot_procedure as(\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_1'  as procedure_column\n        ,  procedure_date_1  as procedure_date\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_2'  as procedure_column\n        ,  procedure_date_2  as procedure_date\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_3'  as procedure_column\n        ,  procedure_date_3  as procedure_date\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_4'  as procedure_column\n        ,  procedure_date_4  as procedure_date\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_5'  as procedure_column\n        ,  procedure_date_5  as procedure_date\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_6'  as procedure_column\n        ,  procedure_date_6  as procedure_date\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_7'  as procedure_column\n        ,  procedure_date_7  as procedure_date\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_8'  as procedure_column\n        ,  procedure_date_8  as procedure_date\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_9'  as procedure_column\n        ,  procedure_date_9  as procedure_date\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_10'  as procedure_column\n        ,  procedure_date_10  as procedure_date\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_11'  as procedure_column\n        ,  procedure_date_11  as procedure_date\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_12'  as procedure_column\n        ,  procedure_date_12  as procedure_date\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_13'  as procedure_column\n        ,  procedure_date_13  as procedure_date\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_14'  as procedure_column\n        ,  procedure_date_14  as procedure_date\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_15'  as procedure_column\n        ,  procedure_date_15  as procedure_date\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_16'  as procedure_column\n        ,  procedure_date_16  as procedure_date\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_17'  as procedure_column\n        ,  procedure_date_17  as procedure_date\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_18'  as procedure_column\n        ,  procedure_date_18  as procedure_date\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_19'  as procedure_column\n        ,  procedure_date_19  as procedure_date\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_20'  as procedure_column\n        ,  procedure_date_20  as procedure_date\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_21'  as procedure_column\n        ,  procedure_date_21  as procedure_date\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_22'  as procedure_column\n        ,  procedure_date_22  as procedure_date\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_23'  as procedure_column\n        ,  procedure_date_24  as procedure_date\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_24'  as procedure_column\n        ,  procedure_date_24  as procedure_date\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_25'  as procedure_column\n        ,  procedure_date_25  as procedure_date\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n)\n\nselect\n    claim_id\n    , data_source\n    , procedure_column\n    , cal.full_date as procedure_date\n    , count(*) as procedure_date_occurrence_count\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom pivot_procedure piv\nleft join dev_thuxuan.reference_data.calendar cal\n    on piv.procedure_date = cal.full_date\nwhere claim_type = 'institutional'\ngroup by \n    claim_id\n    , data_source\n    , procedure_column\n    , cal.full_date", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_procedure_date_normalize"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:23.861994Z", "completed_at": "2024-10-01T16:33:23.908138Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:23.910139Z", "completed_at": "2024-10-01T16:33:27.460810Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.8176229000091553, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f912-0001-987f0111b57e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_procedure_code_normalize", "compiled": true, "compiled_code": "\n\n\nwith pivot_procedure as(\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_1'  as procedure_column\n        ,  procedure_code_1  as procedure_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_2'  as procedure_column\n        ,  procedure_code_2  as procedure_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_3'  as procedure_column\n        ,  procedure_code_3  as procedure_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_4'  as procedure_column\n        ,  procedure_code_4  as procedure_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_5'  as procedure_column\n        ,  procedure_code_5  as procedure_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_6'  as procedure_column\n        ,  procedure_code_6  as procedure_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_7'  as procedure_column\n        ,  procedure_code_7  as procedure_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_8'  as procedure_column\n        ,  procedure_code_8  as procedure_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_9'  as procedure_column\n        ,  procedure_code_9  as procedure_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_10'  as procedure_column\n        ,  procedure_code_10  as procedure_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_11'  as procedure_column\n        ,  procedure_code_11  as procedure_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_12'  as procedure_column\n        ,  procedure_code_12  as procedure_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_13'  as procedure_column\n        ,  procedure_code_13  as procedure_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_14'  as procedure_column\n        ,  procedure_code_14  as procedure_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_15'  as procedure_column\n        ,  procedure_code_15  as procedure_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_16'  as procedure_column\n        ,  procedure_code_16  as procedure_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_17'  as procedure_column\n        ,  procedure_code_17  as procedure_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_18'  as procedure_column\n        ,  procedure_code_18  as procedure_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_19'  as procedure_column\n        ,  procedure_code_19  as procedure_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_20'  as procedure_column\n        ,  procedure_code_20  as procedure_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_21'  as procedure_column\n        ,  procedure_code_21  as procedure_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_22'  as procedure_column\n        ,  procedure_code_22  as procedure_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_23'  as procedure_column\n        ,  procedure_code_24  as procedure_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_24'  as procedure_column\n        ,  procedure_code_24  as procedure_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_25'  as procedure_column\n        ,  procedure_code_25  as procedure_code\n    from dev_thuxuan.test.normalized_input__stg_medical_claim\n)\n\nselect\n    claim_id\n    , data_source\n    , procedure_code_type\n    , procedure_column\n    , coalesce(icd_9.icd_9_pcs,icd_10.icd_10_pcs) as normalized_procedure_code\n    , count(*) as procedure_code_occurrence_count\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom pivot_procedure piv\nleft join dev_thuxuan.terminology.icd_10_pcs icd_10\n    on replace(piv.procedure_code,'.','') = icd_10.icd_10_pcs\n    and piv.procedure_code_type = 'icd-10-pcs'\nleft join dev_thuxuan.terminology.icd_9_pcs icd_9\n    on replace(piv.procedure_code,'.','') = icd_9.icd_9_pcs\n    and piv.procedure_code_type = 'icd-9-pcs'\nwhere claim_type = 'institutional'\ngroup by \n    claim_id\n    , data_source\n    , procedure_code_type\n    , procedure_column\n    , coalesce(icd_9.icd_9_pcs,icd_10.icd_10_pcs)", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_procedure_code_normalize"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:26.372085Z", "completed_at": "2024-10-01T16:33:26.386602Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:26.387602Z", "completed_at": "2024-10-01T16:33:28.691484Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.4448318481445312, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f7c5-0001-987f0110bd56"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_undetermined_claim_type", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , ad_src.admit_source_code\n    , ad_src.admit_source_description\n    , ad_type.admit_type_code\n    , ad_type.admit_type_description\n    , dis.discharge_disposition_code\n    , dis.discharge_disposition_description\n    , pos.place_of_service_code\n    , pos.place_of_service_description\n    , tob.bill_type_code\n    , tob.bill_type_description\n    , msdrg.ms_drg_code\n    , msdrg.ms_drg_description\n    , aprdrg.apr_drg_code\n    , aprdrg.apr_drg_description\n    , rev.revenue_center_code\n    , rev.revenue_center_description\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , rendnpi.npi as rendering_name\n    , billing_npi\n    , billnpi.npi as billing_name\n    , facility_npi\n    , facnpi.npi as facility_name\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.normalized_input__stg_medical_claim med\nleft join dev_thuxuan.terminology.admit_source ad_src\n    on med.admit_source_code = ad_src.admit_source_code\nleft join dev_thuxuan.terminology.admit_type ad_type\n    on med.admit_type_code = ad_type.admit_type_code\nleft join dev_thuxuan.terminology.discharge_disposition dis\n    on med.discharge_disposition_code = dis.discharge_disposition_code\nleft join dev_thuxuan.terminology.place_of_service pos\n    on med.place_of_service_code = pos.place_of_service_code\nleft join dev_thuxuan.terminology.bill_type tob\n    on med.bill_type_code = tob.bill_type_code\nleft join dev_thuxuan.terminology.ms_drg msdrg\n    on med.ms_drg_code = msdrg.ms_drg_code\nleft join dev_thuxuan.terminology.apr_drg aprdrg\n    on med.apr_drg_code = aprdrg.apr_drg_code\nleft join dev_thuxuan.terminology.revenue_center rev\n    on med.revenue_center_code = rev.revenue_center_code\nleft join dev_thuxuan.terminology.provider rendnpi\n    on med.rendering_npi = rendnpi.npi\nleft join dev_thuxuan.terminology.provider billnpi\n    on med.billing_npi = billnpi.npi\nleft join dev_thuxuan.terminology.provider facnpi\n    on med.facility_npi = facnpi.npi\nwhere claim_type in ('undetermined')", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_undetermined_claim_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:27.144397Z", "completed_at": "2024-10-01T16:33:27.159039Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:27.160023Z", "completed_at": "2024-10-01T16:33:29.235664Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.300243377685547, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f912-0001-987f0111b582"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_admission_date", "compiled": true, "compiled_code": "\n\nwith base as (\nselect *\nfrom dev_thuxuan.test.data_quality__stg_institutional_inpatient\n)\n, tuva_last_run as(\n\n    select cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) as tuva_last_run\n\n)\n,unique_field as (\n    select distinct claim_id\n        ,cast(admission_date as TEXT) as field\n        ,data_source\n    from base\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n)\nselect distinct -- to bring to claim_id grain\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,'institutional' AS claim_type\n    ,'ADMISSION_DATE' AS field_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.admission_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'invalid'\n        when m.admission_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'invalid'\n        when m.admission_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.admission_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'future'\n        when m.admission_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'too old'\n        else null\n    end as invalid_reason\n    ,cast(substring(agg.field_aggregated, 1, 255) as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source\ncross join tuva_last_run cte", "relation_name": "dev_thuxuan.data_quality.institutional_admission_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:27.266744Z", "completed_at": "2024-10-01T16:33:27.277743Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:27.282209Z", "completed_at": "2024-10-01T16:33:29.361886Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.2444612979888916, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d55e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_admit_source_code", "compiled": true, "compiled_code": "\n\nwith base as (\nselect *\nfrom dev_thuxuan.test.data_quality__stg_institutional_inpatient\n),\n\nunique_field as (\n    select distinct claim_id\n        , base.admit_source_code || '|' || coalesce(term.admit_source_description, '') as field\n        , data_source\n    from base\n    left join dev_thuxuan.terminology.admit_source as term on base.admit_source_code = term.admit_source_code\n),\n\nclaim_grain as (\n    select claim_id\n        , data_source\n        , count(*) as frequency\n    from unique_field\n    group by claim_id\n        , data_source\n),\n\nclaim_agg as (\nselect\n      claim_id\n    , data_source\n    , \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n      claim_id\n    , data_source\n)\n\nselect distinct -- to bring to claim_id grain\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID' AS drill_down_key\n    , coalesce(m.claim_id, 'NULL') AS drill_down_value\n    , 'institutional' AS claim_type\n    , 'ADMIT_SOURCE_CODE' AS field_name\n    , case when cg.frequency > 1                then 'multiple'\n          when term.admit_source_code is not null then 'valid'\n          when m.admit_source_code is not null    then 'invalid'\n                                               else 'null' end as bucket_name\n    , case\n        when m.admit_source_code is not null\n            and term.admit_source_code is null\n            and cg. frequency = 1\n            then 'Admit source code does not join to Terminology Admit Source table'\n        else null\n    end as invalid_reason\n    , cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_thuxuan.terminology.admit_source as term on m.admit_source_code = term.admit_source_code\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_thuxuan.data_quality.institutional_admit_source_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:27.466033Z", "completed_at": "2024-10-01T16:33:27.479600Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:27.481607Z", "completed_at": "2024-10-01T16:33:29.623834Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.300161123275757, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f912-0001-987f0111b586"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_admit_type_code", "compiled": true, "compiled_code": "\n\nwith base as (\nselect *\nfrom dev_thuxuan.test.data_quality__stg_institutional_inpatient\n),\n\nunique_field as (\n    select distinct claim_id\n        , base.admit_type_code || '|' || coalesce(term.admit_type_description, '') as field\n        , data_source\n    from base\n    left join dev_thuxuan.terminology.admit_type as term on base.admit_type_code = term.admit_type_code\n),\n\nclaim_grain as (\n    select claim_id\n        , data_source\n        , count(*) as frequency\n    from unique_field\n    group by claim_id\n        , data_source\n),\n\nclaim_agg as (\nselect\n      claim_id\n    , data_source\n    , \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n      claim_id\n    , data_source\n\t)\n\nselect distinct -- to bring to claim_id grain\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Member ID' AS drill_down_key\n    , coalesce(m.claim_id, 'NULL') AS drill_down_value\n    , 'institutional' AS claim_type\n    , 'ADMIT_TYPE_CODE' AS field_name\n    , case when cg.frequency > 1                then 'multiple'\n          when term.admit_type_code is not null then 'valid'\n          when m.admit_type_code is not null    then 'invalid'\n                                               else 'null' end as bucket_name\n    , case\n        when m.admit_type_code is not null\n            and term.admit_type_code is null\n            and cg.frequency = 1\n            then 'Admit Type Code does not join to Terminology Admit Type table'\n        else null\n    end as invalid_reason\n    , cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_thuxuan.terminology.admit_type as term on m.admit_type_code = term.admit_type_code\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_thuxuan.data_quality.institutional_admit_type_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:27.685630Z", "completed_at": "2024-10-01T16:33:27.702159Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:27.703158Z", "completed_at": "2024-10-01T16:33:29.625910Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.0793838500976562, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f912-0001-987f0111b58a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_apr_drg_code", "compiled": true, "compiled_code": "\n\nwith base as (\nselect *\nfrom dev_thuxuan.test.data_quality__stg_institutional_inpatient\n),\n\nunique_field as (\n    select distinct claim_id\n        , base.apr_drg_code || '|' || coalesce(term.apr_drg_description, '') as field\n        , data_source\n    from base\n    left join dev_thuxuan.terminology.apr_drg as term on base.apr_drg_code = term.apr_drg_code\n),\n\nclaim_grain as (\n    select claim_id\n        , data_source\n        , count(*) as frequency\n    from unique_field\n    group by claim_id\n        , data_source\n),\n\nclaim_agg as (\nselect\n      claim_id\n    , data_source\n    , \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n      claim_id\n    , data_source\n\t)\n\nselect distinct -- to bring to claim_id grain\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID' AS drill_down_key\n    , coalesce(m.claim_id, 'NULL') AS drill_down_value\n    , 'institutional' AS claim_type\n    , 'APR_DRG_CODE' AS field_name\n    , case when cg.frequency > 1                then 'multiple'\n          when term.apr_drg_code is not null then 'valid'\n          when m.apr_drg_code is not null    then 'invalid'\n                                               else 'null' end as bucket_name\n    , case\n        when cg.frequency = 1\n            and m.apr_drg_code is not null\n            and term.apr_drg_code is null\n            then 'APR DRG Code does not join to Terminology APR DRG table'\n        else null\n    end as invalid_reason\n    , cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_thuxuan.terminology.apr_drg as term on m.apr_drg_code = term.apr_drg_code\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_thuxuan.data_quality.institutional_apr_drg_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:28.823793Z", "completed_at": "2024-10-01T16:33:28.841226Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:28.842260Z", "completed_at": "2024-10-01T16:33:30.534451Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.8400111198425293, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f912-0001-987f0111b58e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_discharge_date", "compiled": true, "compiled_code": "\n\nwith base as (\nselect *\nfrom dev_thuxuan.test.data_quality__stg_institutional_inpatient\n)\n, tuva_last_run as(\n    select cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) as tuva_last_run\n)\n,unique_field as (\n    select distinct claim_id\n        ,cast(discharge_date as TEXT) as field\n        ,data_source\n    from base\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n)\nselect distinct -- to bring to claim_id grain\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,'institutional' AS claim_type\n    ,'DISCHARGE_DATE' AS field_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.discharge_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'invalid'\n        when m.discharge_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'invalid'\n        when m.discharge_date < m.admission_date then 'invalid'\n        when m.discharge_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.discharge_date > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'future'\n        when m.discharge_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'too old'\n        when m.discharge_date < m.admission_date then 'discharge date before admission date'\n        else null\n    end as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source\ncross join tuva_last_run cte", "relation_name": "dev_thuxuan.data_quality.institutional_discharge_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:29.452220Z", "completed_at": "2024-10-01T16:33:29.464349Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:29.465364Z", "completed_at": "2024-10-01T16:33:31.567344Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.2485928535461426, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f6d9-0001-987f01112eba"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_ms_drg_code", "compiled": true, "compiled_code": "\n\nwith base as (\nselect *\nfrom dev_thuxuan.test.data_quality__stg_institutional_inpatient\n),\n\nunique_field as (\n    select distinct claim_id\n        , base.ms_drg_code || '|' || coalesce(term.ms_drg_description, '') as field\n        , data_source\n    from base\n    left join dev_thuxuan.terminology.ms_drg as term on base.ms_drg_code = term.ms_drg_code\n),\n\nclaim_grain as (\n    select claim_id\n        , data_source\n        , count(*) as frequency\n    from unique_field\n    group by claim_id\n        , data_source\n),\n\nclaim_agg as (\nselect\n      claim_id\n    , data_source\n    , \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n      claim_id\n    , data_source\n\n)\n\nselect distinct -- to bring to claim_id grain\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID' AS drill_down_key\n    , coalesce(m.claim_id, 'NULL') AS drill_down_value\n    , 'institutional' AS claim_type\n    , 'MS_DRG_CODE' AS field_name\n    , case when cg.frequency > 1                then 'multiple'\n          when term.ms_drg_code is not null then 'valid'\n          when m.ms_drg_code is not null    then 'invalid'\n                                               else 'null' end as bucket_name\n    , case\n        when cg.frequency = 1\n            and m.ms_drg_code is not null\n            and term.ms_drg_code is null\n            then 'MS DRG does not join to Terminology MS DRG table'\n        else null\n    end as invalid_reason\n    , cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_thuxuan.terminology.ms_drg as term on m.ms_drg_code = term.ms_drg_code\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_thuxuan.data_quality.institutional_ms_drg_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:29.518747Z", "completed_at": "2024-10-01T16:33:29.528746Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:29.529798Z", "completed_at": "2024-10-01T16:33:31.616096Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.23372483253479, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f912-0001-987f0111b592"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_procedure_code_1", "compiled": true, "compiled_code": "\n\nwith base as (\nselect *\nfrom dev_thuxuan.test.data_quality__stg_institutional_inpatient\n),\n\nunique_field as (\n    select distinct claim_id\n        , procedure_code_1 || '|' || coalesce(term.description, '') as field\n        , data_source\n    from base\n    left join dev_thuxuan.terminology.icd_10_pcs as term on base.procedure_code_1 = term.icd_10_pcs\n),\n\nclaim_grain as (\n    select claim_id\n        , data_source\n        , count(*) as frequency\n    from unique_field\n    group by claim_id\n        , data_source\n),\n\nclaim_agg as (\nselect\n      claim_id\n    , data_source\n    , \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n      claim_id\n    , data_source\n\t)\n\nselect distinct -- to bring to claim_id grain\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID' AS drill_down_key\n    , coalesce(m.claim_id, 'NULL') AS drill_down_value\n    , 'institutional' AS claim_type\n    , 'PROCEDURE_CODE_1' AS field_name\n    , case when cg.frequency > 1                then 'multiple'\n          when term.icd_10_pcs is not null      then 'valid'\n          when m.procedure_code_1 is not null  then 'invalid'\n                                               else 'null' end as bucket_name\n    , case\n        when cg.frequency = 1\n            and m.procedure_code_1 is not null\n            and term.icd_10_pcs is null\n            then 'procedure code does not join to terminology procedure code table'\n        else null\n    end as invalid_reason\n    , cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_thuxuan.terminology.icd_10_pcs as term on m.procedure_code_1 = term.icd_10_pcs\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_thuxuan.data_quality.institutional_procedure_code_1"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:29.774060Z", "completed_at": "2024-10-01T16:33:29.804184Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:29.805181Z", "completed_at": "2024-10-01T16:33:31.738322Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.1215567588806152, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d562"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_procedure_code_2", "compiled": true, "compiled_code": "\n\nwith base as (\nselect *\nfrom dev_thuxuan.test.data_quality__stg_institutional_inpatient\n),\n\nunique_field as (\n    select distinct claim_id\n        , procedure_code_2 || '|' || coalesce(term.description, '') as field\n        , data_source\n    from base\n    left join dev_thuxuan.terminology.icd_10_pcs as term on base.procedure_code_1 = term.icd_10_pcs\n),\n\nclaim_grain as (\n    select claim_id\n        , data_source\n        , count(*) as frequency\n    from unique_field\n    group by claim_id\n        , data_source\n),\n\nclaim_agg as (\nselect\n      claim_id\n    , data_source\n    , \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n      claim_id\n    , data_source\n\t)\n\nselect distinct -- to bring to claim_id grain\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID' AS drill_down_key\n    , coalesce(m.claim_id, 'NULL') AS drill_down_value\n    , 'institutional' AS claim_type\n    , 'PROCEDURE_CODE_2' AS field_name\n    , case when cg.frequency > 1                then 'multiple'\n          when term.icd_10_pcs is not null      then 'valid'\n          when m.procedure_code_2 is not null  then 'invalid'\n                                               else 'null' end as bucket_name\n    , case\n        when cg.frequency = 1\n            and m.procedure_code_2 is not null\n            and term.icd_10_pcs is null\n            then 'Procedure Code does not join to Terminology Procedure Code Table'\n        else null\n    end as invalid_reason\n    , cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_thuxuan.terminology.icd_10_pcs as term on m.procedure_code_2 = term.icd_10_pcs\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_thuxuan.data_quality.institutional_procedure_code_2"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:29.785581Z", "completed_at": "2024-10-01T16:33:29.817718Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:29.818716Z", "completed_at": "2024-10-01T16:33:31.746467Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.1091339588165283, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f7c5-0001-987f0110bd5a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_procedure_code_3", "compiled": true, "compiled_code": "\n\nwith base as (\nselect *\nfrom dev_thuxuan.test.data_quality__stg_institutional_inpatient\n),\n\nunique_field as (\n    select distinct claim_id\n        , procedure_code_3 || '|' || coalesce(term.description, '') as field\n        , data_source\n    from base\n    left join dev_thuxuan.terminology.icd_10_pcs as term on base.procedure_code_3 = term.icd_10_pcs\n),\n\nclaim_grain as (\n    select claim_id\n        , data_source\n        , count(*) as frequency\n    from unique_field\n    group by claim_id\n        , data_source\n),\n\nclaim_agg as (\nselect\n      claim_id\n    , data_source\n    , \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n      claim_id\n    , data_source\n)\n\nselect distinct -- to bring to claim_id grain\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID' AS drill_down_key\n    , coalesce(m.claim_id, 'NULL') AS drill_down_value\n    , 'institutional' AS claim_type\n    , 'PROCEDURE_CODE_3' AS field_name\n    , case when cg.frequency > 1                then 'multiple'\n          when term.icd_10_pcs is not null      then 'valid'\n          when m.procedure_code_3 is not null  then 'invalid'\n                                               else 'null' end as bucket_name\n    , case\n        when cg.frequency = 1\n            and m.procedure_code_3 is not null\n            and term.icd_10_pcs is null\n            then 'Procedure Code does not join to Terminology Procedure Code Table'\n        else null\n    end as invalid_reason\n    , cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_thuxuan.terminology.icd_10_pcs as term on m.procedure_code_3 = term.icd_10_pcs\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_thuxuan.data_quality.institutional_procedure_code_3"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:30.669958Z", "completed_at": "2024-10-01T16:33:30.687801Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:30.688813Z", "completed_at": "2024-10-01T16:33:32.568501Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.1106035709381104, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f6d9-0001-987f01112ebe"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_procedure_date_1", "compiled": true, "compiled_code": "\n\nwith base as (\nselect *\nfrom dev_thuxuan.test.data_quality__stg_institutional_inpatient\n)\n, tuva_last_run as(\n    select cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) as tuva_last_run\n)\n, unique_field as (\n    select distinct claim_id\n        ,cast(procedure_date_1 as TEXT)  as field\n        ,data_source\n    from base\n\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n\t)\nselect distinct -- to bring to claim_id grain\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,'institutional' AS claim_type\n    ,'PROCEDURE_DATE_1' AS field_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.procedure_date_1 > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'invalid'\n        when m.procedure_date_1 < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'invalid'\n        when not (m.procedure_date_1 between m.claim_start_date and m.claim_end_date) then 'invalid'\n        when m.procedure_date_1 is null then 'null'\n        else 'valid'\n    end as bucket_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.procedure_date_1 > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'future'\n        when m.procedure_date_1 < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'too old'\n        when not (m.procedure_date_1 between m.claim_start_date and m.claim_end_date) then 'procedure date not between claim start and end dates'\n        else null\n        end as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source\ncross join tuva_last_run cte", "relation_name": "dev_thuxuan.data_quality.institutional_procedure_date_1"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:32.786674Z", "completed_at": "2024-10-01T16:33:32.795398Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:32.796414Z", "completed_at": "2024-10-01T16:33:33.811623Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1640069484710693, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f912-0001-987f0111b596"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom dev_thuxuan.quality_measures._stg_medication\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:31.705808Z", "completed_at": "2024-10-01T16:33:31.721029Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:31.721797Z", "completed_at": "2024-10-01T16:33:33.626873Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.0779924392700195, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f7c5-0001-987f0110bd5e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_procedure_date_2", "compiled": true, "compiled_code": "\n\nwith base as (\nselect *\nfrom dev_thuxuan.test.data_quality__stg_institutional_inpatient\n)\n, tuva_last_run as(\n\n    select cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) as tuva_last_run\n\n)\n,unique_field as (\n    select distinct claim_id\n        ,cast(procedure_date_2 as TEXT)  as field\n        ,data_source\n    from base\n\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n\t)\nselect distinct -- to bring to claim_id grain\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,'institutional' AS claim_type\n    ,'PROCEDURE_DATE_2' AS field_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.procedure_date_2 > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'invalid'\n        when m.procedure_date_2 < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'invalid'\n        when not (m.procedure_date_2 between m.claim_start_date and m.claim_end_date) then 'invalid'\n        when m.procedure_date_2 is null then 'null'\n        else 'valid'\n    end as bucket_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.procedure_date_2 > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'future'\n        when m.procedure_date_2 < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'too old'\n        when not (m.procedure_date_2 between m.claim_start_date and m.claim_end_date) then 'procedure date not between claim start and end dates'\n        when m.procedure_date_2 is null then null\n        else 'valid'\n    end as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source\ncross join tuva_last_run cte", "relation_name": "dev_thuxuan.data_quality.institutional_procedure_date_2"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:31.759490Z", "completed_at": "2024-10-01T16:33:31.774062Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:31.775043Z", "completed_at": "2024-10-01T16:33:33.841615Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.2789855003356934, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f6d9-0001-987f01112ec2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_procedure_date_3", "compiled": true, "compiled_code": "\n\nwith base as (\nselect *\nfrom dev_thuxuan.test.data_quality__stg_institutional_inpatient\n)\n, tuva_last_run as(\n\n    select cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) as tuva_last_run\n\n)\n\n,unique_field as (\n    select distinct claim_id\n        ,cast(procedure_date_3 as TEXT)  as field\n        ,data_source\n    from base\n\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n\t)\nselect distinct -- to bring to claim_id grain\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,'institutional' AS claim_type\n    ,'PROCEDURE_DATE_3' AS field_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.procedure_date_3 > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'invalid'\n        when m.procedure_date_3 < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'invalid'\n        when not (m.procedure_date_3 between m.claim_start_date and m.claim_end_date) then 'invalid'\n        when m.procedure_date_3 is null then 'null'\n        else 'valid'\n    end as bucket_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.procedure_date_3 > cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) then 'future'\n        when m.procedure_date_3 < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'too old'\n        when not (m.procedure_date_3 between m.claim_start_date and m.claim_end_date) then 'procedure date not between claim start and end dates'\n        else null\n        end as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source\ncross join tuva_last_run cte", "relation_name": "dev_thuxuan.data_quality.institutional_procedure_date_3"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:31.905301Z", "completed_at": "2024-10-01T16:33:31.940352Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:31.941430Z", "completed_at": "2024-10-01T16:33:33.835603Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.13517427444458, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d566"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__eligibility", "compiled": true, "compiled_code": "\n\n\nselect\n    cast(elig.patient_id as TEXT ) as patient_id\n    , cast(elig.member_id as TEXT ) as member_id\n    , cast(elig.subscriber_id as TEXT ) as subscriber_id\n    , cast(elig.gender as TEXT ) as gender\n    , cast(elig.race as TEXT ) as race\n    , cast(date_norm.normalized_birth_date as date ) as birth_date\n    , cast(date_norm.normalized_death_date as date ) as death_date\n    , cast(elig.death_flag as int ) as death_flag\n    , cast(date_norm.normalized_enrollment_start_date as date ) as enrollment_start_date\n    , cast(date_norm.normalized_enrollment_end_date as date ) as enrollment_end_date\n    , cast(elig.payer as TEXT ) as payer\n    , cast(elig.payer_type as TEXT ) as payer_type\n    , cast(elig.plan as TEXT ) as plan\n    , cast(elig.original_reason_entitlement_code as TEXT ) as original_reason_entitlement_code\n    , cast(elig.dual_status_code as TEXT ) as dual_status_code\n    , cast(elig.medicare_status_code as TEXT ) as medicare_status_code\n    , cast(elig.first_name as TEXT ) as first_name\n    , cast(elig.last_name as TEXT ) as last_name\n    , cast(elig.social_security_number as TEXT ) as social_security_number\n    , cast(elig.subscriber_relation as TEXT ) as subscriber_relation\n    , cast(elig.address as TEXT ) as address\n    , cast(elig.city as TEXT ) as city\n    , cast(elig.state as TEXT ) as state\n    , cast(elig.zip_code as TEXT ) as zip_code\n    , cast(elig.phone as TEXT ) as phone\n    , cast(elig.data_source as TEXT ) as data_source\n    , cast('2024-10-01 16:29:14.142894+00:00'  as TEXT ) as tuva_last_run\nfrom dev_thuxuan.test.normalized_input__stg_eligibility elig\nleft join dev_thuxuan.claims_preprocessing._int_normalized_input_eligibility_dates_normalize date_norm\n    on elig.patient_id_key = date_norm.patient_id_key", "relation_name": "dev_thuxuan.claims_preprocessing.normalized_input_eligibility"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:31.924822Z", "completed_at": "2024-10-01T16:33:31.947992Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:31.948992Z", "completed_at": "2024-10-01T16:33:33.904533Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.1978938579559326, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f6d9-0001-987f01112ec6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_pharmacy_claim", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model creates the pharmacy_claim\n-- table in core.\n-- *************************************************\n\n\n\n\nselect\n    cast(claim_id as TEXT) || '-' || cast(claim_line_number as TEXT) as pharmacy_claim_id\n       , cast(claim_id as TEXT ) as claim_id\n       , cast(claim_line_number as integer ) as claim_line_number\n       , cast(patient_id as TEXT ) as patient_id\n       , cast(member_id as TEXT ) as member_id\n       , cast(payer as TEXT ) as payer\n       , plan\n       , cast(prescribing_provider_id as TEXT ) as prescribing_provider_id\n       , cast(prescribing_provider_name as TEXT ) as prescribing_provider_name\n       , cast(dispensing_provider_id as TEXT ) as dispensing_provider_id\n       , cast(dispensing_provider_name as TEXT ) as dispensing_provider_name\n       , cast(dispensing_date as date ) as dispensing_date\n       , cast(ndc_code as TEXT ) as ndc_code\n       , cast(ndc_description as TEXT ) as ndc_description\n       , cast(quantity as integer ) as quantity\n       , cast(days_supply as integer ) as days_supply\n       , cast(refills as integer ) as refills\n       , cast(paid_date as date ) as paid_date\n       , cast(paid_amount as numeric(28,6)) as paid_amount\n       , cast(allowed_amount as numeric(28,6) ) as allowed_amount\n       , cast(charge_amount as numeric(28,6) ) as charge_amount\n       , cast(coinsurance_amount as numeric(28,6) ) as coinsurance_amount\n       , cast(copayment_amount as numeric(28,6) ) as copayment_amount\n       , cast(deductible_amount as numeric(28,6) ) as deductible_amount\n       , cast(in_network_flag as int ) as in_network_flag\n       , cast(data_source as TEXT ) as data_source\n       , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing.normalized_input_pharmacy_claim  pharm", "relation_name": "dev_thuxuan.core._stg_claims_pharmacy_claim"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:34.053005Z", "completed_at": "2024-10-01T16:33:34.070029Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:34.072034Z", "completed_at": "2024-10-01T16:33:35.405667Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.5082075595855713, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f912-0001-987f0111b59a"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom dev_thuxuan.quality_measures._stg_observation\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:34.062739Z", "completed_at": "2024-10-01T16:33:34.071031Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:34.076112Z", "completed_at": "2024-10-01T16:33:36.130958Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.3090038299560547, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f6d9-0001-987f01112eca"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_admit_source_final", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , normalized_description\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing._int_normalized_input_admit_source_voting\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_admit_source_final"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:35.567185Z", "completed_at": "2024-10-01T16:33:35.578302Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:35.580504Z", "completed_at": "2024-10-01T16:33:37.267693Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.8569800853729248, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f6d9-0001-987f01112ece"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_apr_drg_final", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , normalized_description\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing._int_normalized_input_apr_drg_voting\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_apr_drg_final"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:34.110196Z", "completed_at": "2024-10-01T16:33:34.117733Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:34.118732Z", "completed_at": "2024-10-01T16:33:37.526702Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.58414363861084, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d572"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_admit_type_final", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , normalized_description\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing._int_normalized_input_admit_type_normalize_voting\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_admit_type_final"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:34.008115Z", "completed_at": "2024-10-01T16:33:34.022835Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:34.023755Z", "completed_at": "2024-10-01T16:33:37.456632Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 3.68814754486084, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d56e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__int_prep_egfr_labs", "compiled": true, "compiled_code": "\n\nwith lab_result as (\n\n    select\n          patient_id\n        , data_source\n        , code_type\n        , code\n        , status\n        , result\n        , result_date\n    from dev_thuxuan.hcc_suspecting._stg_lab_result\n\n)\n\n, seed_egfr_codes as (\n\n    select\n          concept_name\n        , code\n        , code_system\n    from dev_thuxuan.hcc_suspecting._value_set_clinical_concepts\n    where lower(concept_name) = 'estimated glomerular filtration rate'\n\n)\n\n, egfr_labs as (\n\n    select distinct\n          lab_result.patient_id\n        , lab_result.data_source\n        , lab_result.code_type\n        , lab_result.code\n        , lab_result.result_date\n        , lab_result.result\n    from lab_result\n        inner join seed_egfr_codes\n        on lab_result.code = seed_egfr_codes.code\n        and lab_result.code_type = seed_egfr_codes.code_system\n    where lab_result.result is not null\n    and lower(lab_result.status) not in ('cancelled', 'entered-in-error')\n\n)\n\n, numeric_egfr_labs as (\n\n    select\n          patient_id\n        , data_source\n        , code_type\n        , code\n        , result_date\n        , cast(result as numeric(28,6)) as result\n    from egfr_labs\n   \n        where regexp_like(result, '^[+-]?([0-9]*[.])?[0-9]+$')\n    \n\n)\n\n, clean_non_numeric_egfr_labs as (\n\n    select\n          patient_id\n        , data_source\n        , code_type\n        , code\n        , result_date\n        , result\n        , cast(case\n            when lower(result) like '%unsatisfactory specimen%' then null\n            when result like '%>%' then null\n            when result like '%<%' then null\n            when result like '%@%' then trim(replace(result,'@',''))\n            when result like '%mL/min/1.73m2%' then trim(replace(result,'mL/min/1.73m2',''))\n            else null\n          end as numeric(28,6)) as clean_result\n    from egfr_labs\n    \n        where regexp_like(result, '^[+-]?([0-9]*[.])?[0-9]+$') = False\n    \n\n)\n\n, unioned_labs as (\n\n    select\n          patient_id\n        , data_source\n        , code_type\n        , code\n        , result_date\n        , result\n    from numeric_egfr_labs\n\n    union all\n\n    select\n          patient_id\n        , data_source\n        , code_type\n        , code\n        , result_date\n        , clean_result as result\n    from clean_non_numeric_egfr_labs\n    where clean_result is not null\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(data_source as TEXT) as data_source\n        , cast(code_type as TEXT) as code_type\n        , cast(code as TEXT) as code\n        , cast(result_date as date) as result_date\n        , cast(result as numeric(28,6)) as result\n    from unioned_labs\n\n)\n\nselect\n      patient_id\n    , data_source\n    , code_type\n    , code\n    , result_date\n    , result\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.hcc_suspecting._int_prep_egfr_labs"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:33.955690Z", "completed_at": "2024-10-01T16:33:33.977316Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:33.978314Z", "completed_at": "2024-10-01T16:33:37.568484Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.7663064002990723, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d56a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__data_quality_clinical_for_pbi", "compiled": true, "compiled_code": "\n\nWITH Ranked_Examples as (\n       SELECT\n              summary_sk,\n              data_source,\n              table_name,\n              field_name,\n              bucket_name,\n              invalid_reason,\n              drill_down_key,\n              drill_down_value as drill_down_value,\n              field_value as field_value,\n              count(drill_down_value) as frequency,\n              row_number() over (partition by summary_sk, bucket_name, field_value order by field_value) as rn\n              , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\n       FROM dev_thuxuan.data_quality.data_quality_clinical_detail\n       where bucket_name not in ('valid', 'null')\n       group by\n              data_source,\n              field_name,\n              table_name,\n              bucket_name,\n              field_value,\n              drill_down_key,\n              drill_down_value,\n              invalid_reason,\n              summary_sk\n\n),\n\npk_examples as (\n       SELECT\n              detail.summary_sk,\n              detail.data_source,\n              detail.table_name,\n              detail.field_name,\n              detail.bucket_name,\n              detail.invalid_reason,\n              detail.drill_down_key,\n              detail.drill_down_value as drill_down_value,\n              detail.field_value as field_value,\n              count(detail.drill_down_value) as frequency,\n              row_number() over (partition by detail.summary_sk order by detail.summary_sk) as rn\n              , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\n       from dev_thuxuan.data_quality.data_quality_clinical_detail as detail\n              left join dev_thuxuan.data_quality._value_set_crosswalk_field_info as field_info on detail.table_name = field_info.input_layer_table_name\n                     and detail.field_name = field_info.field_name\n       where detail.bucket_name = 'valid'\n              and field_info.unique_values_expected_flag = 1\n       GROUP BY\n              detail.data_source,\n              detail.field_name,\n              detail.table_name,\n              detail.bucket_name,\n              detail.field_value,\n              detail.drill_down_key,\n              detail.drill_down_value,\n              detail.invalid_reason,\n              detail.summary_sk\n\n)\n--- Null Values\n\nSELECT\n       summary_sk,\n       data_source,\n       table_name,\n       field_name,\n       bucket_name,\n       invalid_reason,\n       drill_down_key,\n       max(drill_down_value) as drill_down_value,\n       null as field_value,\n       count(drill_down_value) as frequency\n       , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.data_quality.data_quality_clinical_detail\nwhere bucket_name = 'null'\ngroup by\n       data_source,\n       field_name,\n       table_name,\n       bucket_name,\n       invalid_reason,\n       drill_down_key,\n       summary_sk\n\nunion all\n\n--- Valid Values except PKs\n\nSELECT\n       detail.summary_sk,\n       detail.data_source,\n       detail.table_name,\n       detail.field_name,\n       detail.bucket_name,\n       detail.invalid_reason,\n       detail.drill_down_key,\n       max(detail.drill_down_value) as drill_down_value,\n       detail.field_value as field_value,\n       count(detail.drill_down_value) as frequency\n       , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.data_quality.data_quality_clinical_detail as detail\nleft join dev_thuxuan.data_quality._value_set_crosswalk_field_info as field_info on detail.table_name = field_info.input_layer_table_name\n       and detail.field_name = field_info.field_name\nWHERE\n       detail.bucket_name = 'valid'\n       and field_info.unique_values_expected_flag = 0 --- need to handle pks differently since every value is supposed to be unique\ngroup by\n       detail.data_source,\n       detail.field_name,\n       detail.table_name,\n       detail.bucket_name,\n       detail.field_value,\n       detail.invalid_reason,\n       detail.drill_down_key,\n       detail.summary_sk\n\nunion all\n\n-- 5 Examples of each invalid example\n\nSELECT\n       summary_sk,\n       data_source,\n       table_name,\n       field_name,\n       bucket_name,\n       invalid_reason,\n       drill_down_key,\n       drill_down_value as drill_down_value,\n       field_value as field_value,\n       frequency\n       , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM Ranked_Examples\nWHERE rn <= 5\n\nunion all\n\n--- Aggregating all other invalid examples into single row\n\nSELECT\n       summary_sk,\n       data_source,\n       table_name,\n       field_name,\n       bucket_name,\n       invalid_reason,\n       drill_down_key,\n       'all others' as drill_down_value,\n       field_value as field_value,\n       sum(frequency) as frequency\n       , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM Ranked_Examples\nWHERE rn > 5 --- Aggregating all other rows\nGROUP BY\n    summary_sk,\n    data_source,\n    table_name,\n    field_name,\n    bucket_name,\n    invalid_reason,\n    drill_down_key,\n    field_value\n\nunion all\n\n--- 5 Examples of valid primary key values\n\nSELECT\n       summary_sk,\n       data_source,\n       table_name,\n       field_name,\n       bucket_name,\n       invalid_reason,\n       drill_down_key,\n       drill_down_value as drill_down_value,\n       field_value as field_value,\n       frequency\n       , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM pk_examples\nWHERE rn <= 5\n\nunion all\n\n--- Aggegating all other valid primary key value examples\n\nSELECT\n       summary_sk,\n       data_source,\n       table_name,\n       field_name,\n       bucket_name,\n       invalid_reason,\n       drill_down_key,\n       'All Others' as drill_down_value,\n       'All Others' as field_value,\n       sum(frequency) as frequency\n       , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM pk_examples\nWHERE rn > 5 --- Aggregating all other rows\nGROUP BY\n    summary_sk,\n    data_source,\n    table_name,\n    field_name,\n    bucket_name,\n    invalid_reason,\n    drill_down_key,\n    field_value", "relation_name": "dev_thuxuan.data_quality.data_quality_clinical_for_pbi"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:36.371621Z", "completed_at": "2024-10-01T16:33:36.382897Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:36.383898Z", "completed_at": "2024-10-01T16:33:37.614143Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.3741202354431152, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f7c5-0001-987f0110bd62"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_bill_type_final", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , normalized_description\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing._int_normalized_input_bill_type_voting\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_bill_type_final"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:37.433631Z", "completed_at": "2024-10-01T16:33:37.444636Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:37.445646Z", "completed_at": "2024-10-01T16:33:38.880927Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.6042885780334473, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f6d9-0001-987f01112ed2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_diagnosis_code_voting", "compiled": true, "compiled_code": "\n\nwith distinct_count as(\n    select\n        claim_id\n        , data_source\n        , diagnosis_column\n        , count(*) as distinct_count\n        , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\n    from dev_thuxuan.claims_preprocessing._int_normalized_input_diagnosis_code_normalize\n    group by\n        claim_id\n        , data_source\n        , diagnosis_column\n)\n\nselect \n    norm.claim_id\n    , norm.data_source\n    , norm.diagnosis_column as column_name\n    , norm.normalized_diagnosis_code as normalized_code\n    , norm.diagnosis_code_occurrence_count as occurrence_count\n    , coalesce(lead(diagnosis_code_occurrence_count) \n        over (partition by norm.claim_id, norm.data_source, norm.diagnosis_column order by diagnosis_code_occurrence_count desc),0) as next_occurrence_count\n    , row_number() over (partition by norm.claim_id, norm.data_source, norm.diagnosis_column order by diagnosis_code_occurrence_count desc) as occurrence_row_count\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing._int_normalized_input_diagnosis_code_normalize norm\ninner join distinct_count dist\n    on norm.claim_id = dist.claim_id\n    and norm.data_source = dist.data_source\n    and norm.diagnosis_column = dist.diagnosis_column", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_diagnosis_code_voting"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:37.707452Z", "completed_at": "2024-10-01T16:33:37.721981Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:37.732702Z", "completed_at": "2024-10-01T16:33:39.633092Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.069169044494629, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d576"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_discharge_disposition_final", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , normalized_description\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing._int_normalized_input_discharge_disposition_voting\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_discharge_disposition_final"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:37.773107Z", "completed_at": "2024-10-01T16:33:37.783790Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:37.796285Z", "completed_at": "2024-10-01T16:33:39.718957Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.0988059043884277, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f913-0001-987f0111a52a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_ms_drg_final", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , normalized_description\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing._int_normalized_input_ms_drg_voting\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_ms_drg_final"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:37.722979Z", "completed_at": "2024-10-01T16:33:37.741695Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:37.743703Z", "completed_at": "2024-10-01T16:33:39.724959Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.240773916244507, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f6d9-0001-987f01112ed6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_medical_date_aggregation", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , min(normalized_claim_start_date) as minimum_claim_start_date\n    , max(normalized_claim_end_date) as maximum_claim_end_date\n    , min(normalized_admission_date) as minimum_admission_date\n    , max(normalized_discharge_date) as maximum_discharge_date\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing._int_normalized_input_medical_claim_date_normalize\nwhere claim_type = 'institutional'\ngroup by\n    claim_id\n    , data_source\n\nunion all\n\nselect\n    claim_id\n    , data_source\n    , min(normalized_claim_start_date) as minimum_claim_start_date\n    , max(normalized_claim_end_date) as maximum_claim_end_date\n    , null as minimum_admission_date\n    , null as maximum_discharge_date\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing._int_normalized_input_medical_claim_date_normalize\nwhere claim_type = 'professional'\ngroup by\n    claim_id\n    , data_source", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_medical_date_aggregation"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:37.783790Z", "completed_at": "2024-10-01T16:33:37.804796Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:37.808812Z", "completed_at": "2024-10-01T16:33:39.965832Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 3.05056095123291, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f913-0001-987f0111a52e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_present_on_admit_voting", "compiled": true, "compiled_code": "\n\nwith distinct_count as(\n    select\n        claim_id\n        , data_source\n        , diagnosis_column\n        , count(*) as distinct_count\n        , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\n    from dev_thuxuan.claims_preprocessing._int_normalized_input_present_on_admit_normalize\n    group by\n        claim_id\n        , data_source\n        , diagnosis_column\n)\n\nselect \n    norm.claim_id\n    , norm.data_source\n    , norm.diagnosis_column as column_name\n    , norm.normalized_present_on_admit_code as normalized_code\n    , norm.present_on_admit_occurrence_count as occurrence_count\n    , coalesce(lead(present_on_admit_occurrence_count) \n        over (partition by norm.claim_id, norm.data_source, norm.diagnosis_column order by present_on_admit_occurrence_count desc),0) as next_occurrence_count\n    , row_number() over (partition by norm.claim_id, norm.data_source, norm.diagnosis_column order by present_on_admit_occurrence_count desc) as occurrence_row_count\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing._int_normalized_input_present_on_admit_normalize norm\ninner join distinct_count dist\n    on norm.claim_id = dist.claim_id\n    and norm.data_source = dist.data_source\n    and norm.diagnosis_column = dist.diagnosis_column", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_present_on_admit_voting"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:39.046964Z", "completed_at": "2024-10-01T16:33:39.061004Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:39.062009Z", "completed_at": "2024-10-01T16:33:40.835696Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.0194437503814697, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f913-0001-987f0111a532"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_procedure_code_voting", "compiled": true, "compiled_code": "\n\nwith distinct_count as(\n    select\n        claim_id\n        , data_source\n        , procedure_column\n        , count(*) as distinct_count\n        , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\n    from dev_thuxuan.claims_preprocessing._int_normalized_input_procedure_code_normalize\n    group by\n        claim_id\n        , data_source\n        , procedure_column\n)\n\nselect \n    norm.claim_id\n    , norm.data_source\n    , norm.procedure_column as column_name\n    , norm.normalized_procedure_code as normalized_code\n    , norm.procedure_code_occurrence_count as occurrence_count\n    , coalesce(lead(procedure_code_occurrence_count) \n        over (partition by norm.claim_id, norm.data_source, norm.procedure_column order by procedure_code_occurrence_count desc),0) as next_occurrence_count\n    , row_number() over (partition by norm.claim_id, norm.data_source, norm.procedure_column order by procedure_code_occurrence_count desc) as occurrence_row_count\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing._int_normalized_input_procedure_code_normalize norm\ninner join distinct_count dist\n    on norm.claim_id = dist.claim_id\n    and norm.data_source = dist.data_source\n    and norm.procedure_column = dist.procedure_column", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_procedure_code_voting"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:39.789158Z", "completed_at": "2024-10-01T16:33:39.809607Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:39.810607Z", "completed_at": "2024-10-01T16:33:41.774052Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.139841079711914, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f912-0001-987f0111b59e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_procedure_date_voting", "compiled": true, "compiled_code": "\n\nwith distinct_count as(\n    select\n        claim_id\n        , data_source\n        , procedure_column\n        , count(*) as distinct_count\n        , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\n    from dev_thuxuan.claims_preprocessing._int_normalized_input_procedure_code_normalize\n    group by\n        claim_id\n        , data_source\n        , procedure_column\n)\n\nselect \n    norm.claim_id\n    , norm.data_source\n    , norm.procedure_column as column_name\n    , norm.procedure_date as normalized_code\n    , norm.procedure_date_occurrence_count as occurrence_count\n    , coalesce(lead(procedure_date_occurrence_count) \n        over (partition by norm.claim_id, norm.data_source, norm.procedure_column order by procedure_date_occurrence_count desc),0) as next_occurrence_count\n    , row_number() over (partition by norm.claim_id, norm.data_source, norm.procedure_column order by procedure_date_occurrence_count desc) as occurrence_row_count\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing._int_normalized_input_procedure_date_normalize norm\ninner join distinct_count dist\n    on norm.claim_id = dist.claim_id\n    and norm.data_source = dist.data_source\n    and norm.procedure_column = dist.procedure_column", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_procedure_date_voting"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:40.797038Z", "completed_at": "2024-10-01T16:33:40.836696Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:40.845207Z", "completed_at": "2024-10-01T16:33:42.974342Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.6277194023132324, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f6d9-0001-987f01112eda"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__stg_eligibility", "compiled": true, "compiled_code": "\n\nselect\n    patient_id\n    , birth_date\n    , gender\n    , race\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing.normalized_input_eligibility", "relation_name": "dev_thuxuan.test.acute_inpatient__stg_eligibility"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:41.009957Z", "completed_at": "2024-10-01T16:33:41.032064Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:41.034061Z", "completed_at": "2024-10-01T16:33:43.085910Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.251762628555298, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f7c5-0001-987f0110bd66"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_eligibility", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model creates the eligibility table in core.\n-- *************************************************\n\n\n\n\nselect\n       member_id || '-' || enrollment_start_date || '-' || enrollment_end_date || '-' || payer || '-' || plan as eligibility_id\n       , cast(patient_id as TEXT ) as patient_id\n       , cast(member_id as TEXT ) as member_id\n       , cast(subscriber_id as TEXT ) as subscriber_id\n       , cast(birth_date as date) as birth_date\n       , cast(death_date as date) as death_date\n       , cast(enrollment_start_date as date ) as enrollment_start_date\n       , cast(enrollment_end_date as date ) as enrollment_end_date\n       , cast(payer as TEXT ) as payer\n       , cast(payer_type as TEXT ) as payer_type\n       , plan\n       , cast(original_reason_entitlement_code as TEXT ) as original_reason_entitlement_code\n       , cast(dual_status_code as TEXT ) as dual_status_code\n       , cast(medicare_status_code as TEXT ) as medicare_status_code\n       , cast(subscriber_relation as TEXT ) as subscriber_relation\n       , cast(data_source as TEXT ) as data_source\n       , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing.normalized_input_eligibility", "relation_name": "dev_thuxuan.core._stg_claims_eligibility"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:41.072867Z", "completed_at": "2024-10-01T16:33:41.118196Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:41.120197Z", "completed_at": "2024-10-01T16:33:43.214967Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.2683510780334473, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f912-0001-987f0111b5a2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_patient", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model creates the patient table in core.\n-- *************************************************\n\nwith patient_stage as(\n    select\n        patient_id\n        ,first_name\n        ,last_name\n        ,gender\n        ,race\n        ,birth_date\n        ,death_date\n        ,death_flag\n        ,social_security_number\n        ,address\n        ,city\n        ,state\n        ,zip_code\n        ,phone\n        ,data_source\n        ,row_number() over (\n\t        partition by patient_id\n\t        order by case when enrollment_end_date is null\n                then cast ('2050-01-01' as date)\n                else enrollment_end_date end DESC)\n            as row_sequence\n        , cast('2024-10-01 16:29:14.142894+00:00' as timestamp) as tuva_last_run_datetime\n        , cast(substring('2024-10-01 16:29:14.142894+00:00',1,10) as date) as tuva_last_run_date\n    from dev_thuxuan.claims_preprocessing.normalized_input_eligibility\n)\n\nselect\n    cast(patient_id as TEXT) as patient_id\n    , cast(first_name as TEXT) as first_name\n    , cast(last_name as TEXT) as last_name\n    , cast(gender as TEXT) as sex\n    , cast(race as TEXT) as race\n    , cast(birth_date as date) as birth_date\n    , cast(death_date as date) as death_date\n    , cast(death_flag as int) as death_flag\n    , cast(social_security_number as TEXT) as social_security_number\n    , cast(address as TEXT) as address\n    , cast(city as TEXT) as city\n    , cast(state as TEXT) as state\n    , cast(zip_code as TEXT) as zip_code\n    , cast(null as TEXT) as county\n    , cast(null as float) as latitude \n    , cast(null as float) as longitude\n    , cast(data_source as TEXT) as data_source\n    , cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) as age\n    , cast(\n        CASE\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 10 THEN '0-9'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 20 THEN '10-19'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 30 THEN '20-29'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 40 THEN '30-39'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 50 THEN '40-49'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 60 THEN '50-59'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 70 THEN '60-69'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 80 THEN '70-79'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 90 THEN '80-89'\n            ELSE '90+'\n        END as TEXT\n    ) AS age_group\n    , tuva_last_run_datetime as tuva_last_run\nfrom patient_stage\nwhere row_sequence = 1", "relation_name": "dev_thuxuan.core._stg_claims_patient"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:41.951078Z", "completed_at": "2024-10-01T16:33:41.974123Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:41.976138Z", "completed_at": "2024-10-01T16:33:43.254354Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.43473219871521, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f912-0001-987f0111b5a6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.emergency_department__stg_eligibility", "compiled": true, "compiled_code": "\n\nselect\n    patient_id\n    , birth_date\n    , gender\n    , race\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing.normalized_input_eligibility", "relation_name": "dev_thuxuan.test.emergency_department__stg_eligibility"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:43.108795Z", "completed_at": "2024-10-01T16:33:43.115338Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:43.116339Z", "completed_at": "2024-10-01T16:33:44.683671Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.7643425464630127, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d57a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__pharmacy_claim", "compiled": true, "compiled_code": "\n\nselect * from dev_thuxuan.core._stg_claims_pharmacy_claim", "relation_name": "dev_thuxuan.core.pharmacy_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:43.389740Z", "completed_at": "2024-10-01T16:33:43.400260Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:43.401259Z", "completed_at": "2024-10-01T16:33:44.956020Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.6908562183380127, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d57e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_procedure_code_final", "compiled": true, "compiled_code": "\n\nselect\n    claim_id\n    , data_source\n    , max(case when lower(column_name) = 'procedure_code_1' then normalized_code else null end) as procedure_code_1\n    , max(case when lower(column_name) = 'procedure_code_2' then normalized_code else null end) as procedure_code_2\n    , max(case when lower(column_name) = 'procedure_code_3' then normalized_code else null end) as procedure_code_3\n    , max(case when lower(column_name) = 'procedure_code_4' then normalized_code else null end) as procedure_code_4\n    , max(case when lower(column_name) = 'procedure_code_5' then normalized_code else null end) as procedure_code_5\n    , max(case when lower(column_name) = 'procedure_code_6' then normalized_code else null end) as procedure_code_6\n    , max(case when lower(column_name) = 'procedure_code_7' then normalized_code else null end) as procedure_code_7\n    , max(case when lower(column_name) = 'procedure_code_8' then normalized_code else null end) as procedure_code_8\n    , max(case when lower(column_name) = 'procedure_code_9' then normalized_code else null end) as procedure_code_9\n    , max(case when lower(column_name) = 'procedure_code_10' then normalized_code else null end) as procedure_code_10\n    , max(case when lower(column_name) = 'procedure_code_11' then normalized_code else null end) as procedure_code_11\n    , max(case when lower(column_name) = 'procedure_code_12' then normalized_code else null end) as procedure_code_12\n    , max(case when lower(column_name) = 'procedure_code_13' then normalized_code else null end) as procedure_code_13\n    , max(case when lower(column_name) = 'procedure_code_14' then normalized_code else null end) as procedure_code_14\n    , max(case when lower(column_name) = 'procedure_code_15' then normalized_code else null end) as procedure_code_15\n    , max(case when lower(column_name) = 'procedure_code_16' then normalized_code else null end) as procedure_code_16\n    , max(case when lower(column_name) = 'procedure_code_17' then normalized_code else null end) as procedure_code_17\n    , max(case when lower(column_name) = 'procedure_code_18' then normalized_code else null end) as procedure_code_18\n    , max(case when lower(column_name) = 'procedure_code_19' then normalized_code else null end) as procedure_code_19\n    , max(case when lower(column_name) = 'procedure_code_20' then normalized_code else null end) as procedure_code_20\n    , max(case when lower(column_name) = 'procedure_code_21' then normalized_code else null end) as procedure_code_21\n    , max(case when lower(column_name) = 'procedure_code_22' then normalized_code else null end) as procedure_code_22\n    , max(case when lower(column_name) = 'procedure_code_23' then normalized_code else null end) as procedure_code_23\n    , max(case when lower(column_name) = 'procedure_code_24' then normalized_code else null end) as procedure_code_24\n    , max(case when lower(column_name) = 'procedure_code_14' then normalized_code else null end) as procedure_code_25\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing._int_normalized_input_procedure_code_voting\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)\ngroup by\n    claim_id\n    , data_source", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_procedure_code_final"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:43.229644Z", "completed_at": "2024-10-01T16:33:43.241724Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:43.242725Z", "completed_at": "2024-10-01T16:33:45.008803Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.9157061576843262, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f7c5-0001-987f0110bd6e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_diagnosis_code_final", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , max(case when lower(column_name) = 'diagnosis_code_1' then normalized_code else null end) as diagnosis_code_1\n    , max(case when lower(column_name) = 'diagnosis_code_2' then normalized_code else null end) as diagnosis_code_2\n    , max(case when lower(column_name) = 'diagnosis_code_3' then normalized_code else null end) as diagnosis_code_3\n    , max(case when lower(column_name) = 'diagnosis_code_4' then normalized_code else null end) as diagnosis_code_4\n    , max(case when lower(column_name) = 'diagnosis_code_5' then normalized_code else null end) as diagnosis_code_5\n    , max(case when lower(column_name) = 'diagnosis_code_6' then normalized_code else null end) as diagnosis_code_6\n    , max(case when lower(column_name) = 'diagnosis_code_7' then normalized_code else null end) as diagnosis_code_7\n    , max(case when lower(column_name) = 'diagnosis_code_8' then normalized_code else null end) as diagnosis_code_8\n    , max(case when lower(column_name) = 'diagnosis_code_9' then normalized_code else null end) as diagnosis_code_9\n    , max(case when lower(column_name) = 'diagnosis_code_10' then normalized_code else null end) as diagnosis_code_10\n    , max(case when lower(column_name) = 'diagnosis_code_11' then normalized_code else null end) as diagnosis_code_11\n    , max(case when lower(column_name) = 'diagnosis_code_12' then normalized_code else null end) as diagnosis_code_12\n    , max(case when lower(column_name) = 'diagnosis_code_13' then normalized_code else null end) as diagnosis_code_13\n    , max(case when lower(column_name) = 'diagnosis_code_14' then normalized_code else null end) as diagnosis_code_14\n    , max(case when lower(column_name) = 'diagnosis_code_15' then normalized_code else null end) as diagnosis_code_15\n    , max(case when lower(column_name) = 'diagnosis_code_16' then normalized_code else null end) as diagnosis_code_16\n    , max(case when lower(column_name) = 'diagnosis_code_17' then normalized_code else null end) as diagnosis_code_17\n    , max(case when lower(column_name) = 'diagnosis_code_18' then normalized_code else null end) as diagnosis_code_18\n    , max(case when lower(column_name) = 'diagnosis_code_19' then normalized_code else null end) as diagnosis_code_19\n    , max(case when lower(column_name) = 'diagnosis_code_20' then normalized_code else null end) as diagnosis_code_20\n    , max(case when lower(column_name) = 'diagnosis_code_21' then normalized_code else null end) as diagnosis_code_21\n    , max(case when lower(column_name) = 'diagnosis_code_22' then normalized_code else null end) as diagnosis_code_22\n    , max(case when lower(column_name) = 'diagnosis_code_23' then normalized_code else null end) as diagnosis_code_23\n    , max(case when lower(column_name) = 'diagnosis_code_24' then normalized_code else null end) as diagnosis_code_24\n    , max(case when lower(column_name) = 'diagnosis_code_25' then normalized_code else null end) as diagnosis_code_25\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing._int_normalized_input_diagnosis_code_voting\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)\ngroup by\n    claim_id\n    , data_source", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_diagnosis_code_final"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:43.348640Z", "completed_at": "2024-10-01T16:33:43.357532Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:43.358534Z", "completed_at": "2024-10-01T16:33:45.021226Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.797151803970337, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f913-0001-987f0111a536"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_present_on_admit_final", "compiled": true, "compiled_code": "\n\nselect\n    claim_id\n    , data_source\n    , max(case when column_name = 'DIAGNOSIS_POA_1' then normalized_code else null end) as diagnosis_poa_1\n    , max(case when column_name = 'DIAGNOSIS_POA_2' then normalized_code else null end) as diagnosis_poa_2\n    , max(case when column_name = 'DIAGNOSIS_POA_3' then normalized_code else null end) as diagnosis_poa_3\n    , max(case when column_name = 'DIAGNOSIS_POA_4' then normalized_code else null end) as diagnosis_poa_4\n    , max(case when column_name = 'DIAGNOSIS_POA_5' then normalized_code else null end) as diagnosis_poa_5\n    , max(case when column_name = 'DIAGNOSIS_POA_6' then normalized_code else null end) as diagnosis_poa_6\n    , max(case when column_name = 'DIAGNOSIS_POA_7' then normalized_code else null end) as diagnosis_poa_7\n    , max(case when column_name = 'DIAGNOSIS_POA_8' then normalized_code else null end) as diagnosis_poa_8\n    , max(case when column_name = 'DIAGNOSIS_POA_9' then normalized_code else null end) as diagnosis_poa_9\n    , max(case when column_name = 'DIAGNOSIS_POA_10' then normalized_code else null end) as diagnosis_poa_10\n    , max(case when column_name = 'DIAGNOSIS_POA_11' then normalized_code else null end) as diagnosis_poa_11\n    , max(case when column_name = 'DIAGNOSIS_POA_12' then normalized_code else null end) as diagnosis_poa_12\n    , max(case when column_name = 'DIAGNOSIS_POA_13' then normalized_code else null end) as diagnosis_poa_13\n    , max(case when column_name = 'DIAGNOSIS_POA_14' then normalized_code else null end) as diagnosis_poa_14\n    , max(case when column_name = 'DIAGNOSIS_POA_15' then normalized_code else null end) as diagnosis_poa_15\n    , max(case when column_name = 'DIAGNOSIS_POA_16' then normalized_code else null end) as diagnosis_poa_16\n    , max(case when column_name = 'DIAGNOSIS_POA_17' then normalized_code else null end) as diagnosis_poa_17\n    , max(case when column_name = 'DIAGNOSIS_POA_18' then normalized_code else null end) as diagnosis_poa_18\n    , max(case when column_name = 'DIAGNOSIS_POA_19' then normalized_code else null end) as diagnosis_poa_19\n    , max(case when column_name = 'DIAGNOSIS_POA_20' then normalized_code else null end) as diagnosis_poa_20\n    , max(case when column_name = 'DIAGNOSIS_POA_21' then normalized_code else null end) as diagnosis_poa_21\n    , max(case when column_name = 'DIAGNOSIS_POA_22' then normalized_code else null end) as diagnosis_poa_22\n    , max(case when column_name = 'DIAGNOSIS_POA_23' then normalized_code else null end) as diagnosis_poa_23\n    , max(case when column_name = 'DIAGNOSIS_POA_24' then normalized_code else null end) as diagnosis_poa_24\n    , max(case when column_name = 'DIAGNOSIS_POA_25' then normalized_code else null end) as diagnosis_poa_25\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing._int_normalized_input_present_on_admit_voting\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)\ngroup by\n    claim_id\n    , data_source", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_present_on_admit_final"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:45.160236Z", "completed_at": "2024-10-01T16:33:45.171923Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:45.171923Z", "completed_at": "2024-10-01T16:33:46.223749Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1986396312713623, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f6d9-0001-987f01112ede"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.unique_core__pharmacy_claim_pharmacy_claim_id.a91e86c79c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    pharmacy_claim_id as unique_field,\n    count(*) as n_records\n\nfrom dev_thuxuan.core.pharmacy_claim\nwhere pharmacy_claim_id is not null\ngroup by pharmacy_claim_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:44.879900Z", "completed_at": "2024-10-01T16:33:44.885987Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:44.886973Z", "completed_at": "2024-10-01T16:33:46.282524Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.5449128150939941, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f7c5-0001-987f0110bd72"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_procedure_date_final", "compiled": true, "compiled_code": "\n\nselect\n    claim_id\n    , data_source\n    , max(case when lower(column_name) = 'procedure_date_1' then normalized_code else null end) as procedure_date_1\n    , max(case when lower(column_name) = 'procedure_date_2' then normalized_code else null end) as procedure_date_2\n    , max(case when lower(column_name) = 'procedure_date_3' then normalized_code else null end) as procedure_date_3\n    , max(case when lower(column_name) = 'procedure_date_4' then normalized_code else null end) as procedure_date_4\n    , max(case when lower(column_name) = 'procedure_date_5' then normalized_code else null end) as procedure_date_5\n    , max(case when lower(column_name) = 'procedure_date_6' then normalized_code else null end) as procedure_date_6\n    , max(case when lower(column_name) = 'procedure_date_7' then normalized_code else null end) as procedure_date_7\n    , max(case when lower(column_name) = 'procedure_date_8' then normalized_code else null end) as procedure_date_8\n    , max(case when lower(column_name) = 'procedure_date_9' then normalized_code else null end) as procedure_date_9\n    , max(case when lower(column_name) = 'procedure_date_10' then normalized_code else null end) as procedure_date_10\n    , max(case when lower(column_name) = 'procedure_date_11' then normalized_code else null end) as procedure_date_11\n    , max(case when lower(column_name) = 'procedure_date_12' then normalized_code else null end) as procedure_date_12\n    , max(case when lower(column_name) = 'procedure_date_13' then normalized_code else null end) as procedure_date_13\n    , max(case when lower(column_name) = 'procedure_date_14' then normalized_code else null end) as procedure_date_14\n    , max(case when lower(column_name) = 'procedure_date_15' then normalized_code else null end) as procedure_date_15\n    , max(case when lower(column_name) = 'procedure_date_16' then normalized_code else null end) as procedure_date_16\n    , max(case when lower(column_name) = 'procedure_date_17' then normalized_code else null end) as procedure_date_17\n    , max(case when lower(column_name) = 'procedure_date_18' then normalized_code else null end) as procedure_date_18\n    , max(case when lower(column_name) = 'procedure_date_19' then normalized_code else null end) as procedure_date_19\n    , max(case when lower(column_name) = 'procedure_date_20' then normalized_code else null end) as procedure_date_20\n    , max(case when lower(column_name) = 'procedure_date_21' then normalized_code else null end) as procedure_date_21\n    , max(case when lower(column_name) = 'procedure_date_22' then normalized_code else null end) as procedure_date_22\n    , max(case when lower(column_name) = 'procedure_date_23' then normalized_code else null end) as procedure_date_23\n    , max(case when lower(column_name) = 'procedure_date_24' then normalized_code else null end) as procedure_date_24\n    , max(case when lower(column_name) = 'procedure_date_14' then normalized_code else null end) as procedure_date_25\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing._int_normalized_input_procedure_date_voting\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)\ngroup by\n    claim_id\n    , data_source", "relation_name": "dev_thuxuan.claims_preprocessing._int_normalized_input_procedure_date_final"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:45.084660Z", "completed_at": "2024-10-01T16:33:45.089648Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:45.089648Z", "completed_at": "2024-10-01T16:33:46.372999Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.436880111694336, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f7c5-0001-987f0110bd76"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__eligibility", "compiled": true, "compiled_code": "\n\n\nselect * from dev_thuxuan.core._stg_claims_eligibility", "relation_name": "dev_thuxuan.core.eligibility"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:45.152198Z", "completed_at": "2024-10-01T16:33:45.166833Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:45.167827Z", "completed_at": "2024-10-01T16:33:46.898252Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.9560930728912354, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f913-0001-987f0111a53a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__patient", "compiled": true, "compiled_code": "\n\nselect * from dev_thuxuan.core._stg_claims_patient\nunion all\nselect * from dev_thuxuan.core._stg_clinical_patient\n\n", "relation_name": "dev_thuxuan.core.patient"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:46.364915Z", "completed_at": "2024-10-01T16:33:46.375557Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:46.375557Z", "completed_at": "2024-10-01T16:33:47.533753Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.2925596237182617, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d582"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.cms_chronic_conditions__stg_core__pharmacy_claim", "compiled": true, "compiled_code": "\n\nselect\n      claim_id\n    , patient_id\n    , paid_date\n    , ndc_code\n    , data_source\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.pharmacy_claim", "relation_name": "dev_thuxuan.test.cms_chronic_conditions__stg_core__pharmacy_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:46.429213Z", "completed_at": "2024-10-01T16:33:46.435227Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:46.435227Z", "completed_at": "2024-10-01T16:33:47.550087Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.242732286453247, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f7c5-0001-987f0110bd7a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__stg_pharmacy_claim", "compiled": true, "compiled_code": "\n\n\nSELECT\n    patient_id\n    , dispensing_date\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , payer\n    , plan\n    , data_source\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.pharmacy_claim", "relation_name": "dev_thuxuan.test.financial_pmpm__stg_pharmacy_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:39.871673Z", "completed_at": "2024-10-01T16:33:40.839694Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:40.853219Z", "completed_at": "2024-10-01T16:33:47.601329Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 7.852599143981934, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f7c5-0001-987f0110bd6a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__data_quality_claims_detail", "compiled": true, "compiled_code": "\n\nWITH cte as (\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.claim_allowed_amount\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.claim_charge_amount\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.claim_claim_id\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.claim_claim_line_end_date\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.claim_claim_line_number\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.claim_claim_line_start_date\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.claim_claim_type\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.claim_coninsurance_amount\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.claim_copayment_amount\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.claim_data_source\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.claim_deductible_amount\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.claim_diagnosis_code_type\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.claim_hcpcs_code\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.claim_member_id\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.claim_paid_amount\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.claim_paid_date\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.claim_patient_id\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.claim_payer\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.claim_plan\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.claim_total_cost_amount\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.eligibility_address\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.eligibility_birth_date\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.eligibility_city\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.eligibility_data_source\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.eligibility_death_date\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.eligibility_death_flag\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.eligibility_dual_status_code\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.eligibility_end_date\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.eligibility_first_name\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.eligibility_gender\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.eligibility_last_name\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.eligibility_medicare_status_code\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.eligibility_member_id\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.eligibility_original_reason_entitlement_code\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.eligibility_patient_id\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.eligibility_payer_type\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.eligibility_payer\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.eligibility_phone\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.eligibility_plan\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.eligibility_race\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.eligibility_start_date\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.eligibility_state\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.eligibility_zip_code\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.institutional_ms_drg_code\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.institutional_admission_date\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.institutional_admit_source_code\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.institutional_admit_type_code\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.institutional_apr_drg_code\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.institutional_bill_type_code\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.institutional_billing_npi\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.institutional_claim_end_date\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.institutional_claim_start_date\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.institutional_diagnosis_code_1\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.institutional_diagnosis_code_2\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.institutional_diagnosis_code_3\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.institutional_discharge_date\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.institutional_discharge_disposition_code\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.institutional_facility_npi\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.institutional_present_on_admission_1\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.institutional_present_on_admission_2\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.institutional_present_on_admission_3\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.institutional_procedure_code_1\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.institutional_procedure_code_2\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.institutional_procedure_code_3\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.institutional_procedure_date_1\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.institutional_procedure_date_2\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.institutional_procedure_date_3\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.institutional_rendering_npi\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.institutional_revenue_center_code\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.institutional_service_unit_quantity\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.pharmacy_allowed_amount\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.pharmacy_claim_id\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.pharmacy_claim_line_number\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.pharmacy_coinsurance_amount\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.pharmacy_copayment_amount\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.pharmacy_data_source\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.pharmacy_days_supply\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.pharmacy_deductible_amount\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.pharmacy_dispensing_date\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.pharmacy_dispensing_provider_npi\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.pharmacy_member_id\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.pharmacy_ndc_code\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.pharmacy_paid_amount\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.pharmacy_paid_date\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.pharmacy_patient_id\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.pharmacy_payer\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.pharmacy_plan\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.pharmacy_prescribing_provider_npi\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.pharmacy_quantity\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.pharmacy_refills\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.professional_billing_npi\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.professional_facility_npi\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.professional_place_of_service_code\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.professional_rendering_npi\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.professional_claim_end_date\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.professional_claim_start_date\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.professional_diagnosis_code_1\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.professional_diagnosis_code_2\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_thuxuan.data_quality.professional_diagnosis_code_3\n\n)\n\n-- noinspection SqlNoDataSourceInspection\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n,DENSE_RANK() OVER (ORDER BY data_source, table_name, claim_type, field_name) as summary_sk\nFROM cte", "relation_name": "dev_thuxuan.data_quality.data_quality_claims_detail"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:46.526568Z", "completed_at": "2024-10-01T16:33:46.535077Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:46.536082Z", "completed_at": "2024-10-01T16:33:47.630067Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3256375789642334, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f912-0001-987f0111b5aa"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__stg_core__pharmacy_claim", "compiled": true, "compiled_code": "\nselect\n      patient_id\n    , dispensing_date\n    , ndc_code\n    , paid_date\n    , data_source\nfrom dev_thuxuan.core.pharmacy_claim\n\n", "relation_name": "dev_thuxuan.hcc_suspecting._stg_pharmacy_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:47.112535Z", "completed_at": "2024-10-01T16:33:47.118766Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:47.118766Z", "completed_at": "2024-10-01T16:33:48.376654Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.4507896900177002, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f6d9-0001-987f01112ee2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.mart_review__stg_pharmacy_claim", "compiled": true, "compiled_code": "\n\nselect mc.*,\ncast(c.year_month_int as TEXT) as year_month\nFROM dev_thuxuan.core.pharmacy_claim  mc\nleft join dev_thuxuan.reference_data.calendar c on coalesce(mc.paid_date,mc.dispensing_date) = c.full_date", "relation_name": "dev_thuxuan.data_quality.mart_review__stg_pharmacy_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:47.680460Z", "completed_at": "2024-10-01T16:33:47.690991Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:47.690991Z", "completed_at": "2024-10-01T16:33:48.756564Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.270660400390625, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f913-0001-987f0111a53e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__stg_pharmacy_claim", "compiled": true, "compiled_code": "\n\nselect\n      patient_id\n    , dispensing_date\n    , ndc_code\n    , paid_date\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.pharmacy_claim\n\n", "relation_name": "dev_thuxuan.quality_measures._stg_pharmacy_claim"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:48.031175Z", "completed_at": "2024-10-01T16:33:48.043173Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:48.044173Z", "completed_at": "2024-10-01T16:33:49.006105Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1050317287445068, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d586"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.unique_core__eligibility_eligibility_id.f0f050366a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    eligibility_id as unique_field,\n    count(*) as n_records\n\nfrom dev_thuxuan.core.eligibility\nwhere eligibility_id is not null\ngroup by eligibility_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:47.661934Z", "completed_at": "2024-10-01T16:33:47.665950Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:47.666950Z", "completed_at": "2024-10-01T16:33:49.180713Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.6493232250213623, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f913-0001-987f0111a542"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.pharmacy__stg_pharmacy_claim", "compiled": true, "compiled_code": "\n\nselect \n    p.ndc_code\n  , n.fda_description as ndc_description\n  , p.data_source\n  , n.rxcui\n  , p.paid_amount\n  , p.allowed_amount\n  , p.claim_id\n  , p.claim_line_number\n  , p.patient_id\n  , p.member_id\n  , p.prescribing_provider_id\n  , p.dispensing_provider_id\n  , p.dispensing_date\n  , p.quantity\n  , p.days_supply\n  , p.refills\n  , p.paid_date\nfrom dev_thuxuan.core.pharmacy_claim as p\nleft join dev_thuxuan.terminology.ndc as n \n  on p.ndc_code = n.ndc", "relation_name": "dev_thuxuan.pharmacy.stg_pharmacy_claim"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:48.569236Z", "completed_at": "2024-10-01T16:33:48.577239Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:48.577239Z", "completed_at": "2024-10-01T16:33:49.266079Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.8653514385223389, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d58a"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.unique_core__patient_patient_id.8fc869ed1e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    patient_id as unique_field,\n    count(*) as n_records\n\nfrom dev_thuxuan.core.patient\nwhere patient_id is not null\ngroup by patient_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:48.957414Z", "completed_at": "2024-10-01T16:33:48.967378Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:48.968357Z", "completed_at": "2024-10-01T16:33:50.255155Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.4209911823272705, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f913-0001-987f0111a54a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__data_quality_claims_for_pbi", "compiled": true, "compiled_code": "\n\nWITH ranked_examples as (\n       select\n       summary_sk,\n       data_source,\n       table_name,\n       claim_type,\n       field_name,\n       bucket_name,\n       invalid_reason,\n       drill_down_key,\n       drill_down_value as drill_down_value, --all claims\n       field_value as field_value,\n       count(drill_down_value) as frequency,\n       row_number() over (partition by summary_sk, bucket_name, field_value order by field_value) as rn\n       , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM dev_thuxuan.data_quality.data_quality_claims_detail\nWHERE bucket_name not in ('valid', 'null')\nGROUP BY\n       data_source,\n       field_name,\n       table_name,\n       claim_type,\n       bucket_name,\n       field_value,\n       drill_down_key,\n       drill_down_value,\n       invalid_reason,\n       summary_sk\n)\nSELECT\n       summary_sk,\n       data_source,\n       table_name,\n       claim_type,\n       field_name,\n       bucket_name,\n       invalid_reason,\n       drill_down_key,\n       max(drill_down_value) as drill_down_value, --1 sample claim\n       null as field_value,\n       count(drill_down_value) as frequency\n       , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM dev_thuxuan.data_quality.data_quality_claims_detail\nWHERE bucket_name = 'null'\nGROUP BY\n       data_source,\n       field_name,\n       table_name,\n       claim_type,\n       bucket_name,\n       invalid_reason,\n       drill_down_key,\n       summary_sk\n\nunion all\nSELECT\n       summary_sk,\n       data_source,\n       table_name,\n       claim_type,\n       field_name,\n       bucket_name,\n       invalid_reason,\n       drill_down_key,\n       max(drill_down_value) as drill_down_value, --1 sample claim\n       field_value as field_value,\n       count(drill_down_value) as frequency\n       , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM dev_thuxuan.data_quality.data_quality_claims_detail\nWHERE bucket_name = 'valid'\nGROUP BY\n       data_source,\n       field_name,\n       table_name,\n       claim_type,\n       bucket_name,\n       field_value,\n       invalid_reason,\n       drill_down_key,\n       summary_sk\n\nunion all\nSELECT\n       summary_sk,\n       data_source,\n       table_name,\n       claim_type,\n       field_name,\n       bucket_name,\n       invalid_reason,\n       drill_down_key,\n       drill_down_value as drill_down_value,\n       field_value as field_value,\n       frequency\n       , '2024-10-01 16:29:14.142894+00:00'\nFROM ranked_examples\nWHERE rn <= 5 -- 5 Example claims per unique SK / field value\nunion all\nSELECT\n       summary_sk,\n       data_source,\n       table_name,\n       claim_type,\n       field_name,\n       bucket_name,\n       invalid_reason,\n       drill_down_key,\n       'All Others' as drill_down_value,\n       field_value as field_value,\n       sum(frequency) as frequency\n       , '2024-10-01 16:29:14.142894+00:00'\nFROM ranked_examples\nWHERE rn > 5 -- Aggregating all other rows\nGROUP BY\n    summary_sk,\n    data_source,\n    table_name,\n    claim_type,\n    field_name,\n    bucket_name,\n    invalid_reason,\n    drill_down_key,\n    field_value", "relation_name": "dev_thuxuan.data_quality.data_quality_claims_for_pbi"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:47.972349Z", "completed_at": "2024-10-01T16:33:48.037176Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:48.037176Z", "completed_at": "2024-10-01T16:33:50.287551Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.441871404647827, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f913-0001-987f0111a546"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__medical_claim", "compiled": true, "compiled_code": "\n\n\nselect\n\tcast(med.claim_id as TEXT ) as claim_id\n\t, cast(med.claim_line_number as int ) as claim_line_number\n\t, cast(med.claim_type as TEXT ) as claim_type\n\t, cast(med.patient_id as TEXT ) as patient_id\n\t, cast(med.member_id as TEXT ) as member_id\n\t, cast(med.payer as TEXT ) as payer\n    , cast(med.plan as TEXT ) as plan\n\t, cast(coalesce(dates.minimum_claim_start_date, undetermined.claim_start_date) as date ) as claim_start_date\n\t, cast(coalesce(dates.maximum_claim_end_date, undetermined.claim_start_date) as date ) as claim_end_date\n\t, cast(coalesce(claim_line_dates.normalized_claim_line_start_date, undetermined.claim_line_start_date) as date ) as claim_line_start_date\n\t, cast(coalesce(claim_line_dates.normalized_claim_line_end_date, undetermined.claim_line_end_date) as date ) as claim_line_end_date\n\t, cast(coalesce(dates.minimum_admission_date, undetermined.admission_date) as date ) as admission_date\n\t, cast(coalesce(dates.maximum_discharge_date, undetermined.discharge_date) as date ) as discharge_date\n\t, cast(coalesce(ad_source.normalized_code, undetermined.admit_source_code) as TEXT ) as admit_source_code\n    , cast(coalesce(ad_source.normalized_description, undetermined.admit_source_description) as TEXT ) as admit_source_description\n\t, cast(coalesce(ad_type.normalized_code, undetermined.admit_type_code) as TEXT ) as admit_type_code\n    , cast(coalesce(ad_type.normalized_description, undetermined.admit_type_description) as TEXT ) as admit_type_description\n\t, cast(coalesce(disch_disp.normalized_code, undetermined.discharge_disposition_code) as TEXT ) as discharge_disposition_code\n    , cast(coalesce(disch_disp.normalized_description, undetermined.discharge_disposition_description) as TEXT ) as discharge_disposition_description\n\t, cast(coalesce(pos.normalized_code, undetermined.place_of_service_code) as TEXT ) as place_of_service_code\n    , cast(coalesce(pos.normalized_description, undetermined.place_of_service_description) as TEXT ) as place_of_service_description\n\t, cast(coalesce(bill.normalized_code, undetermined.bill_type_code) as TEXT ) as bill_type_code\n    , cast(coalesce(bill.normalized_description, undetermined.bill_type_description) as TEXT ) as bill_type_description\n\t, cast(coalesce(ms.normalized_code, undetermined.ms_drg_code) as TEXT ) as ms_drg_code\n    , cast(coalesce(ms.normalized_description, undetermined.ms_drg_description) as TEXT ) as ms_drg_description\n\t, cast(coalesce(apr.normalized_code, undetermined.apr_drg_code) as TEXT ) as apr_drg_code\n    , cast(coalesce(apr.normalized_description, undetermined.apr_drg_description) as TEXT ) as apr_drg_description\n\t, cast(coalesce(rev.normalized_code, undetermined.revenue_center_code) as TEXT ) as revenue_center_code\n    , cast(coalesce(rev.normalized_description, undetermined.revenue_center_description) as TEXT ) as revenue_center_description\n\t, cast(med.service_unit_quantity as TEXT ) as service_unit_quantity\n\t, cast(med.hcpcs_code as TEXT ) as hcpcs_code\n\t, cast(med.hcpcs_modifier_1 as TEXT ) as hcpcs_modifier_1\n\t, cast(med.hcpcs_modifier_2 as TEXT ) as hcpcs_modifier_2\n\t, cast(med.hcpcs_modifier_3 as TEXT ) as hcpcs_modifier_3\n\t, cast(med.hcpcs_modifier_4 as TEXT ) as hcpcs_modifier_4\n\t, cast(med.hcpcs_modifier_5 as TEXT ) as hcpcs_modifier_5\n\t, cast(coalesce(med_npi.normalized_rendering_npi, undetermined.rendering_npi) as TEXT ) as rendering_id\n    , cast(med.rendering_tin as TEXT ) as rendering_tin\n    , cast(coalesce(med_npi.normalized_rendering_name, undetermined.rendering_name) as TEXT ) as rendering_name\n\t, cast(coalesce(med_npi.normalized_billing_npi, undetermined.billing_npi) as TEXT ) as billing_id\n    , cast(med.billing_tin as TEXT ) as billing_tin\n    , cast(coalesce(med_npi.normalized_billing_name, undetermined.billing_name) as TEXT ) as billing_name\n\t, cast(coalesce(med_npi.normalized_facility_npi, undetermined.facility_npi) as TEXT ) as facility_id\n\t, cast(coalesce(med_npi.normalized_facility_name, undetermined.facility_name) as TEXT ) as facility_name\n    , cast(med.paid_date as date ) as paid_date\n\t, cast(med.paid_amount as numeric(28,6) ) as paid_amount\n\t, cast(med.allowed_amount as numeric(28,6) ) as allowed_amount\n\t, cast(med.charge_amount as numeric(28,6) ) as charge_amount\n\t, cast(med.coinsurance_amount as numeric(28,6) ) as coinsurance_amount\n\t, cast(med.copayment_amount as numeric(28,6) ) as copayment_amount\n\t, cast(med.deductible_amount as numeric(28,6) ) as deductible_amount\n\t, cast(med.total_cost_amount as numeric(28,6) ) as total_cost_amount\n\t, cast(med.diagnosis_code_type as TEXT ) as diagnosis_code_type\n\t, cast(coalesce(dx_code.diagnosis_code_1, undetermined.diagnosis_code_1) as TEXT ) as diagnosis_code_1\n\t, cast(coalesce(dx_code.diagnosis_code_2, undetermined.diagnosis_code_2) as TEXT ) as diagnosis_code_2\n\t, cast(coalesce(dx_code.diagnosis_code_3, undetermined.diagnosis_code_3) as TEXT ) as diagnosis_code_3\n\t, cast(coalesce(dx_code.diagnosis_code_4, undetermined.diagnosis_code_4) as TEXT ) as diagnosis_code_4\n\t, cast(coalesce(dx_code.diagnosis_code_5, undetermined.diagnosis_code_5) as TEXT ) as diagnosis_code_5\n\t, cast(coalesce(dx_code.diagnosis_code_6, undetermined.diagnosis_code_6) as TEXT ) as diagnosis_code_6\n\t, cast(coalesce(dx_code.diagnosis_code_7, undetermined.diagnosis_code_7) as TEXT ) as diagnosis_code_7\n\t, cast(coalesce(dx_code.diagnosis_code_8, undetermined.diagnosis_code_8) as TEXT ) as diagnosis_code_8\n\t, cast(coalesce(dx_code.diagnosis_code_9, undetermined.diagnosis_code_9) as TEXT ) as diagnosis_code_9\n\t, cast(coalesce(dx_code.diagnosis_code_10, undetermined.diagnosis_code_10) as TEXT ) as diagnosis_code_10\n\t, cast(coalesce(dx_code.diagnosis_code_11, undetermined.diagnosis_code_11) as TEXT ) as diagnosis_code_11\n\t, cast(coalesce(dx_code.diagnosis_code_12, undetermined.diagnosis_code_12) as TEXT ) as diagnosis_code_12\n\t, cast(coalesce(dx_code.diagnosis_code_13, undetermined.diagnosis_code_13) as TEXT ) as diagnosis_code_13\n\t, cast(coalesce(dx_code.diagnosis_code_14, undetermined.diagnosis_code_14) as TEXT ) as diagnosis_code_14\n\t, cast(coalesce(dx_code.diagnosis_code_15, undetermined.diagnosis_code_15) as TEXT ) as diagnosis_code_15\n\t, cast(coalesce(dx_code.diagnosis_code_16, undetermined.diagnosis_code_16) as TEXT ) as diagnosis_code_16\n\t, cast(coalesce(dx_code.diagnosis_code_17, undetermined.diagnosis_code_17) as TEXT ) as diagnosis_code_17\n\t, cast(coalesce(dx_code.diagnosis_code_18, undetermined.diagnosis_code_18) as TEXT ) as diagnosis_code_18\n\t, cast(coalesce(dx_code.diagnosis_code_19, undetermined.diagnosis_code_19) as TEXT ) as diagnosis_code_19\n\t, cast(coalesce(dx_code.diagnosis_code_20, undetermined.diagnosis_code_20) as TEXT ) as diagnosis_code_20\n\t, cast(coalesce(dx_code.diagnosis_code_21, undetermined.diagnosis_code_21) as TEXT ) as diagnosis_code_21\n\t, cast(coalesce(dx_code.diagnosis_code_22, undetermined.diagnosis_code_22) as TEXT ) as diagnosis_code_22\n\t, cast(coalesce(dx_code.diagnosis_code_23, undetermined.diagnosis_code_23) as TEXT ) as diagnosis_code_23\n\t, cast(coalesce(dx_code.diagnosis_code_24, undetermined.diagnosis_code_24) as TEXT ) as diagnosis_code_24\n\t, cast(coalesce(dx_code.diagnosis_code_25, undetermined.diagnosis_code_25) as TEXT ) as diagnosis_code_25\n\t, cast(coalesce(poa.diagnosis_poa_1, undetermined.diagnosis_poa_1) as TEXT ) as diagnosis_poa_1\n\t, cast(coalesce(poa.diagnosis_poa_2, undetermined.diagnosis_poa_2) as TEXT ) as diagnosis_poa_2\n\t, cast(coalesce(poa.diagnosis_poa_3, undetermined.diagnosis_poa_3) as TEXT ) as diagnosis_poa_3\n\t, cast(coalesce(poa.diagnosis_poa_4, undetermined.diagnosis_poa_4) as TEXT ) as diagnosis_poa_4\n\t, cast(coalesce(poa.diagnosis_poa_5, undetermined.diagnosis_poa_5) as TEXT ) as diagnosis_poa_5\n\t, cast(coalesce(poa.diagnosis_poa_6, undetermined.diagnosis_poa_6) as TEXT ) as diagnosis_poa_6\n\t, cast(coalesce(poa.diagnosis_poa_7, undetermined.diagnosis_poa_7) as TEXT ) as diagnosis_poa_7\n\t, cast(coalesce(poa.diagnosis_poa_8, undetermined.diagnosis_poa_8) as TEXT ) as diagnosis_poa_8\n\t, cast(coalesce(poa.diagnosis_poa_9, undetermined.diagnosis_poa_9) as TEXT ) as diagnosis_poa_9\n\t, cast(coalesce(poa.diagnosis_poa_10, undetermined.diagnosis_poa_10) as TEXT ) as diagnosis_poa_10\n\t, cast(coalesce(poa.diagnosis_poa_11, undetermined.diagnosis_poa_11) as TEXT ) as diagnosis_poa_11\n\t, cast(coalesce(poa.diagnosis_poa_12, undetermined.diagnosis_poa_12) as TEXT ) as diagnosis_poa_12\n\t, cast(coalesce(poa.diagnosis_poa_13, undetermined.diagnosis_poa_13) as TEXT ) as diagnosis_poa_13\n\t, cast(coalesce(poa.diagnosis_poa_14, undetermined.diagnosis_poa_14) as TEXT ) as diagnosis_poa_14\n\t, cast(coalesce(poa.diagnosis_poa_15, undetermined.diagnosis_poa_15) as TEXT ) as diagnosis_poa_15\n\t, cast(coalesce(poa.diagnosis_poa_16, undetermined.diagnosis_poa_16) as TEXT ) as diagnosis_poa_16\n\t, cast(coalesce(poa.diagnosis_poa_17, undetermined.diagnosis_poa_17) as TEXT ) as diagnosis_poa_17\n\t, cast(coalesce(poa.diagnosis_poa_18, undetermined.diagnosis_poa_18) as TEXT ) as diagnosis_poa_18\n\t, cast(coalesce(poa.diagnosis_poa_19, undetermined.diagnosis_poa_19) as TEXT ) as diagnosis_poa_19\n\t, cast(coalesce(poa.diagnosis_poa_20, undetermined.diagnosis_poa_20) as TEXT ) as diagnosis_poa_20\n\t, cast(coalesce(poa.diagnosis_poa_21, undetermined.diagnosis_poa_21) as TEXT ) as diagnosis_poa_21\n\t, cast(coalesce(poa.diagnosis_poa_22, undetermined.diagnosis_poa_22) as TEXT ) as diagnosis_poa_22\n\t, cast(coalesce(poa.diagnosis_poa_23, undetermined.diagnosis_poa_23) as TEXT ) as diagnosis_poa_23\n\t, cast(coalesce(poa.diagnosis_poa_24, undetermined.diagnosis_poa_24) as TEXT ) as diagnosis_poa_24\n\t, cast(coalesce(poa.diagnosis_poa_25, undetermined.diagnosis_poa_25) as TEXT ) as diagnosis_poa_25\n\t, cast(med.procedure_code_type as TEXT ) as procedure_code_type\n\t, cast(coalesce(px_code.procedure_code_1, undetermined.procedure_code_1) as TEXT ) as procedure_code_1\n\t, cast(coalesce(px_code.procedure_code_2, undetermined.procedure_code_2) as TEXT ) as procedure_code_2\n\t, cast(coalesce(px_code.procedure_code_3, undetermined.procedure_code_3) as TEXT ) as procedure_code_3\n\t, cast(coalesce(px_code.procedure_code_4, undetermined.procedure_code_4) as TEXT ) as procedure_code_4\n\t, cast(coalesce(px_code.procedure_code_5, undetermined.procedure_code_5) as TEXT ) as procedure_code_5\n\t, cast(coalesce(px_code.procedure_code_6, undetermined.procedure_code_6) as TEXT ) as procedure_code_6\n\t, cast(coalesce(px_code.procedure_code_7, undetermined.procedure_code_7) as TEXT ) as procedure_code_7\n\t, cast(coalesce(px_code.procedure_code_8, undetermined.procedure_code_8) as TEXT ) as procedure_code_8\n\t, cast(coalesce(px_code.procedure_code_9, undetermined.procedure_code_9) as TEXT ) as procedure_code_9\n\t, cast(coalesce(px_code.procedure_code_10, undetermined.procedure_code_10) as TEXT ) as procedure_code_10\n\t, cast(coalesce(px_code.procedure_code_11, undetermined.procedure_code_11) as TEXT ) as procedure_code_11\n\t, cast(coalesce(px_code.procedure_code_12, undetermined.procedure_code_12) as TEXT ) as procedure_code_12\n\t, cast(coalesce(px_code.procedure_code_13, undetermined.procedure_code_13) as TEXT ) as procedure_code_13\n\t, cast(coalesce(px_code.procedure_code_14, undetermined.procedure_code_14) as TEXT ) as procedure_code_14\n\t, cast(coalesce(px_code.procedure_code_15, undetermined.procedure_code_15) as TEXT ) as procedure_code_15\n\t, cast(coalesce(px_code.procedure_code_16, undetermined.procedure_code_16) as TEXT ) as procedure_code_16\n\t, cast(coalesce(px_code.procedure_code_17, undetermined.procedure_code_17) as TEXT ) as procedure_code_17\n\t, cast(coalesce(px_code.procedure_code_18, undetermined.procedure_code_18) as TEXT ) as procedure_code_18\n\t, cast(coalesce(px_code.procedure_code_19, undetermined.procedure_code_19) as TEXT ) as procedure_code_19\n\t, cast(coalesce(px_code.procedure_code_20, undetermined.procedure_code_20) as TEXT ) as procedure_code_20\n\t, cast(coalesce(px_code.procedure_code_21, undetermined.procedure_code_21) as TEXT ) as procedure_code_21\n\t, cast(coalesce(px_code.procedure_code_22, undetermined.procedure_code_22) as TEXT ) as procedure_code_22\n\t, cast(coalesce(px_code.procedure_code_23, undetermined.procedure_code_23) as TEXT ) as procedure_code_23\n\t, cast(coalesce(px_code.procedure_code_24, undetermined.procedure_code_24) as TEXT ) as procedure_code_24\n\t, cast(coalesce(px_code.procedure_code_25, undetermined.procedure_code_25) as TEXT ) as procedure_code_25\n\t, cast(coalesce(px_date.procedure_date_1, undetermined.procedure_date_1) as date ) as procedure_date_1\n\t, cast(coalesce(px_date.procedure_date_2, undetermined.procedure_date_2) as date ) as procedure_date_2\n\t, cast(coalesce(px_date.procedure_date_3, undetermined.procedure_date_3) as date ) as procedure_date_3\n\t, cast(coalesce(px_date.procedure_date_4, undetermined.procedure_date_4) as date ) as procedure_date_4\n\t, cast(coalesce(px_date.procedure_date_5, undetermined.procedure_date_5) as date ) as procedure_date_5\n\t, cast(coalesce(px_date.procedure_date_6, undetermined.procedure_date_6) as date ) as procedure_date_6\n\t, cast(coalesce(px_date.procedure_date_7, undetermined.procedure_date_7) as date ) as procedure_date_7\n\t, cast(coalesce(px_date.procedure_date_8, undetermined.procedure_date_8) as date ) as procedure_date_8\n\t, cast(coalesce(px_date.procedure_date_9, undetermined.procedure_date_9) as date ) as procedure_date_9\n\t, cast(coalesce(px_date.procedure_date_10, undetermined.procedure_date_10) as date ) as procedure_date_10\n\t, cast(coalesce(px_date.procedure_date_11, undetermined.procedure_date_11) as date ) as procedure_date_11\n\t, cast(coalesce(px_date.procedure_date_12, undetermined.procedure_date_12) as date ) as procedure_date_12\n\t, cast(coalesce(px_date.procedure_date_13, undetermined.procedure_date_13) as date ) as procedure_date_13\n\t, cast(coalesce(px_date.procedure_date_14, undetermined.procedure_date_14) as date ) as procedure_date_14\n\t, cast(coalesce(px_date.procedure_date_15, undetermined.procedure_date_15) as date ) as procedure_date_15\n\t, cast(coalesce(px_date.procedure_date_16, undetermined.procedure_date_16) as date ) as procedure_date_16\n\t, cast(coalesce(px_date.procedure_date_17, undetermined.procedure_date_17) as date ) as procedure_date_17\n\t, cast(coalesce(px_date.procedure_date_18, undetermined.procedure_date_18) as date ) as procedure_date_18\n\t, cast(coalesce(px_date.procedure_date_19, undetermined.procedure_date_19) as date ) as procedure_date_19\n\t, cast(coalesce(px_date.procedure_date_20, undetermined.procedure_date_20) as date ) as procedure_date_20\n\t, cast(coalesce(px_date.procedure_date_21, undetermined.procedure_date_21) as date ) as procedure_date_21\n\t, cast(coalesce(px_date.procedure_date_22, undetermined.procedure_date_22) as date ) as procedure_date_22\n\t, cast(coalesce(px_date.procedure_date_23, undetermined.procedure_date_23) as date ) as procedure_date_23\n\t, cast(coalesce(px_date.procedure_date_24, undetermined.procedure_date_24) as date ) as procedure_date_24\n\t, cast(coalesce(px_date.procedure_date_25, undetermined.procedure_date_25) as date ) as procedure_date_25\n\t, cast(med.data_source as TEXT ) as data_source\n    , cast(med.in_network_flag as int ) as in_network_flag\n    , cast('2024-10-01 16:29:14.142894+00:00' as TEXT ) as tuva_last_run\nfrom dev_thuxuan.test.normalized_input__stg_medical_claim med\nleft join dev_thuxuan.claims_preprocessing._int_normalized_input_admit_source_final ad_source\n    on med.claim_id = ad_source.claim_id\n    and med.data_source = ad_source.data_source\nleft join dev_thuxuan.claims_preprocessing._int_normalized_input_admit_type_final ad_type\n    on med.claim_id = ad_type.claim_id\n    and med.data_source = ad_type.data_source\nleft join dev_thuxuan.claims_preprocessing._int_normalized_input_apr_drg_final apr\n    on med.claim_id = apr.claim_id\n    and med.data_source = apr.data_source\nleft join dev_thuxuan.claims_preprocessing._int_normalized_input_bill_type_final bill\n    on med.claim_id = bill.claim_id\n    and med.data_source = bill.data_source\nleft join dev_thuxuan.claims_preprocessing._int_normalized_input_medical_claim_date_normalize claim_line_dates\n    on med.claim_id = claim_line_dates.claim_id\n    and med.claim_line_number = claim_line_dates.claim_line_number\n    and med.data_source = claim_line_dates.data_source\nleft join dev_thuxuan.claims_preprocessing._int_normalized_input_medical_date_aggregation dates\n    on med.claim_id = dates.claim_id\n    and med.data_source = dates.data_source\nleft join dev_thuxuan.claims_preprocessing._int_normalized_input_medical_npi_normalize med_npi\n    on med.claim_id = med_npi.claim_id\n    and med.claim_line_number = med_npi.claim_line_number\n    and med.data_source = med_npi.data_source\nleft join dev_thuxuan.claims_preprocessing._int_normalized_input_discharge_disposition_final disch_disp\n    on med.claim_id = disch_disp.claim_id\n    and med.data_source = disch_disp.data_source\nleft join dev_thuxuan.claims_preprocessing._int_normalized_input_ms_drg_final ms\n    on med.claim_id = ms.claim_id\n    and med.data_source = ms.data_source\nleft join dev_thuxuan.claims_preprocessing._int_normalized_input_place_of_service_normalize pos\n    on med.claim_id = pos.claim_id\n    and med.claim_line_number = pos.claim_line_number\n    and med.data_source = pos.data_source\nleft join dev_thuxuan.claims_preprocessing._int_normalized_input_diagnosis_code_final dx_code\n    on med.claim_id = dx_code.claim_id\n    and med.data_source = dx_code.data_source\nleft join dev_thuxuan.claims_preprocessing._int_normalized_input_present_on_admit_final poa\n    on med.claim_id = poa.claim_id\n    and med.data_source = poa.data_source\nleft join dev_thuxuan.claims_preprocessing._int_normalized_input_procedure_code_final px_code\n    on med.claim_id = px_code.claim_id\n    and med.data_source = px_code.data_source\nleft join dev_thuxuan.claims_preprocessing._int_normalized_input_procedure_date_final px_date\n    on med.claim_id = px_date.claim_id\n    and med.data_source = px_date.data_source\nleft join dev_thuxuan.claims_preprocessing._int_normalized_input_revenue_center_normalize rev\n    on med.claim_id = rev.claim_id\n    and med.claim_line_number = rev.claim_line_number\n    and med.data_source = rev.data_source\nleft join dev_thuxuan.claims_preprocessing._int_normalized_input_undetermined_claim_type undetermined\n    on med.claim_id = undetermined.claim_id\n    and med.claim_line_number = undetermined.claim_line_number\n    and med.data_source = undetermined.data_source", "relation_name": "dev_thuxuan.claims_preprocessing.normalized_input_medical_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:49.440503Z", "completed_at": "2024-10-01T16:33:49.448110Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:49.449035Z", "completed_at": "2024-10-01T16:33:50.559692Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.2565574645996094, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f913-0001-987f0111a556"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__stg_core__eligibility", "compiled": true, "compiled_code": "\nselect\n      patient_id\n    , enrollment_start_date\n    , enrollment_end_date\n    , original_reason_entitlement_code\n    , dual_status_code\n    , medicare_status_code\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.eligibility", "relation_name": "dev_thuxuan.cms_hcc._stg_eligibility"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:49.141194Z", "completed_at": "2024-10-01T16:33:49.153327Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:49.154347Z", "completed_at": "2024-10-01T16:33:50.646398Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.6248481273651123, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f913-0001-987f0111a54e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__data_quality_detail", "compiled": true, "compiled_code": "\n\nSELECT\n    data_source,\n\tsource_date,\n\ttable_name,\n\tdrill_down_key,\n\tdrill_down_value,\n\tclaim_type,\n\tfield_name,\n\tbucket_name,\n\tinvalid_reason,\n\tfield_value,\n\tsummary_sk,\n\t'2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM dev_thuxuan.data_quality.data_quality_claims_detail\n\nunion all\n\nSELECT\n    data_source,\n\tsource_date,\n\ttable_name,\n\tdrill_down_key,\n\tdrill_down_value,\n\t'CLINICAL' AS claim_type,\n\tfield_name,\n\tbucket_name,\n\tinvalid_reason,\n\tfield_value,\n\tsummary_sk,\n\t'2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM dev_thuxuan.data_quality.data_quality_clinical_detail\n\n", "relation_name": "dev_thuxuan.data_quality.data_quality_detail"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:49.317094Z", "completed_at": "2024-10-01T16:33:49.328602Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:49.328602Z", "completed_at": "2024-10-01T16:33:50.889066Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.7259876728057861, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f913-0001-987f0111a552"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__int_all_medications", "compiled": true, "compiled_code": "\n\nwith medications as (\n\n    select\n          patient_id\n        , dispensing_date\n        , source_code\n        , source_code_type\n        , ndc_code\n        , rxnorm_code\n        , data_source\n    from dev_thuxuan.hcc_suspecting._stg_medication\n\n)\n\n, pharmacy_claims as (\n\n    select\n          patient_id\n        , coalesce(dispensing_date, paid_date) as dispensing_date\n        , ndc_code as drug_code\n        , 'ndc' as code_system\n        , data_source\n    from dev_thuxuan.hcc_suspecting._stg_pharmacy_claim\n\n)\n\n, ndc_medications as (\n\n    select\n          patient_id\n        , dispensing_date\n        , ndc_code as drug_code\n        , 'ndc' as code_system\n        , data_source\n    from medications\n    where ndc_code is not null\n\n    union all\n\n    select\n          patient_id\n        , dispensing_date\n        , source_code as drug_code\n        , 'ndc' as code_system\n        , data_source\n    from medications\n    where lower(source_code_type) = 'ndc'\n\n)\n\n, rxnorm_medications as (\n\n    select\n          patient_id\n        , dispensing_date\n        , rxnorm_code as drug_code\n        , 'rxnorm' as code_system\n        , data_source\n    from medications\n    where rxnorm_code is not null\n\n    union all\n\n    select\n          patient_id\n        , dispensing_date\n        , source_code as drug_code\n        , 'rxnorm' as code_system\n        , data_source\n    from medications\n    where lower(source_code_type) = 'rxnorm'\n\n)\n\n, unioned as (\n\n    select * from pharmacy_claims\n    union all\n    select * from ndc_medications\n    union all\n    select * from rxnorm_medications\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(dispensing_date as date) as dispensing_date\n        , cast(drug_code as TEXT) as drug_code\n        , cast(code_system as TEXT) as code_system\n        , cast(data_source as TEXT) as data_source\n    from unioned\n\n)\n\nselect\n      patient_id\n    , dispensing_date\n    , drug_code\n    , code_system\n    , data_source\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.hcc_suspecting._int_all_medications"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:50.417814Z", "completed_at": "2024-10-01T16:33:50.424747Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:50.424747Z", "completed_at": "2024-10-01T16:33:51.550086Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.2552096843719482, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f6d9-0001-987f01112ee6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__stg_eligibility", "compiled": true, "compiled_code": "\n\nselect\n    patient_id\n    , enrollment_start_date\n    , enrollment_end_date\n    , payer\n    , plan\n    , data_source\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.eligibility", "relation_name": "dev_thuxuan.test.financial_pmpm__stg_eligibility"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:50.771043Z", "completed_at": "2024-10-01T16:33:50.777042Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:50.777042Z", "completed_at": "2024-10-01T16:33:51.731697Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.0812695026397705, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f913-0001-987f0111a55a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__stg_pqi_patient", "compiled": true, "compiled_code": "\n\nselect \n    data_source\n  , birth_date\n  , patient_id\n  , sex\nfrom \n    dev_thuxuan.core.patient", "relation_name": "dev_thuxuan.ahrq_measures._stg_pqi_patient"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:50.383939Z", "completed_at": "2024-10-01T16:33:50.392565Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:50.393493Z", "completed_at": "2024-10-01T16:33:51.776068Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.6191825866699219, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f912-0001-987f0111b5ae"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__member_months", "compiled": true, "compiled_code": "\n\nwith month_start_and_end_dates as (\n  select\n    year || \n\n    case when 2 = 0\n        then ''\n    else\n        right(\n            '0' || month,\n            2\n        )\n    end as year_month\n    , min(full_date) as month_start_date\n    , max(full_date) as month_end_date\n  from dev_thuxuan.reference_data.calendar\n  group by year, month, year_month\n)\n\nselect distinct\n    a.patient_id\n  , year_month\n  , a.payer\n  , a.plan\n  , data_source\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.eligibility a\ninner join month_start_and_end_dates b\n  on a.enrollment_start_date <= b.month_end_date\n  and a.enrollment_end_date >= b.month_start_date", "relation_name": "dev_thuxuan.core.member_months"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:51.048304Z", "completed_at": "2024-10-01T16:33:51.061935Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:51.062934Z", "completed_at": "2024-10-01T16:33:52.025632Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1140468120574951, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f912-0001-987f0111b5b2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.cms_chronic_conditions__stg_core__patient", "compiled": true, "compiled_code": "\n\nselect \n    patient_id\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.patient", "relation_name": "dev_thuxuan.test.cms_chronic_conditions__stg_core__patient"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:50.702162Z", "completed_at": "2024-10-01T16:33:50.709163Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:50.709163Z", "completed_at": "2024-10-01T16:33:52.053653Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.4645495414733887, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d58e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.pharmacy__int_claims_current_cost", "compiled": true, "compiled_code": "\n/* All claims, current cost*/\n\nselect \n    p.ndc_code\n  , p.ndc_description\n  , p.data_source\n  , p.rxcui\n  , r.brand_vs_generic\n  , case \n      when ga.brand_with_generic_available is not null \n        then 'brand_with_generic_available' \n      else null \n    end as generic_available\n  , sum(paid_amount) as paid_amount\n  , count(distinct claim_id) as claim_count\n  , sum(paid_amount) / count(distinct claim_id) as cost_per_claim\n  , sum(quantity) as total_units\n  , case \n      when sum(quantity) > 0 \n      and  sum(paid_amount) > 0 \n      then sum(paid_amount) / sum(quantity) \n      else null \n    end as cost_per_unit\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.pharmacy.stg_pharmacy_claim as p\nleft join dev_thuxuan.terminology.rxnorm_brand_generic as r \n  on p.rxcui = r.product_rxcui\nleft join dev_thuxuan.pharmacy._int_brand_with_generic_available as ga \n  on p.rxcui = ga.brand_with_generic_available\nwhere p.ndc_code is not null\ngroup by \n    case \n      when ga.brand_with_generic_available is not null \n        then 'brand_with_generic_available' \n      else null \n    end\n  , r.brand_vs_generic\n  , p.ndc_code\n  , p.rxcui\n  , p.ndc_description\n  , p.data_source", "relation_name": "dev_thuxuan.pharmacy._int_claims_current_cost"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:51.676799Z", "completed_at": "2024-10-01T16:33:51.683417Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:51.684348Z", "completed_at": "2024-10-01T16:33:52.523674Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.0518219470977783, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f7c5-0001-987f0110bd7e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__stg_core__patient", "compiled": true, "compiled_code": "\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.patient", "relation_name": "dev_thuxuan.cms_hcc._stg_patient"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:51.856309Z", "completed_at": "2024-10-01T16:33:51.861813Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:51.862820Z", "completed_at": "2024-10-01T16:33:52.928476Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.221585988998413, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f7c5-0001-987f0110bd82"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ed_classification__stg_patient", "compiled": true, "compiled_code": "\n\nselect\n    patient_id\n    , sex\n    , birth_date\n    , race\n    , state\n    , zip_code\n    , latitude\n    , longitude\nfrom dev_thuxuan.core.patient", "relation_name": "dev_thuxuan.ed_classification.ed_classification__stg_patient"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:52.009121Z", "completed_at": "2024-10-01T16:33:52.014633Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:52.015632Z", "completed_at": "2024-10-01T16:33:53.106549Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.2465898990631104, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d592"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__stg_core__patient", "compiled": true, "compiled_code": "\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\nfrom dev_thuxuan.core.patient", "relation_name": "dev_thuxuan.hcc_suspecting._stg_patient"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:52.178289Z", "completed_at": "2024-10-01T16:33:52.194308Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:52.194828Z", "completed_at": "2024-10-01T16:33:53.397678Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.363192081451416, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f913-0001-987f0111a55e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__stg_core__patient", "compiled": true, "compiled_code": "\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.patient", "relation_name": "dev_thuxuan.quality_measures._stg_patient"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:52.172784Z", "completed_at": "2024-10-01T16:33:52.186472Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:52.187516Z", "completed_at": "2024-10-01T16:33:53.571852Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.5727746486663818, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d596"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.mart_review__patient", "compiled": true, "compiled_code": "\n\nSELECT *,\n    patient_id || '|' || data_source as patient_data_source_key\nFROM dev_thuxuan.core.patient", "relation_name": "dev_thuxuan.data_quality.mart_review__patient"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:52.735632Z", "completed_at": "2024-10-01T16:33:52.743633Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:52.745141Z", "completed_at": "2024-10-01T16:33:53.959711Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.375694751739502, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d59a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.tuva_chronic_conditions__stg_core__patient", "compiled": true, "compiled_code": "\n\nselect \n    patient_id\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.patient", "relation_name": "dev_thuxuan.test.tuva_chronic_conditions__stg_core__patient"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:53.265238Z", "completed_at": "2024-10-01T16:33:53.276241Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:53.277255Z", "completed_at": "2024-10-01T16:33:54.343810Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.2027297019958496, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f7c5-0001-987f0110bd86"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.dbt_utils_unique_combination_of_columns_normalized_input__medical_claim_claim_id__claim_line_number.6d94c0c08d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        claim_id, claim_line_number\n    from dev_thuxuan.claims_preprocessing.normalized_input_medical_claim\n    group by claim_id, claim_line_number\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:53.084413Z", "completed_at": "2024-10-01T16:33:53.107550Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:53.110558Z", "completed_at": "2024-10-01T16:33:54.996257Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.0326478481292725, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f913-0001-987f0111a562"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__data_quality_for_pbi", "compiled": true, "compiled_code": "\n\nSELECT\n    data_source,\n    field_name,\n    table_name,\n    claim_type,\n    bucket_name,\n    field_value,\n    drill_down_key,\n    drill_down_value,\n    invalid_reason,\n    summary_sk,\n    frequency,\n\t'2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM dev_thuxuan.data_quality.data_quality_claims_for_pbi\n\nunion all\n\nSELECT\n    data_source,\n    field_name,\n    table_name,\n    'CLINICAL' AS claim_type,\n    bucket_name,\n    field_value,\n    drill_down_key,\n    drill_down_value,\n    invalid_reason,\n    summary_sk,\n    frequency,\n\t'2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM dev_thuxuan.data_quality.data_quality_clinical_for_pbi\n\n", "relation_name": "dev_thuxuan.data_quality.data_quality_for_pbi"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:54.120330Z", "completed_at": "2024-10-01T16:33:54.132369Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:54.134372Z", "completed_at": "2024-10-01T16:33:55.257902Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.290907382965088, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d59e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_shared_exclusion_missing_age", "compiled": true, "compiled_code": "\n\n/* Exclude patients with missing age */\nselect \n    data_source\n    , patient_id\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_patient\nwhere birth_date is null", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_shared_exclusions_missing_age"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:54.473964Z", "completed_at": "2024-10-01T16:33:54.482073Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:54.482073Z", "completed_at": "2024-10-01T16:33:55.570428Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.2409098148345947, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d5a2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_shared_exclusion_missing_gender", "compiled": true, "compiled_code": "\n\n-- Exclude patients with undefined or missing gender\nselect \n    data_source\n  , patient_id\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_patient\nwhere \n  sex not in ('male', 'female')", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_shared_exclusion_missing_gender"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:53.542476Z", "completed_at": "2024-10-01T16:33:53.554328Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:53.555324Z", "completed_at": "2024-10-01T16:33:55.710276Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.2886199951171875, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f912-0001-987f0111b5b6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__crosswalk_field_to_mart_sk", "compiled": true, "compiled_code": "\n\n\n\nwith results as (\n\n    select distinct\n        table_name as input_layer_table_name\n      , claim_type\n      , field_name\n      , cast(NULL as TEXT) AS mart_name\n    from dev_thuxuan.data_quality.data_quality_detail\n\n    union all\n\n    select\n        input_layer_table_name\n      , claim_type\n      , field_name\n      , mart_name\n    from dev_thuxuan.data_quality._value_set_crosswalk_field_to_mart\n\n)\n\n, final as (\n\n    select\n        input_layer_table_name\n      , claim_type\n      , field_name\n      , mart_name\n      , DENSE_RANK () OVER (ORDER BY input_layer_table_name, claim_type, field_name) as table_claim_type_field_sk\n\t, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\n    from results\n    group by\n        input_layer_table_name\n      , claim_type\n      , field_name\n      , mart_name\n\n)\n\nselect * from final", "relation_name": "dev_thuxuan.data_quality.crosswalk_field_to_mart_sk"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:53.752097Z", "completed_at": "2024-10-01T16:33:53.763603Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:53.764609Z", "completed_at": "2024-10-01T16:33:55.712795Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.093622922897339, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f912-0001-987f0111b5ba"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__quality_trend", "compiled": true, "compiled_code": "\n\n\nwith cte as (\nselect try_cast( d.source_date as date ) as source_date_type\n    ,summary_sk\n    ,SUM(CASE WHEN bucket_name = 'valid' THEN 1 ELSE 0 END) as valid_num\n    ,SUM(CASE WHEN bucket_name <> 'null' THEN 1 ELSE 0 END) as fill_num\n    ,COUNT(drill_down_value) as denom\nfrom dev_thuxuan.data_quality.data_quality_detail d\ngroup by\n    try_cast( d.source_date as date )\n    ,summary_sk\n\n)\n\nselect\n      c.first_day_of_month\n    , summary_sk\n    , sum(valid_num) as valid_num\n    , sum(fill_num) as fill_num\n    , sum(denom)  as denom\nfrom cte\nleft join dev_thuxuan.reference_data.calendar c on cte.source_date_type = c.full_date\ngroup by\n      c.first_day_of_month\n    , summary_sk", "relation_name": "dev_thuxuan.data_quality.quality_trend"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:55.123000Z", "completed_at": "2024-10-01T16:33:55.130479Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:55.130479Z", "completed_at": "2024-10-01T16:33:56.183608Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1831512451171875, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f7c5-0001-987f0110bd8a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__stg_pqi_member_months", "compiled": true, "compiled_code": "\n\nwith\n\ndate_int as (\n    select distinct\n        replace(year_month,'-','') yyyymm\n      , first_day_of_month\n    from dev_thuxuan.reference_data.calendar as c\n)\n\nselect \n    data_source\n  , patient_id\n  , first_day_of_month\n  , d.yyyymm as year_month\n\nfrom \n    dev_thuxuan.core.member_months mm\ninner join date_int d on mm.year_month = d.yyyymm", "relation_name": "dev_thuxuan.ahrq_measures._stg_pqi_member_months"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:55.415297Z", "completed_at": "2024-10-01T16:33:55.423371Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:55.424546Z", "completed_at": "2024-10-01T16:33:56.376569Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.083183765411377, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f7c5-0001-987f0110bd8e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__stg_core__member_months", "compiled": true, "compiled_code": "\nselect\n     patient_id\n    , year_month\n    , payer\n    , plan\n    , data_source\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.member_months", "relation_name": "dev_thuxuan.cms_hcc._stg_member_months"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:55.835618Z", "completed_at": "2024-10-01T16:33:55.842719Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:55.843711Z", "completed_at": "2024-10-01T16:33:56.987491Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.2579448223114014, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f913-0001-987f0111a566"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.pharmacy__int_generic_cost", "compiled": true, "compiled_code": "\n\n/* for each brand rxcui, what is the average cost/unit of generics available*/\n\nselect\n    g.product_rxcui as brand_rxcui\n  , cl.data_source\n  , max(case when claim_count > 0 then 1 else 0 end) as prescribed_atleast_one_generic_history\n  , sum(case when total_units > 0 and paid_amount > 0 then paid_amount else null end)/sum(case when total_units > 0 and paid_amount > 0 then total_units else null end) as generic_average_cost_per_unit\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.pharmacy.rxnorm_generic_available as g\nleft join dev_thuxuan.pharmacy._int_claims_current_cost as cl \n  on cl.ndc_code = g.ndc\nwhere cl.brand_vs_generic = 'generic'\ngroup by\n    g.product_rxcui\n  , cl.data_source", "relation_name": "dev_thuxuan.pharmacy._int_generic_cost"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:55.722818Z", "completed_at": "2024-10-01T16:33:55.729516Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:55.729516Z", "completed_at": "2024-10-01T16:33:57.254973Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.6624314785003662, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d5a6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.mart_review__stg_member_month", "compiled": true, "compiled_code": "\n\nwith cte as\n(\nselect distinct year_month_int\n,full_date\nfrom dev_thuxuan.reference_data.calendar c\nwhere day = 1\n\n)\n\nselect  mm.*\n,c.year_month_int\n,c.full_date as year_month_date\nFROM dev_thuxuan.core.member_months mm\nleft join cte c on cast(mm.year_month as int) = c.year_month_int", "relation_name": "dev_thuxuan.data_quality.mart_review__stg_member_month"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:56.503481Z", "completed_at": "2024-10-01T16:33:56.512999Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:56.512999Z", "completed_at": "2024-10-01T16:33:57.519981Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1497342586517334, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f6d9-0001-987f01112eea"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.accepted_values_quality_measures__stg_core__patient_sex__female__male__unknown.e6adc9ce2b", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        sex as value_field,\n        count(*) as n_records\n\n    from dev_thuxuan.quality_measures._stg_patient\n    group by sex\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'female','male','unknown'\n)\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:57.099379Z", "completed_at": "2024-10-01T16:33:57.105441Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:57.106385Z", "completed_at": "2024-10-01T16:33:57.853034Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.8996562957763672, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f7c5-0001-987f0110bd96"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__patient_birth_date.4b3a2e74e6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect birth_date\nfrom dev_thuxuan.quality_measures._stg_patient\nwhere birth_date is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:55.857321Z", "completed_at": "2024-10-01T16:33:55.863956Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:55.863956Z", "completed_at": "2024-10-01T16:33:57.643633Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.9532005786895752, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f912-0001-987f0111b5be"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.pharmacy__int_generic_cost_by_ndc", "compiled": true, "compiled_code": "\n\n/* for each brand rxcui, what is the average cost/unit of all generics available*/\n\nselect\n    g.product_rxcui as brand_rxcui\n  , cl.data_source\n  , cl.ndc_code as generic_ndc_code\n  , cl.paid_amount\n  , cl.claim_count\n  , cl.total_units\n  , cl.cost_per_unit\n  , case when claim_count > 0 then 1 else 0 end as prescribed_atleast_one_generic_history\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.pharmacy.rxnorm_generic_available as g\nleft join dev_thuxuan.pharmacy._int_claims_current_cost as cl \n  on cl.ndc_code = g.ndc\nwhere cl.brand_vs_generic = 'generic'", "relation_name": "dev_thuxuan.pharmacy._int_generic_cost_by_ndc"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:57.390502Z", "completed_at": "2024-10-01T16:33:57.395534Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:57.396503Z", "completed_at": "2024-10-01T16:33:58.025455Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.8021337985992432, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f7c5-0001-987f0110bd9a"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__patient_patient_id.5510e1a0fd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom dev_thuxuan.quality_measures._stg_patient\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:56.311127Z", "completed_at": "2024-10-01T16:33:56.337129Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:56.338129Z", "completed_at": "2024-10-01T16:33:58.063156Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.9422523975372314, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f7c5-0001-987f0110bd92"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_members", "compiled": true, "compiled_code": "\n/*\nSteps for transforming eligibility data into member demographics:\n    1) Determine enrollment status using eligibility from the collection year.\n    2) Roll up to latest eligibility record for enrollment statuses.\n    3) Add age groups based on the payment year.\n    4) Determine other statuses.\n\nJinja is used to set payment year variable.\n - The payment_year var has been set here so it gets compiled.\n - CMS guidance: Age is calculated as of Feb 1 of the payment year.\n - The collection year is one year prior to the payment year.\n*/\n\n\n\n\nwith stg_eligibility as (\n\n    select\n          patient_id\n        , enrollment_start_date\n        , enrollment_end_date\n        , original_reason_entitlement_code\n        , dual_status_code\n        , medicare_status_code\n        , row_number() over(\n            partition by patient_id\n            order by enrollment_end_date desc\n        ) as row_num /* used to dedupe eligibility */\n    from dev_thuxuan.cms_hcc._stg_eligibility\n    where (\n        /* Include members with any overlap in the collection or payment year */\n        enrollment_start_date <= '2024-12-31'\n        and enrollment_end_date >= '2023-01-01'\n    )\n\n)\n\n, stg_patient as (\n\n    select\n          patient_id\n        , sex\n        , birth_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        '2024-02-01'\n        ) / 8766.0) as payment_year_age\n        , death_date\n    from dev_thuxuan.cms_hcc._stg_patient\n\n)\n\n/* create proxy enrollment dates if outside of the collection year */\n, cap_collection_start_end_dates as (\n\n    select\n          patient_id\n        , enrollment_start_date\n        , enrollment_end_date\n        , case\n            when enrollment_start_date < try_cast( '2023-01-01' as date )\n            then try_cast( '2023-01-01' as date )\n            else enrollment_start_date\n          end as proxy_enrollment_start_date\n        , case\n            when enrollment_end_date > try_cast( '2024-12-31' as date )\n            then try_cast( '2024-12-31' as date )\n            else enrollment_end_date\n          end as proxy_enrollment_end_date\n    from stg_eligibility\n    where (\n        /* filter to members with eligibility in collection or payment year */\n        \n            extract(year from enrollment_start_date)\n                between 2023\n                and 2024\n            or extract(year from enrollment_end_date)\n                between 2023\n                and 2024\n        \n    )\n\n)\n\n, calculate_prior_coverage as (\n\n    select patient_id\n        , sum(datediff(\n        month,\n        proxy_enrollment_start_date,\n        proxy_enrollment_end_date\n        ) + 1) as coverage_months  /* include starting month */\n    from cap_collection_start_end_dates\n    group by patient_id\n\n)\n\n/*\n   CMS guidance: A \u201cNew Enrollee\u201d status is when a beneficiary has less than\n   12 months of coverage prior to the payment year.\n*/\n, add_enrollment as (\n\n    select\n          patient_id\n        , case\n            when coverage_months < 12 then 'New'\n            else 'Continuing'\n          end as enrollment_status\n    from calculate_prior_coverage\n\n)\n\n, latest_eligibility as (\n\n    select\n          stg_eligibility.patient_id\n        , stg_patient.sex as gender\n        , stg_patient.payment_year_age\n        , stg_eligibility.original_reason_entitlement_code\n        , stg_eligibility.dual_status_code\n        , stg_eligibility.medicare_status_code\n        /* Defaulting to \"New\" enrollment status when missing */\n        , case\n            when add_enrollment.enrollment_status is null then 'New'\n            else add_enrollment.enrollment_status\n          end as enrollment_status\n        \n            , case\n                when add_enrollment.enrollment_status is null then TRUE\n                else FALSE\n              end as enrollment_status_default\n        \n    from stg_eligibility\n        left join add_enrollment\n            on stg_eligibility.patient_id = add_enrollment.patient_id\n        left join stg_patient\n            on stg_eligibility.patient_id = stg_patient.patient_id\n    where stg_eligibility.row_num = 1\n\n)\n\n, add_age_group as (\n\n    select\n          patient_id\n        , gender\n        , payment_year_age\n        , original_reason_entitlement_code\n        , dual_status_code\n        , medicare_status_code\n        , enrollment_status\n        , enrollment_status_default\n        , case\n            when enrollment_status = 'Continuing' and payment_year_age between 0 and 34 then '0-34'\n            when enrollment_status = 'Continuing' and payment_year_age between 35 and 44 then '35-44'\n            when enrollment_status = 'Continuing' and payment_year_age between 45 and 54 then '45-54'\n            when enrollment_status = 'Continuing' and payment_year_age between 55 and 59 then '55-59'\n            when enrollment_status = 'Continuing' and payment_year_age between 60 and 64 then '60-64'\n            when enrollment_status = 'Continuing' and payment_year_age between 65 and 69 then '65-69'\n            when enrollment_status = 'Continuing' and payment_year_age between 70 and 74 then '70-74'\n            when enrollment_status = 'Continuing' and payment_year_age between 75 and 79 then '75-79'\n            when enrollment_status = 'Continuing' and payment_year_age between 80 and 84 then '80-84'\n            when enrollment_status = 'Continuing' and payment_year_age between 85 and 89 then '85-89'\n            when enrollment_status = 'Continuing' and payment_year_age between 90 and 94 then '90-94'\n            when enrollment_status = 'Continuing' and payment_year_age >= 95 then '>=95'\n            when enrollment_status = 'New' and payment_year_age between 0 and 34 then '0-34'\n            when enrollment_status = 'New' and payment_year_age between 35 and 44 then '35-44'\n            when enrollment_status = 'New' and payment_year_age between 45 and 54 then '45-54'\n            when enrollment_status = 'New' and payment_year_age between 55 and 59 then '55-59'\n            when enrollment_status = 'New' and payment_year_age between 60 and 64 then '60-64'\n            when enrollment_status = 'New' and payment_year_age = 65 then '65'\n            when enrollment_status = 'New' and payment_year_age = 66 then '66'\n            when enrollment_status = 'New' and payment_year_age = 67 then '67'\n            when enrollment_status = 'New' and payment_year_age = 68 then '68'\n            when enrollment_status = 'New' and payment_year_age = 69 then '69'\n            when enrollment_status = 'New' and payment_year_age between 70 and 74 then '70-74'\n            when enrollment_status = 'New' and payment_year_age between 75 and 79 then '75-79'\n            when enrollment_status = 'New' and payment_year_age between 80 and 84 then '80-84'\n            when enrollment_status = 'New' and payment_year_age between 85 and 89 then '85-89'\n            when enrollment_status = 'New' and payment_year_age between 90 and 94 then '90-94'\n            when enrollment_status = 'New' and payment_year_age >= 95 then '>=95'\n          end as age_group\n    from latest_eligibility\n\n)\n\n, add_status_logic as (\n\n    select\n          patient_id\n        , enrollment_status\n        , case\n            when gender = 'female' then 'Female'\n            when gender = 'male' then 'Male'\n            else null\n          end as gender\n        , age_group\n        , case\n            when dual_status_code in ('01','02','03','04','05','06','08') then 'Yes'\n            else 'No'\n          end as medicaid_status\n        , case\n            when dual_status_code in ('02','04','08') then 'Full'\n            when dual_status_code in ('01','03','05','06') then 'Partial'\n            else 'Non'\n          end as dual_status\n        /*\n           The CMS-HCC model does not have factors for ESRD for these edge-cases,\n           we default to 'Aged'. When OREC is missing, latest Medicare status is\n           used, if available.\n        */\n        , case\n            when original_reason_entitlement_code in ('0','2') then 'Aged'\n            when original_reason_entitlement_code in ('1','3') then 'Disabled'\n            when original_reason_entitlement_code is null and medicare_status_code in ('10','11','31') then 'Aged'\n            when original_reason_entitlement_code is null and medicare_status_code in ('20','21') then 'Disabled'\n            when coalesce(original_reason_entitlement_code,medicare_status_code) is null then 'Aged'\n          end as orec\n        /* Defaulting everyone to non-institutional until logic is added */\n        , cast('No' as TEXT) as institutional_status\n        , enrollment_status_default\n        , case\n            \n                when dual_status_code is null then TRUE\n                else FALSE\n            \n          end as medicaid_dual_status_default\n        /* Setting default true when OREC or Medicare Status is ESRD, or null */\n        , case\n            \n                when original_reason_entitlement_code in ('2') then TRUE\n                when original_reason_entitlement_code is null and medicare_status_code in ('31') then TRUE\n                when coalesce(original_reason_entitlement_code,medicare_status_code) is null then TRUE\n                else FALSE\n            \n          end as orec_default\n        /* Setting default true until institutional logic is added */\n        \n            , TRUE as institutional_status_default\n        \n    from add_age_group\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(enrollment_status as TEXT) as enrollment_status\n        , cast(gender as TEXT) as gender\n        , cast(age_group as TEXT) as age_group\n        , cast(medicaid_status as TEXT) as medicaid_status\n        , cast(dual_status as TEXT) as dual_status\n        , cast(orec as TEXT) as orec\n        , cast(institutional_status as TEXT) as institutional_status\n        \n            , cast(enrollment_status_default as boolean) as enrollment_status_default\n            , cast(medicaid_dual_status_default as boolean) as medicaid_dual_status_default\n            , cast(orec_default as boolean) as orec_default\n            , cast(institutional_status_default as boolean) as institutional_status_default\n        \n        , cast('2024' as integer) as payment_year\n    from add_status_logic\n\n)\n\nselect\n      patient_id\n    , enrollment_status\n    , gender\n    , age_group\n    , medicaid_status\n    , dual_status\n    , orec\n    , institutional_status\n    , enrollment_status_default\n    , medicaid_dual_status_default\n    , orec_default\n    , institutional_status_default\n    , payment_year\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.cms_hcc._int_members"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:57.657210Z", "completed_at": "2024-10-01T16:33:57.662878Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:57.662878Z", "completed_at": "2024-10-01T16:33:58.510189Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.983403205871582, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f913-0001-987f0111a56a"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__patient_sex.e2f34cab69", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sex\nfrom dev_thuxuan.quality_measures._stg_patient\nwhere sex is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:58.005032Z", "completed_at": "2024-10-01T16:33:58.014719Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:58.016430Z", "completed_at": "2024-10-01T16:33:59.457233Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.6023166179656982, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d5aa"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__stg_medical_claim", "compiled": true, "compiled_code": "\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_id\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim", "relation_name": "dev_thuxuan.test.acute_inpatient__stg_medical_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:58.197080Z", "completed_at": "2024-10-01T16:33:58.203897Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:58.204810Z", "completed_at": "2024-10-01T16:33:59.433737Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.4334921836853027, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f8ce-0001-987f0111d5ae"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__stg_medical_claim", "compiled": true, "compiled_code": "\n\nselect\napr_drg_code,\nbill_type_code,\nclaim_id,\nclaim_line_number,\nclaim_type,\nhcpcs_code,\nms_drg_code,\nplace_of_service_code,\nrevenue_center_code,\n'2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim", "relation_name": "dev_thuxuan.test.service_category__stg_medical_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:58.036563Z", "completed_at": "2024-10-01T16:33:58.043595Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:58.045104Z", "completed_at": "2024-10-01T16:33:59.515066Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.6496319770812988, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f912-0001-987f0111b5c2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.emergency_department__stg_medical_claim", "compiled": true, "compiled_code": "\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_id\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim", "relation_name": "dev_thuxuan.test.emergency_department__stg_medical_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:58.259315Z", "completed_at": "2024-10-01T16:33:58.273097Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:58.274173Z", "completed_at": "2024-10-01T16:33:59.804932Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.6659724712371826, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f912-0001-987f0111b5c6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.claims_enrollment__flag_claims_with_enrollment", "compiled": true, "compiled_code": "\n\n\nwith claim_dates as(\n    select\n         claim_id || '-' || claim_line_number as medical_claim_id\n        , patient_id\n        , payer\n        , plan\n        , coalesce(claim_line_start_date, claim_start_date, admission_date) as inferred_claim_start_date\n        , coalesce(claim_line_end_date, claim_end_date, discharge_date) as inferred_claim_end_date\n        , case\n            when claim_line_start_date is not null then 'claim_line_start_date'\n            when claim_line_start_date is null and claim_start_date is not null then 'claim_start_date'\n            when claim_line_start_date is null and claim_start_date is null and admission_date is not null then 'admission_date'\n        end as inferred_claim_start_column_used\n        , case\n            when claim_line_end_date is not null then 'claim_line_end_date'\n            when claim_line_end_date is null and claim_end_date is not null then 'claim_end_date'\n            when claim_line_end_date is null and claim_end_date is null and discharge_date is not null then 'discharge_date'\n        end as inferred_claim_end_column_used\n    from dev_thuxuan.claims_preprocessing.normalized_input_medical_claim\n)\n\n, claim_year_month as(\n    select\n        medical_claim_id\n        , patient_id\n        , payer\n        , plan\n        , inferred_claim_start_date\n        , inferred_claim_end_date\n        , inferred_claim_start_column_used\n        , inferred_claim_end_column_used\n\n        , date_part('year', inferred_claim_start_date) || \n\n    case when 2 = 0\n        then ''\n    else\n        right(\n            '0' || date_part('month', inferred_claim_start_date),\n            2\n        )\n    end as inferred_claim_start_year_month\n\n    , date_part('year', inferred_claim_end_date) || \n\n    case when 2 = 0\n        then ''\n    else\n        right(\n            '0' || date_part('month', inferred_claim_end_date),\n            2\n        )\n    end as inferred_claim_end_year_month\n\nfrom claim_dates\n\n)\n\nselect distinct\n    claim.medical_claim_id\n    , claim.patient_id\n    , claim.payer\n    , claim.plan\n    , claim.inferred_claim_start_year_month\n    , claim.inferred_claim_end_year_month\n    , claim.inferred_claim_start_column_used\n    , claim.inferred_claim_end_column_used\n    , cast('2024-10-01 16:29:14.142894+00:00' as timestamp ) as tuva_last_run\nfrom dev_thuxuan.core.member_months mm\ninner join claim_year_month claim\n    on mm.patient_id = claim.patient_id\n    and mm.payer = claim.payer\n    and mm.plan = claim.plan\n    and mm.year_month >= claim.inferred_claim_start_year_month\n    and mm.year_month <= claim.inferred_claim_end_year_month", "relation_name": "dev_thuxuan.claims_preprocessing.flag_claims_with_enrollment"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:58.645037Z", "completed_at": "2024-10-01T16:33:58.653057Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:58.653057Z", "completed_at": "2024-10-01T16:34:00.165641Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.6578001976013184, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76701-010a-f7c5-0001-987f0110bd9e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.data_quality__summary", "compiled": true, "compiled_code": "\n\nWITH CTE AS (\n    SELECT DISTINCT fm.field_name\n    ,fm.input_layer_table_name\n    ,fm.claim_type\n    ,table_claim_type_field_sk\n    FROM dev_thuxuan.data_quality.crosswalk_field_to_mart_sk fm\n)\n\nSELECT\n    summary_sk,\n    fm.table_claim_type_field_sk,\n    data_source,\n    x.table_name,\n    x.claim_type,\n    x.field_name,\n    sct.red,\n    sct.green,\n    sum(case when bucket_name = 'valid' then 1 else 0 end) as valid_num,\n    sum(case when bucket_name <> 'null' then 1 else 0 end) as fill_num,\n    count(drill_down_value) as denom,\n    '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM\n    dev_thuxuan.data_quality.data_quality_detail x\nLEFT JOIN CTE fm\n    on x.field_name = fm.field_name\n    and\n    fm.input_layer_table_name = x.table_name\n    and\n    fm.claim_type = x.claim_type\nLEFT JOIN dev_thuxuan.data_quality._value_set_crosswalk_field_info sct\n    on x.field_name = sct.field_name\n    and\n    sct.input_layer_table_name = x.table_name\n    and\n    sct.claim_type = x.claim_type\nGROUP BY\n    summary_sk,\n    data_source,\n    fm.table_claim_type_field_sk,\n    x.claim_type,\n    x.table_name,\n    x.field_name,\n    sct.red,\n    sct.green", "relation_name": "dev_thuxuan.data_quality.summary"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:59.635609Z", "completed_at": "2024-10-01T16:33:59.641640Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:59.641640Z", "completed_at": "2024-10-01T16:34:00.743757Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.228724718093872, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f912-0001-987f0111b5ca"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_03_denom", "compiled": true, "compiled_code": "\n\nselect distinct\n    cast(substring(e.year_month, 1, 4) as int) AS year_number\n  , e.patient_id\n  , e.data_source\n  , datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) as age\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_member_months as e\ninner join dev_thuxuan.ahrq_measures._stg_pqi_patient as p \n  on e.patient_id = p.patient_id\n  and p.data_source = e.data_source\nwhere \n  datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) >= 18", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_03_denom"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:59.677189Z", "completed_at": "2024-10-01T16:33:59.685193Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:59.686202Z", "completed_at": "2024-10-01T16:34:00.736718Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1891462802886963, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f912-0001-987f0111b5ce"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_05_denom", "compiled": true, "compiled_code": "\n\nselect distinct\n    cast(substring(e.year_month, 1, 4) as int) AS year_number\n  , e.patient_id\n  , e.data_source\n  , datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) as age\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_member_months as e\ninner join dev_thuxuan.ahrq_measures._stg_pqi_patient as p \n  on e.patient_id = p.patient_id\n  and p.data_source = e.data_source\nwhere \n  datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) >= 40", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_05_denom"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:59.612026Z", "completed_at": "2024-10-01T16:33:59.620163Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:59.621280Z", "completed_at": "2024-10-01T16:34:00.783811Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.285193920135498, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f913-0001-987f0111a56e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_01_denom", "compiled": true, "compiled_code": "\n\nselect distinct\n    cast(substring(e.year_month, 1, 4) as int) AS year_number\n  , e.patient_id\n  , e.data_source\n  , datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) as age\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_member_months as e\ninner join dev_thuxuan.ahrq_measures._stg_pqi_patient as p \n  on e.patient_id = p.patient_id\n  and p.data_source = e.data_source\nwhere \n  datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) >= 18", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_01_denom"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:33:59.930812Z", "completed_at": "2024-10-01T16:33:59.937811Z"}, {"name": "execute", "started_at": "2024-10-01T16:33:59.937811Z", "completed_at": "2024-10-01T16:34:00.904874Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2422239780426025, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112eee"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_07_denom", "compiled": true, "compiled_code": "\n\nselect distinct\n    cast(substring(e.year_month, 1, 4) as int) AS year_number\n  , e.patient_id\n  , e.data_source\n  , datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) as age\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_member_months as e\ninner join dev_thuxuan.ahrq_measures._stg_pqi_patient as p \n  on e.patient_id = p.patient_id\n  and p.data_source = e.data_source\nwhere \n  datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) >= 18", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_07_denom"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:00.307350Z", "completed_at": "2024-10-01T16:34:00.314427Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:00.315426Z", "completed_at": "2024-10-01T16:34:01.380953Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.2089576721191406, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f912-0001-987f0111b5d2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_08_denom", "compiled": true, "compiled_code": "\n\nselect distinct\n    cast(substring(e.year_month, 1, 4) as int) AS year_number\n  , e.patient_id\n  , e.data_source\n  , datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) as age\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_member_months as e\ninner join dev_thuxuan.ahrq_measures._stg_pqi_patient as p \n  on e.patient_id = p.patient_id\n  and p.data_source = e.data_source\nwhere \n  datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) >= 18", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_08_denom"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:00.918019Z", "completed_at": "2024-10-01T16:34:00.924019Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:00.924019Z", "completed_at": "2024-10-01T16:34:01.940982Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.1484134197235107, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f912-0001-987f0111b5d6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_14_denom", "compiled": true, "compiled_code": "\n\nselect distinct\n    cast(substring(e.year_month, 1, 4) as int) AS year_number\n  , e.patient_id\n  , e.data_source\n  , datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) as age\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_member_months as e\ninner join dev_thuxuan.ahrq_measures._stg_pqi_patient as p \n  on e.patient_id = p.patient_id\n  and p.data_source = e.data_source\nwhere \n  datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) >= 18", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_14_denom"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:00.877330Z", "completed_at": "2024-10-01T16:34:00.890638Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:00.890638Z", "completed_at": "2024-10-01T16:34:01.952015Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.2072505950927734, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110bda2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_11_denom", "compiled": true, "compiled_code": "\n\nselect distinct\n    cast(substring(e.year_month, 1, 4) as int) AS year_number\n  , e.patient_id\n  , e.data_source\n  , datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) as age\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_member_months as e\ninner join dev_thuxuan.ahrq_measures._stg_pqi_patient as p \n  on e.patient_id = p.patient_id\n  and p.data_source = e.data_source\nwhere \n  datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) >= 18", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_11_denom"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:00.884621Z", "completed_at": "2024-10-01T16:34:00.897202Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:00.900308Z", "completed_at": "2024-10-01T16:34:02.040060Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.2877600193023682, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112ef2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_12_denom", "compiled": true, "compiled_code": "\n\nselect distinct\n    cast(substring(e.year_month, 1, 4) as int) AS year_number\n  , e.patient_id\n  , e.data_source\n  , datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) as age\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_member_months as e\ninner join dev_thuxuan.ahrq_measures._stg_pqi_patient as p \n  on e.patient_id = p.patient_id\n  and p.data_source = e.data_source\nwhere \n  datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) >= 18", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_12_denom"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:01.177026Z", "completed_at": "2024-10-01T16:34:01.184537Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:01.185538Z", "completed_at": "2024-10-01T16:34:02.221870Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.163832426071167, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112ef6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_15_denom", "compiled": true, "compiled_code": "\n\nselect distinct\n    cast(substring(e.year_month, 1, 4) as int) AS year_number\n  , e.patient_id\n  , e.data_source\n  , datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) as age\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_member_months as e\ninner join dev_thuxuan.ahrq_measures._stg_pqi_patient as p \n  on e.patient_id = p.patient_id\n  and p.data_source = e.data_source\nwhere \n  datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) >= 18\n  and\n  datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) <= 39", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_15_denom"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:01.521321Z", "completed_at": "2024-10-01T16:34:01.529321Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:01.530396Z", "completed_at": "2024-10-01T16:34:02.495315Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1025705337524414, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d5b2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_16_denom", "compiled": true, "compiled_code": "\n\nselect distinct\n    cast(substring(e.year_month, 1, 4) as int) AS year_number\n  , e.patient_id\n  , e.data_source\n  , datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) as age\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_member_months as e\ninner join dev_thuxuan.ahrq_measures._stg_pqi_patient as p \n  on e.patient_id = p.patient_id\n  and p.data_source = e.data_source\nwhere \n  datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) >= 18", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_16_denom"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:02.169056Z", "completed_at": "2024-10-01T16:34:02.175017Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:02.176017Z", "completed_at": "2024-10-01T16:34:03.086956Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1034791469573975, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d5b6"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_cms_hcc__int_members_patient_id.75e528329b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom dev_thuxuan.cms_hcc._int_members\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:02.345357Z", "completed_at": "2024-10-01T16:34:02.352368Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:02.353368Z", "completed_at": "2024-10-01T16:34:03.117943Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.9296374320983887, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d5ba"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.unique_cms_hcc__int_members_patient_id.4d202f2bbb", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    patient_id as unique_field,\n    count(*) as n_records\n\nfrom dev_thuxuan.cms_hcc._int_members\nwhere patient_id is not null\ngroup by patient_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:02.093631Z", "completed_at": "2024-10-01T16:34:02.102143Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:02.103142Z", "completed_at": "2024-10-01T16:34:03.496448Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.617143154144287, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112efa"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.mart_review__enrollment_change", "compiled": true, "compiled_code": "\n\nWITH RankedMonths AS (\n    SELECT\n        patient_id,\n        year_month,\n        data_source,\n        lag(year_month_date, 1) over (partition by patient_id, data_source order by year_month_date) as prev_year_month,\n        lead(year_month_date, 1) over (partition by patient_id, data_source order by year_month_date) as next_year_month,\n        year_month_date\n    FROM dev_thuxuan.data_quality.mart_review__stg_member_month\n),\nChanges AS (\n SELECT\n    patient_id,\n    data_source,\n    year_month_date as change_month,\n    case\n        when prev_year_month is null\n            or \n\n    dateadd(\n        month,\n        -1,\n        year_month_date\n        )\n\n != prev_year_month\n        then 'added'\n    end as change_type\nFROM RankedMonths\nunion all\nSELECT\n    patient_id,\n    data_source,\n    \n\n    dateadd(\n        month,\n        1,\n        year_month_date\n        )\n\n as change_month,\n    case\n        when next_year_month is null\n            or \n\n    dateadd(\n        month,\n        1,\n        year_month_date\n        )\n\n != next_year_month\n        then 'removed'\n    end as change_type\nFROM RankedMonths\n\n),\nFinal AS (\n    SELECT\n       patient_id || '|' || change_month as membermonthkey,\n        data_source,\n        patient_id,\n        change_month,\n        change_type\n    FROM Changes\n    WHERE change_type IS NOT NULL\n),\nResult AS (\n    SELECT\n        data_source,\n        change_month,\n        change_type,\n        count(*) as member_count\n    FROM Final\n    GROUP BY data_source\n    , change_month\n    , change_type\n)\n\n\nSELECT * , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM Result", "relation_name": "dev_thuxuan.data_quality.mart_review__enrollment_change"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:02.071612Z", "completed_at": "2024-10-01T16:34:02.079577Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:02.081655Z", "completed_at": "2024-10-01T16:34:03.705172Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.7653696537017822, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110bda6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.pharmacy__brand_generic_opportunity", "compiled": true, "compiled_code": "\n\n/* claimid/line/source grain. calculates opportunity at line level*/\n\nwith cpu as (\nselect claim_id\n,claim_line_number\n,data_source\n,case when quantity > 0 then paid_amount/quantity else null end as brand_cost_per_unit\nfrom dev_thuxuan.pharmacy.stg_pharmacy_claim\n)\n\n\nselect \n    pc.data_source\n  , pc.claim_id\n  , pc.claim_line_number\n  , cc.ndc_code\n  , cc.ndc_description\n  , cc.rxcui as brand_rxcui\n  , cc.brand_vs_generic \n  , cc.generic_available\n  , pc.paid_amount\n  , pc.quantity as total_units\n  , cpu.brand_cost_per_unit\n  , gc.generic_average_cost_per_unit \n  , cpu.brand_cost_per_unit - gc.generic_average_cost_per_unit as brand_less_generic_cost_per_unit\n  , case \n      when cpu.brand_cost_per_unit - gc.generic_average_cost_per_unit > 0 \n        then (cpu.brand_cost_per_unit - gc.generic_average_cost_per_unit) * pc.quantity \n      else 0 \n    end as generic_available_total_opportunity\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.pharmacy.stg_pharmacy_claim as pc\ninner join cpu on pc.claim_id = cpu.claim_id\n  and\n  pc.claim_line_number = cpu.claim_line_number\n  and\n  pc.data_source = cpu.data_source\ninner join dev_thuxuan.pharmacy._int_claims_current_cost cc\n  on cc.ndc_code = pc.ndc_code\n  and\n  cc.data_source = pc.data_source\ninner join dev_thuxuan.pharmacy._int_generic_cost  as gc \n  on cc.rxcui = gc.brand_rxcui\n  and gc.data_source = cc.data_source\nwhere prescribed_atleast_one_generic_history = 1", "relation_name": "dev_thuxuan.pharmacy.brand_generic_opportunity"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:02.629869Z", "completed_at": "2024-10-01T16:34:02.643917Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:02.645529Z", "completed_at": "2024-10-01T16:34:03.948139Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.5666234493255615, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112efe"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__acute_inpatient_institutional", "compiled": true, "compiled_code": "\n\nwith room_and_board_requirement as (\nselect distinct \n  claim_id\nfrom dev_thuxuan.test.service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and revenue_center_code in\n  ('0100','0101',\n   '0110','0111','0112','0113','0114','0116','0117','0118','0119',\n   '0120','0121','0122','0123','0124','0126','0127','0128','0129',\n   '0130','0131','0132','0133','0134','0136','0137','0138','0139',\n   '0140','0141','0142','0143','0144','0146','0147','0148','0149',\n   '0150','0151','0152','0153','0154','0156','0157','0158','0159',\n   '0160','0164','0167','0169',\n   '0170','0171','0172','0173','0174','0179',\n   '0190','0191','0192','0193','0194','0199',\n   '0200','0201','0202','0203','0204','0206','0207','0208','0209',\n   '0210','0211','0212','0213','0214','0219',\n   '1000','1001','1002')\n)\n\n, drg_requirement as (\nselect distinct \n  mc.claim_id\nfrom dev_thuxuan.test.service_category__stg_medical_claim mc\nleft join dev_thuxuan.terminology.ms_drg msdrg\n  on mc.ms_drg_code = msdrg.ms_drg_code\nleft join dev_thuxuan.terminology.apr_drg aprdrg\n  on mc.apr_drg_code = aprdrg.apr_drg_code\nwhere claim_type = 'institutional'\n  and (msdrg.ms_drg_code is not null or aprdrg.apr_drg_code is not null)\n)\n\n, bill_type_requirement as (\nselect distinct \n  claim_id\nfrom dev_thuxuan.test.service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and substring(bill_type_code, 1, 2) in ('11','12')\n)\n\nselect distinct \n  a.claim_id\n, 'Acute Inpatient' as service_category_2\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim a\ninner join room_and_board_requirement b\n  on a.claim_id = b.claim_id\ninner join drg_requirement c\n  on a.claim_id = c.claim_id\ninner join bill_type_requirement d\n  on a.claim_id = d.claim_id", "relation_name": "dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:03.287688Z", "completed_at": "2024-10-01T16:34:03.298153Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:03.299044Z", "completed_at": "2024-10-01T16:34:04.655559Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.5100717544555664, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f02"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__ambulance_professional", "compiled": true, "compiled_code": "\n\nselect distinct \n  claim_id\n, claim_line_number\n, 'Ambulance' as service_category_2\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and (hcpcs_code between 'A0425' and 'A0436' or place_of_service_code in ('41','42'))", "relation_name": "dev_thuxuan.claims_preprocessing._int_ambulance_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:03.280488Z", "completed_at": "2024-10-01T16:34:03.293455Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:03.293455Z", "completed_at": "2024-10-01T16:34:04.721666Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.5522406101226807, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f913-0001-987f0111a572"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__acute_inpatient_professional", "compiled": true, "compiled_code": "\n\nselect distinct\n  claim_id\n, claim_line_number\n, 'Acute Inpatient' as service_category_2\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code = '21'", "relation_name": "dev_thuxuan.claims_preprocessing._int_acute_inpatient_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:03.714179Z", "completed_at": "2024-10-01T16:34:03.720195Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:03.721181Z", "completed_at": "2024-10-01T16:34:04.943876Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.3474042415618896, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110bdaa"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__dialysis_institutional", "compiled": true, "compiled_code": "\n\nselect distinct \n  claim_id\n, 'Dialysis' as service_category_2\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and substring(bill_type_code, 1, 2) in ('72')", "relation_name": "dev_thuxuan.claims_preprocessing._int_dialysis_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:03.842986Z", "completed_at": "2024-10-01T16:34:03.850130Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:03.851134Z", "completed_at": "2024-10-01T16:34:05.323878Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.6742076873779297, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d5be"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__dialysis_professional", "compiled": true, "compiled_code": "\n\nselect distinct \n  claim_id\n, claim_line_number\n, 'Dialysis' as service_category_2\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('65')", "relation_name": "dev_thuxuan.claims_preprocessing._int_dialysis_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:04.201313Z", "completed_at": "2024-10-01T16:34:04.207181Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:04.208227Z", "completed_at": "2024-10-01T16:34:05.321785Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.3158395290374756, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f06"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__dme_professional", "compiled": true, "compiled_code": "\n\nselect distinct \n  claim_id\n, claim_line_number\n, 'Durable Medical Equipment' as service_category_2\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and hcpcs_code between 'E0100' and 'E8002'", "relation_name": "dev_thuxuan.claims_preprocessing._int_dme_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:04.835547Z", "completed_at": "2024-10-01T16:34:04.839544Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:04.839544Z", "completed_at": "2024-10-01T16:34:06.074495Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.4085135459899902, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110bdae"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__duplicate_bill_types", "compiled": true, "compiled_code": "\n\nselect distinct\n  claim_id\n, count(distinct bill_type_code) as cnt\nfrom dev_thuxuan.test.service_category__stg_medical_claim\ngroup by claim_id\nhaving count(distinct bill_type_code) > 1", "relation_name": "dev_thuxuan.claims_preprocessing._int_duplicate_bill_types"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:05.067101Z", "completed_at": "2024-10-01T16:34:05.073101Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:05.074101Z", "completed_at": "2024-10-01T16:34:06.315178Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.3811559677124023, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f0a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__emergency_department_professional", "compiled": true, "compiled_code": "\n\nselect distinct \n  claim_id\n, claim_line_number\n, 'Emergency Department' as service_category_2\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code = '23'", "relation_name": "dev_thuxuan.claims_preprocessing._int_emergency_department_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:04.795462Z", "completed_at": "2024-10-01T16:34:04.816594Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:04.817573Z", "completed_at": "2024-10-01T16:34:06.440453Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.7622582912445068, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f913-0001-987f0111a576"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__dq_input_layer_tests", "compiled": true, "compiled_code": "\n\nselect distinct \n  claim_id\n, 'Multiple claim_type' as dq_problem\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim\ngroup by claim_id\nhaving count(distinct claim_type) > 1\n\nunion all\n\nselect distinct \n  claim_id\n, 'Multiple bill_type_code' as dq_problem\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim\ngroup by claim_id\nhaving count(distinct bill_type_code) > 1\n\nunion all\n\nselect distinct \n  claim_id\n, 'Missing claim_type' as dq_problem\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim\nwhere claim_type is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Missing place_of_service_code' as dq_problem\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Missing bill_type_code' as dq_problem\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and bill_type_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Missing revenue_center_code' as dq_problem\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and revenue_center_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Missing hcpcs_code' as dq_problem\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and hcpcs_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Invalid claim_type' as dq_problem\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim a\ninner join dev_thuxuan.terminology.claim_type b\n  on a.claim_type = b.claim_type\nwhere b.claim_type is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Invalid place_of_service_code' as dq_problem\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim a\ninner join dev_thuxuan.terminology.place_of_service b\n  on a.place_of_service_code = b.place_of_service_code\nwhere a.claim_type = 'professional'\n  and b.place_of_service_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Invalid bill_type_code' as dq_problem\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim a\ninner join dev_thuxuan.terminology.bill_type b\n  on a.bill_type_code = b.bill_type_code\nwhere a.claim_type = 'institutional'\n  and b.bill_type_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Invalid revenue_center_code' as dq_problem\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim a\ninner join dev_thuxuan.terminology.revenue_center b\n  on a.revenue_center_code = b.revenue_center_code\nwhere a.claim_type = 'institutional'\n  and b.revenue_center_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Invalid hcpcs_code' as dq_problem\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim a\ninner join dev_thuxuan.terminology.hcpcs_level_2 b\n  on a.hcpcs_code = b.hcpcs\nwhere a.claim_type = 'professional'\n  and b.hcpcs is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Invalid ms_drg_code' as dq_problem\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim a\ninner join dev_thuxuan.terminology.ms_drg b\n  on a.ms_drg_code = b.ms_drg_code\nwhere a.claim_type = 'institutional'\n  and b.ms_drg_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Invalid apr_drg_code' as dq_problem\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim a\ninner join dev_thuxuan.terminology.apr_drg b\n  on a.apr_drg_code = b.apr_drg_code\nwhere a.claim_type = 'institutional'\n  and b.apr_drg_code is null", "relation_name": "dev_thuxuan.claims_preprocessing._dq_input_layer_tests"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:05.532648Z", "completed_at": "2024-10-01T16:34:05.541649Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:05.542646Z", "completed_at": "2024-10-01T16:34:06.743954Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.397536039352417, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f0e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__hospice_institutional", "compiled": true, "compiled_code": "\n\nselect distinct \n  claim_id\n, 'Hospice' as service_category_2\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and substring(bill_type_code, 1, 2) in ('81','82')", "relation_name": "dev_thuxuan.claims_preprocessing._int_hospice_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:05.526113Z", "completed_at": "2024-10-01T16:34:05.537650Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:05.537650Z", "completed_at": "2024-10-01T16:34:06.756434Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.3985378742218018, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f913-0001-987f0111a57a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__home_health_institutional", "compiled": true, "compiled_code": "\n\nselect distinct \n  claim_id\n, 'Home Health' as service_category_2\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and substring(bill_type_code, 1, 2) in ('31','32','33')", "relation_name": "dev_thuxuan.claims_preprocessing._int_home_health_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:06.249608Z", "completed_at": "2024-10-01T16:34:06.255720Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:06.256718Z", "completed_at": "2024-10-01T16:34:07.383732Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.2520709037780762, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d5c2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__hospice_professional", "compiled": true, "compiled_code": "\n\nselect distinct \n  claim_id\n, claim_line_number\n, 'Hospice' as service_category_2\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('34')", "relation_name": "dev_thuxuan.claims_preprocessing._int_hospice_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:06.452207Z", "completed_at": "2024-10-01T16:34:06.457221Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:06.458137Z", "completed_at": "2024-10-01T16:34:07.515709Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.2395579814910889, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110bdb2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__inpatient_psychiatric_professional", "compiled": true, "compiled_code": "\n\nselect distinct \n  claim_id\n, claim_line_number\n, 'Inpatient Psychiatric' as service_category_2\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('51','55','56')", "relation_name": "dev_thuxuan.claims_preprocessing._int_inpatient_psychiatric_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:06.562707Z", "completed_at": "2024-10-01T16:34:06.567731Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:06.568716Z", "completed_at": "2024-10-01T16:34:07.605108Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1981604099273682, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110bdb6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__inpatient_rehab_professional", "compiled": true, "compiled_code": "\n\nselect distinct \n  claim_id\n, claim_line_number\n, 'Inpatient Rehabilitation' as service_category_2\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('61')", "relation_name": "dev_thuxuan.claims_preprocessing._int_inpatient_rehab_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:06.939698Z", "completed_at": "2024-10-01T16:34:06.949249Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:06.950096Z", "completed_at": "2024-10-01T16:34:08.246201Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.4367048740386963, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f912-0001-987f0111b5da"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__lab_professional", "compiled": true, "compiled_code": "\n\nselect distinct \n  claim_id\n, claim_line_number\n, 'Lab' as service_category_2\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code = '81'", "relation_name": "dev_thuxuan.claims_preprocessing._int_lab_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:06.931698Z", "completed_at": "2024-10-01T16:34:06.943698Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:06.945204Z", "completed_at": "2024-10-01T16:34:08.261713Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.472533941268921, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f12"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__lab_institutional", "compiled": true, "compiled_code": "\n\nselect distinct \n  claim_id\n, 'Lab' as service_category_2\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and substring(bill_type_code, 1, 2) in ('14')", "relation_name": "dev_thuxuan.claims_preprocessing._int_lab_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:07.780676Z", "completed_at": "2024-10-01T16:34:07.788677Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:07.788677Z", "completed_at": "2024-10-01T16:34:09.195238Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.5609891414642334, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f16"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_psychiatric_institutional", "compiled": true, "compiled_code": "\n\nselect distinct \n  claim_id\n, 'Outpatient Psychiatric' as service_category_2\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and substring(bill_type_code, 1, 2) in ('52')", "relation_name": "dev_thuxuan.claims_preprocessing._int_outpatient_psychiatric_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:07.746831Z", "completed_at": "2024-10-01T16:34:07.758836Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:07.759837Z", "completed_at": "2024-10-01T16:34:09.207448Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.5949125289916992, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110bdba"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__office_visit_professional", "compiled": true, "compiled_code": "\n\nselect distinct \n  claim_id\n, claim_line_number\n, 'Office Visit' as service_category_2\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('11','02')", "relation_name": "dev_thuxuan.claims_preprocessing._int_office_visit_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:07.752837Z", "completed_at": "2024-10-01T16:34:07.764072Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:07.766492Z", "completed_at": "2024-10-01T16:34:09.203338Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.5963177680969238, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110bdbe"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_hospital_or_clinic_professional", "compiled": true, "compiled_code": "\n\nselect distinct \n  claim_id\n, claim_line_number\n, 'Outpatient Hospital or Clinic' as service_category_2\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('15','17','19','22','49','50','60','71','72')", "relation_name": "dev_thuxuan.claims_preprocessing._int_outpatient_hospital_or_clinic_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:08.408226Z", "completed_at": "2024-10-01T16:34:08.415330Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:08.415330Z", "completed_at": "2024-10-01T16:34:09.569713Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.3060681819915771, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d5c6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_rehab_professional", "compiled": true, "compiled_code": "\n\nselect distinct \n  claim_id\n, claim_line_number\n, 'Outpatient Rehabilitation' as service_category_2\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('62')", "relation_name": "dev_thuxuan.claims_preprocessing._int_outpatient_rehab_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:08.376316Z", "completed_at": "2024-10-01T16:34:08.381201Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:08.382115Z", "completed_at": "2024-10-01T16:34:09.918577Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.688016653060913, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f913-0001-987f0111a57e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_psychiatric_professional", "compiled": true, "compiled_code": "\n\nselect distinct \n  claim_id\n, claim_line_number\n, 'Outpatient Psychiatric' as service_category_2\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('52','53','57','58')", "relation_name": "dev_thuxuan.claims_preprocessing._int_outpatient_psychiatric_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:09.352514Z", "completed_at": "2024-10-01T16:34:09.375772Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:09.377759Z", "completed_at": "2024-10-01T16:34:10.607002Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3804497718811035, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f912-0001-987f0111b5de"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__skilled_nursing_institutional", "compiled": true, "compiled_code": "\n\nselect distinct \n  claim_id\n, 'Skilled Nursing' as service_category_2\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and substring(bill_type_code, 1, 2) in ('21','22')", "relation_name": "dev_thuxuan.claims_preprocessing._int_skilled_nursing_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:09.358175Z", "completed_at": "2024-10-01T16:34:09.376756Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:09.382845Z", "completed_at": "2024-10-01T16:34:10.735075Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.5134665966033936, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f912-0001-987f0111b5e2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__urgent_care_professional", "compiled": true, "compiled_code": "\n\nselect distinct \n  claim_id\n, claim_line_number\n, 'Urgent Care' as service_category_2\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('20')", "relation_name": "dev_thuxuan.claims_preprocessing._int_urgent_care_professional"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:10.072325Z", "completed_at": "2024-10-01T16:34:10.079326Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:10.080325Z", "completed_at": "2024-10-01T16:34:10.841263Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.8959851264953613, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f1a"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.dbt_utils_unique_combination_of_columns_pharmacy__brand_generic_opportunity_data_source__claim_id__claim_line_number.c19d0cecc7", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        data_source, claim_id, claim_line_number\n    from dev_thuxuan.pharmacy.brand_generic_opportunity\n    group by data_source, claim_id, claim_line_number\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:09.720317Z", "completed_at": "2024-10-01T16:34:09.732840Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:09.733840Z", "completed_at": "2024-10-01T16:34:11.068052Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.5681655406951904, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f913-0001-987f0111a582"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_demographic_factors", "compiled": true, "compiled_code": "\n\nwith members as (\n\n    select\n          patient_id\n        , enrollment_status\n        , gender\n        , age_group\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , enrollment_status_default\n        , medicaid_dual_status_default\n        , orec_default\n        , institutional_status_default\n        , payment_year\n    from dev_thuxuan.cms_hcc._int_members\n\n)\n\n, seed_demographic_factors as (\n\n    select\n          model_version\n        , factor_type\n        , enrollment_status\n        , gender\n        , age_group\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , coefficient\n    from dev_thuxuan.cms_hcc._value_set_demographic_factors\n    where plan_segment is null /* data not available */\n\n)\n\n, v24_new_enrollees as (\n\n    select\n          members.patient_id\n        , members.enrollment_status\n        , members.gender\n        , members.age_group\n        , members.medicaid_status\n        , members.dual_status\n        , members.orec\n        , members.institutional_status\n        , members.enrollment_status_default\n        , members.medicaid_dual_status_default\n        , members.orec_default\n        , members.institutional_status_default\n        , members.payment_year\n        , seed_demographic_factors.model_version\n        , seed_demographic_factors.factor_type\n        , seed_demographic_factors.coefficient\n    from members\n        inner join seed_demographic_factors\n            on members.enrollment_status = seed_demographic_factors.enrollment_status\n            and members.gender = seed_demographic_factors.gender\n            and members.age_group = seed_demographic_factors.age_group\n            and members.medicaid_status = seed_demographic_factors.medicaid_status\n            and members.orec = seed_demographic_factors.orec\n    where members.enrollment_status = 'New'\n        and seed_demographic_factors.model_version = 'CMS-HCC-V24'\n\n)\n\n, v24_continuining_enrollees as (\n\n    select\n          members.patient_id\n        , members.enrollment_status\n        , members.gender\n        , members.age_group\n        , members.medicaid_status\n        , members.dual_status\n        , members.orec\n        , members.institutional_status\n        , members.enrollment_status_default\n        , members.medicaid_dual_status_default\n        , members.orec_default\n        , members.institutional_status_default\n        , members.payment_year\n        , seed_demographic_factors.model_version\n        , seed_demographic_factors.factor_type\n        , seed_demographic_factors.coefficient\n    from members\n        inner join seed_demographic_factors\n            on members.enrollment_status = seed_demographic_factors.enrollment_status\n            and members.gender = seed_demographic_factors.gender\n            and members.age_group = seed_demographic_factors.age_group\n            and members.medicaid_status = seed_demographic_factors.medicaid_status\n            and members.dual_status = seed_demographic_factors.dual_status\n            and members.orec = seed_demographic_factors.orec\n            and members.institutional_status = seed_demographic_factors.institutional_status\n    where members.enrollment_status = 'Continuing'\n        and seed_demographic_factors.model_version = 'CMS-HCC-V24'\n\n)\n\n, v28_new_enrollees as (\n\n    select\n          members.patient_id\n        , members.enrollment_status\n        , members.gender\n        , members.age_group\n        , members.medicaid_status\n        , members.dual_status\n        , members.orec\n        , members.institutional_status\n        , members.enrollment_status_default\n        , members.medicaid_dual_status_default\n        , members.orec_default\n        , members.institutional_status_default\n        , members.payment_year\n        , seed_demographic_factors.model_version\n        , seed_demographic_factors.factor_type\n        , seed_demographic_factors.coefficient\n    from members\n        inner join seed_demographic_factors\n            on members.enrollment_status = seed_demographic_factors.enrollment_status\n            and members.gender = seed_demographic_factors.gender\n            and members.age_group = seed_demographic_factors.age_group\n            and members.medicaid_status = seed_demographic_factors.medicaid_status\n            and members.orec = seed_demographic_factors.orec\n    where members.enrollment_status = 'New'\n        and seed_demographic_factors.model_version = 'CMS-HCC-V28'\n\n)\n\n, v28_continuining_enrollees as (\n\n    select\n          members.patient_id\n        , members.enrollment_status\n        , members.gender\n        , members.age_group\n        , members.medicaid_status\n        , members.dual_status\n        , members.orec\n        , members.institutional_status\n        , members.enrollment_status_default\n        , members.medicaid_dual_status_default\n        , members.orec_default\n        , members.institutional_status_default\n        , members.payment_year\n        , seed_demographic_factors.model_version\n        , seed_demographic_factors.factor_type\n        , seed_demographic_factors.coefficient\n    from members\n        inner join seed_demographic_factors\n            on members.enrollment_status = seed_demographic_factors.enrollment_status\n            and members.gender = seed_demographic_factors.gender\n            and members.age_group = seed_demographic_factors.age_group\n            and members.medicaid_status = seed_demographic_factors.medicaid_status\n            and members.dual_status = seed_demographic_factors.dual_status\n            and members.orec = seed_demographic_factors.orec\n            and members.institutional_status = seed_demographic_factors.institutional_status\n    where members.enrollment_status = 'Continuing'\n        and seed_demographic_factors.model_version = 'CMS-HCC-V28'\n\n)\n\n, unioned as (\n\n    select * from v24_new_enrollees\n    union all\n    select * from v24_continuining_enrollees\n    union all\n    select * from v28_new_enrollees\n    union all\n    select * from v28_continuining_enrollees\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(enrollment_status as TEXT) as enrollment_status\n        , cast(gender as TEXT) as gender\n        , cast(age_group as TEXT) as age_group\n        , cast(medicaid_status as TEXT) as medicaid_status\n        , cast(dual_status as TEXT) as dual_status\n        , cast(orec as TEXT) as orec\n        , cast(institutional_status as TEXT) as institutional_status\n        \n            , cast(enrollment_status_default as boolean) as enrollment_status_default\n            , cast(medicaid_dual_status_default as boolean) as medicaid_dual_status_default\n            , cast(orec_default as boolean) as orec_default\n            , cast(institutional_status_default as boolean) as institutional_status_default\n        \n        , round(cast(coefficient as numeric(28,6)),3) as coefficient\n        , cast(factor_type as TEXT) as factor_type\n        , cast(model_version as TEXT) as model_version\n        , cast(payment_year as integer) as payment_year\n    from unioned\n\n)\n\nselect\n      patient_id\n    , enrollment_status\n    , gender\n    , age_group\n    , medicaid_status\n    , dual_status\n    , orec\n    , institutional_status\n    , enrollment_status_default\n    , medicaid_dual_status_default\n    , orec_default\n    , institutional_status_default\n    , coefficient\n    , factor_type\n    , model_version\n    , payment_year\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.cms_hcc._int_demographic_factors"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:09.362751Z", "completed_at": "2024-10-01T16:34:09.386857Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:09.387843Z", "completed_at": "2024-10-01T16:34:11.135795Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.9369702339172363, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d5ca"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__pqi_denom_long", "compiled": true, "compiled_code": "\n\nselect\n    d.year_number\n  , d.patient_id\n  , d.data_source\n  , '01' as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_01_denom as d\n\nunion all\n\nselect\n    d.year_number\n  , d.patient_id\n  , d.data_source\n  , '03' as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_03_denom as d\n\nunion all\n\nselect\n    d.year_number\n  , d.patient_id\n  , d.data_source\n  , '05' as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_05_denom as d\n\nunion all\n\nselect\n    d.year_number\n  , d.patient_id\n  , d.data_source\n  , '07' as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_07_denom as d\n\nunion all\n\nselect\n    d.year_number\n  , d.patient_id\n  , d.data_source\n  , '08' as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_08_denom as d\n\nunion all\n\nselect\n    d.year_number\n  , d.patient_id\n  , d.data_source\n  , '11' as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_11_denom as d\n\nunion all\n\nselect\n    d.year_number\n  , d.patient_id\n  , d.data_source\n  , '12' as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_12_denom as d\n\nunion all\n\nselect\n    d.year_number\n  , d.patient_id\n  , d.data_source\n  , '14' as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_14_denom as d\n\nunion all\n\nselect\n    d.year_number\n  , d.patient_id\n  , d.data_source\n  , '15' as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_15_denom as d\n\nunion all\n\nselect\n    d.year_number\n  , d.patient_id\n  , d.data_source\n  , '16' as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_16_denom as d", "relation_name": "dev_thuxuan.ahrq_measures.pqi_denom_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:10.741848Z", "completed_at": "2024-10-01T16:34:10.747593Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:10.747593Z", "completed_at": "2024-10-01T16:34:11.731074Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1275968551635742, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d5ce"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__emergency_department_institutional", "compiled": true, "compiled_code": "\n\nselect distinct \n    med.claim_id\n    , 'Emergency Department' as service_category_2\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim med\nleft join dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional inpatient\n    on med.claim_id = inpatient.claim_id\nwhere claim_type = 'institutional'\nand revenue_center_code in ('0450','0451','0452','0459','0981')\nand inpatient.claim_id is null\n-- 0456, urgent care, is included in most published definitions\n-- that also include a requirement of a bill type code for\n-- inpatient or outpatient hospital.", "relation_name": "dev_thuxuan.claims_preprocessing._int_emergency_department_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:10.870880Z", "completed_at": "2024-10-01T16:34:10.875880Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:10.875880Z", "completed_at": "2024-10-01T16:34:12.061853Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.3366343975067139, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110bdc2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__ambulatory_surgery_professional", "compiled": true, "compiled_code": "\n\nselect distinct \n  a.claim_id\n, a.claim_line_number\n, 'Ambulatory Surgery' as service_category_2\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim a\nleft join dev_thuxuan.claims_preprocessing._int_dme_professional b\n  on a.claim_id = b.claim_id\n  and a.claim_line_number = b.claim_line_number\nwhere a.claim_type = 'professional'\n  and a.place_of_service_code in ('24')\n  and (b.claim_id is null and b.claim_line_number is null)", "relation_name": "dev_thuxuan.claims_preprocessing._int_ambulatory_surgery_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:10.972213Z", "completed_at": "2024-10-01T16:34:10.977214Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:10.978722Z", "completed_at": "2024-10-01T16:34:12.459424Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.6849536895751953, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f912-0001-987f0111b5e6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__home_health_professional", "compiled": true, "compiled_code": "\n\nselect distinct \n  a.claim_id\n, a.claim_line_number\n, 'Home Health' as service_category_2\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim a\nleft join dev_thuxuan.claims_preprocessing._int_dme_professional b\n  on a.claim_id = b.claim_id\n  and a.claim_line_number = b.claim_line_number\nwhere a.claim_type = 'professional'\n  and a.place_of_service_code in ('12')\n  and (b.claim_id is null and b.claim_line_number is null)", "relation_name": "dev_thuxuan.claims_preprocessing._int_home_health_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:11.298133Z", "completed_at": "2024-10-01T16:34:11.309854Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:11.309854Z", "completed_at": "2024-10-01T16:34:12.538914Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.3724799156188965, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f912-0001-987f0111b5ea"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__skilled_nursing_professional", "compiled": true, "compiled_code": "\n\nselect distinct \n  a.claim_id\n, a.claim_line_number\n, 'Skilled Nursing' as service_category_2\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim a\nleft join dev_thuxuan.claims_preprocessing._int_dme_professional b\n  on a.claim_id = b.claim_id\n  and a.claim_line_number = b.claim_line_number\nwhere claim_type = 'professional'\n  and place_of_service_code in ('31','32')\n  and (b.claim_id is null and b.claim_line_number is null)", "relation_name": "dev_thuxuan.claims_preprocessing._int_skilled_nursing_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:11.304825Z", "completed_at": "2024-10-01T16:34:11.313857Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:11.314839Z", "completed_at": "2024-10-01T16:34:12.721988Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.5769882202148438, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d5d2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__dq_input_layer_results", "compiled": true, "compiled_code": "\n\nselect\n  dq_problem\n, count(distinct claim_id) as distinct_claims\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing._dq_input_layer_tests\ngroup by dq_problem", "relation_name": "dev_thuxuan.claims_preprocessing._dq_input_layer_results"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:12.212456Z", "completed_at": "2024-10-01T16:34:12.217950Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:12.217950Z", "completed_at": "2024-10-01T16:34:12.880639Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.8415064811706543, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f913-0001-987f0111a586"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.dbt_utils_unique_combination_of_columns_cms_hcc__int_demographic_factors_patient_id__model_version.d5ad3bc1ba", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        patient_id, model_version\n    from dev_thuxuan.cms_hcc._int_demographic_factors\n    group by patient_id, model_version\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:11.875373Z", "completed_at": "2024-10-01T16:34:11.882279Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:11.882279Z", "completed_at": "2024-10-01T16:34:13.561951Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.8588604927062988, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f1e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.pharmacy__pharmacy_claim_expanded", "compiled": true, "compiled_code": "\n\nwith all_drugs as (\n  select \n      p.data_source\n    , p.claim_id\n    , p.claim_line_number\n    , p.patient_id\n    , p.member_id\n    , p.prescribing_provider_id\n    , p.dispensing_provider_id\n    , p.dispensing_date\n    , p.ndc_code\n    , p.ndc_description\n    , p.quantity\n    , p.days_supply\n    , p.refills\n    , p.paid_date\n    , p.paid_amount\n    , p.allowed_amount\n    , p.rxcui\n    , r.product_name\n    , r.product_tty\n    , r.brand_vs_generic\n    , r.brand_name\n    , r.clinical_product_rxcui as generic_rxcui\n    , r.clinical_product_name as generic_rxcui_description\n    , r.clinical_product_tty as generic_tty\n    , r.ingredient_name\n    , r.dose_form_name\n    , case \n        when ga.brand_with_generic_available is not null \n          then 'brand_with_generic_available' \n        else r.brand_vs_generic \n      end as generic_available\n    , opp.brand_cost_per_unit\n    , opp.generic_average_cost_per_unit\n    , opp.brand_less_generic_cost_per_unit\n    , opp.generic_available_total_opportunity\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\n  from dev_thuxuan.pharmacy.stg_pharmacy_claim as p\n  left join dev_thuxuan.terminology.rxnorm_brand_generic as r \n    on p.rxcui = r.product_rxcui\n  left join dev_thuxuan.pharmacy._int_brand_with_generic_available as ga \n    on p.rxcui = ga.brand_with_generic_available\n  left join dev_thuxuan.pharmacy.brand_generic_opportunity as opp \n    on p.claim_id = opp.claim_id\n    and p.claim_line_number = opp.claim_line_number\n    and p.data_source = opp.data_source\n)\n\n, generic_available as (\n  select \n      *\n    , row_number() over (order by ndc_code, data_source) as generic_available_sk\n  from all_drugs\n  where generic_available = 'brand_with_generic_available'\n)\n\nselect \n    a.data_source\n  , a.claim_id\n  , a.claim_line_number\n  , a.patient_id\n  , a.member_id\n  , a.prescribing_provider_id\n  , a.dispensing_provider_id\n  , a.dispensing_date\n  , a.ndc_code\n  , a.ndc_description\n  , a.quantity\n  , a.days_supply\n  , a.refills\n  , a.paid_date\n  , a.paid_amount\n  , a.allowed_amount\n  , a.rxcui\n  , a.product_name\n  , a.product_tty\n  , a.brand_vs_generic\n  , a.brand_name\n  , a.generic_rxcui\n  , a.generic_rxcui_description\n  , a.generic_tty\n  , a.ingredient_name\n  , a.dose_form_name\n  , a.generic_available\n  , a.brand_cost_per_unit\n  , a.generic_average_cost_per_unit\n  , a.brand_less_generic_cost_per_unit\n  , a.generic_available_total_opportunity\n  , g.generic_available_sk\nfrom all_drugs as a\nleft join generic_available as g \n  on a.claim_id = g.claim_id\n  and a.claim_line_number = g.claim_line_number\n  and a.data_source = g.data_source", "relation_name": "dev_thuxuan.pharmacy.pharmacy_claim_expanded"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:12.662978Z", "completed_at": "2024-10-01T16:34:12.667987Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:12.668983Z", "completed_at": "2024-10-01T16:34:13.812580Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.3120615482330322, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f912-0001-987f0111b5ee"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__urgent_care_institutional", "compiled": true, "compiled_code": "\n\nselect distinct \n  a.claim_id\n, 'Urgent Care' as service_category_2\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim a\nleft join dev_thuxuan.claims_preprocessing._int_emergency_department_institutional b\n  on a.claim_id = b.claim_id\nwhere claim_type = 'institutional'\n  and revenue_center_code = '0456'\n  and substring(bill_type_code, 1, 2) in ('13','71','73')\n  and b.claim_id is null", "relation_name": "dev_thuxuan.claims_preprocessing._int_urgent_care_institutional"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:13.738138Z", "completed_at": "2024-10-01T16:34:13.744155Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:13.744155Z", "completed_at": "2024-10-01T16:34:14.364125Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.7609329223632812, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f22"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.dbt_utils_unique_combination_of_columns_pharmacy__pharmacy_claim_expanded_data_source__claim_id__claim_line_number.132bf82f59", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        data_source, claim_id, claim_line_number\n    from dev_thuxuan.pharmacy.pharmacy_claim_expanded\n    group by data_source, claim_id, claim_line_number\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:13.058962Z", "completed_at": "2024-10-01T16:34:13.065396Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:13.066344Z", "completed_at": "2024-10-01T16:34:14.578539Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.6322286128997803, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f912-0001-987f0111b5f2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_enrollment_interaction_factors", "compiled": true, "compiled_code": "\n\nwith demographics as (\n\n    select\n          patient_id\n        , enrollment_status\n        , gender\n        , age_group\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , model_version\n        , payment_year\n    from dev_thuxuan.cms_hcc._int_demographic_factors\n\n)\n\n, seed_interaction_factors as (\n\n    select\n          model_version\n        , factor_type\n        , gender\n        , enrollment_status\n        , medicaid_status\n        , dual_status\n        , institutional_status\n        , description\n        , coefficient\n    from dev_thuxuan.cms_hcc._value_set_enrollment_interaction_factors\n\n)\n\n/*\n    Originally disabled interactions for non-institutional members >= 65\n*/\n, non_institutional_interactions as (\n\n    select\n          demographics.patient_id\n        , demographics.model_version\n        , demographics.payment_year\n        , seed_interaction_factors.factor_type\n        , seed_interaction_factors.description\n        , seed_interaction_factors.coefficient\n    from demographics\n        inner join seed_interaction_factors\n            on demographics.gender = seed_interaction_factors.gender\n            and demographics.enrollment_status = seed_interaction_factors.enrollment_status\n            and demographics.medicaid_status = seed_interaction_factors.medicaid_status\n            and demographics.dual_status = seed_interaction_factors.dual_status\n            and demographics.institutional_status = seed_interaction_factors.institutional_status\n            and demographics.model_version = seed_interaction_factors.model_version\n    where demographics.institutional_status = 'No'\n        and demographics.orec = 'Disabled'\n        and demographics.age_group in (\n              '65-69'\n            , '70-74'\n            , '75-79'\n            , '80-84'\n            , '85-89'\n            , '90-94'\n            , '>=95'\n        )\n\n)\n\n/*\n    Medicaid interactions for institutional members\n*/\n, institutional_interactions as (\n\n    select\n          demographics.patient_id\n        , demographics.model_version\n        , demographics.payment_year\n        , seed_interaction_factors.factor_type\n        , seed_interaction_factors.description\n        , seed_interaction_factors.coefficient\n    from demographics\n        inner join seed_interaction_factors\n            on demographics.enrollment_status = seed_interaction_factors.enrollment_status\n            and demographics.institutional_status = seed_interaction_factors.institutional_status\n            and demographics.model_version = seed_interaction_factors.model_version\n    where demographics.institutional_status = 'Yes'\n        and demographics.medicaid_status = 'Yes'\n\n)\n\n, unioned as (\n\n    select * from non_institutional_interactions\n    union all\n    select * from institutional_interactions\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(description as TEXT) as description\n        , round(cast(coefficient as numeric(28,6)),3) as coefficient\n        , cast(factor_type as TEXT) as factor_type\n        , cast(model_version as TEXT) as model_version\n        , cast(payment_year as integer) as payment_year\n    from unioned\n\n)\n\nselect\n      patient_id\n    , description\n    , coefficient\n    , factor_type\n    , model_version\n    , payment_year\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.cms_hcc._int_enrollment_interaction_factors"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:12.680504Z", "completed_at": "2024-10-01T16:34:12.688505Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:12.688505Z", "completed_at": "2024-10-01T16:34:14.986252Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.443864107131958, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f913-0001-987f0111a58a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__combined_professional", "compiled": true, "compiled_code": "\n\nwith combined as (\nselect *\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_professional\n\nunion all\n\nselect *\nfrom dev_thuxuan.claims_preprocessing._int_ambulatory_surgery_professional\n\nunion all\n\nselect *\nfrom dev_thuxuan.claims_preprocessing._int_dialysis_professional\n\nunion all\n\nselect *\nfrom dev_thuxuan.claims_preprocessing._int_emergency_department_professional\n\nunion all\n\nselect *\nfrom dev_thuxuan.claims_preprocessing._int_home_health_professional\n\nunion all\n\nselect *\nfrom dev_thuxuan.claims_preprocessing._int_hospice_professional\n\nunion all\n\nselect *\nfrom dev_thuxuan.claims_preprocessing._int_inpatient_psychiatric_professional\n\nunion all\n\nselect *\nfrom dev_thuxuan.claims_preprocessing._int_inpatient_rehab_professional\n\nunion all\n\nselect *\nfrom dev_thuxuan.claims_preprocessing._int_lab_professional\n\nunion all\n\nselect *\nfrom dev_thuxuan.claims_preprocessing._int_office_visit_professional\n\nunion all\n\nselect *\nfrom dev_thuxuan.claims_preprocessing._int_outpatient_hospital_or_clinic_professional\n\nunion all\n\nselect *\nfrom dev_thuxuan.claims_preprocessing._int_outpatient_psychiatric_professional\n\nunion all\n\nselect *\nfrom dev_thuxuan.claims_preprocessing._int_outpatient_rehab_professional\n\nunion all\n\nselect *\nfrom dev_thuxuan.claims_preprocessing._int_skilled_nursing_professional\n\nunion all\n\nselect *\nfrom dev_thuxuan.claims_preprocessing._int_urgent_care_professional\n)\n\nselect \n  claim_id\n, claim_line_number\n, service_category_2\n, tuva_last_run\nfrom dev_thuxuan.claims_preprocessing._int_dme_professional\n\nunion all\n\nselect \n  a.claim_id\n, a.claim_line_number\n, a.service_category_2\n, a.tuva_last_run\nfrom dev_thuxuan.claims_preprocessing._int_ambulance_professional a\nleft join dev_thuxuan.claims_preprocessing._int_dme_professional b\n  on a.claim_id = b.claim_id\n  and a.claim_line_number = b.claim_line_number\nwhere (b.claim_id is null and b.claim_line_number is null)\n\nunion all\n\nselect \n  a.claim_id\n, a.claim_line_number\n, a.service_category_2\n, a.tuva_last_run\nfrom combined a\nleft join dev_thuxuan.claims_preprocessing._int_dme_professional b\n  on a.claim_id = b.claim_id\n  and a.claim_line_number = b.claim_line_number\nleft join dev_thuxuan.claims_preprocessing._int_ambulance_professional c\n  on a.claim_id = c.claim_id\n  and a.claim_line_number = c.claim_line_number\nwhere (b.claim_id is null and b.claim_line_number is null)\n  and (c.claim_id is null and c.claim_line_number is null)", "relation_name": "dev_thuxuan.claims_preprocessing._int_combined_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:13.979545Z", "completed_at": "2024-10-01T16:34:13.985558Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:13.986591Z", "completed_at": "2024-10-01T16:34:15.259503Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.4054224491119385, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f913-0001-987f0111a58e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_hospital_or_clinic_institutional", "compiled": true, "compiled_code": "\n\nselect distinct \n  a.claim_id\n, 'Outpatient Hospital or Clinic' as service_category_2\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.service_category__stg_medical_claim a\nleft join dev_thuxuan.claims_preprocessing._int_emergency_department_institutional b\n  on a.claim_id = b.claim_id\nleft join dev_thuxuan.claims_preprocessing._int_urgent_care_institutional c\n  on a.claim_id = c.claim_id\nwhere a.claim_type = 'institutional'\n  and substring(a.bill_type_code, 1, 2) in ('13','71','73')\n  and b.claim_id is null\n  and c.claim_id is null", "relation_name": "dev_thuxuan.claims_preprocessing._int_outpatient_hospital_or_clinic_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:14.506534Z", "completed_at": "2024-10-01T16:34:14.512539Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:14.512539Z", "completed_at": "2024-10-01T16:34:15.947845Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.5623362064361572, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f913-0001-987f0111a592"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.pharmacy__generic_available_list", "compiled": true, "compiled_code": "\n\nwith generic_sk as (\n  select \n      generic_available_sk\n    , claim_id\n    , claim_line_number\n    , data_source\n  from dev_thuxuan.pharmacy.pharmacy_claim_expanded as e\n  where generic_available_sk is not null\n)\n\nselect \n    sk.generic_available_sk\n  , p.data_source\n  , p.ndc_code as brand_ndc_code\n  , p.ndc_description as brand_ndc_description\n  , p.rxcui as brand_rxcui\n  , p.paid_amount as brand_paid_amount\n  , p.quantity as brand_units\n  , case \n      when p.quantity = 0 \n        then 0 \n      else p.paid_amount / p.quantity  \n    end as brand_paid_per_unit\n  , ga.ndc as generic_ndc\n  , n.fda_description as generic_ndc_description\n  , case \n      when gc.ndc_code is not null \n        then 1 \n      else 0 \n    end as generic_prescribed_history\n  , gc.cost_per_unit as generic_cost_per_unit\n  , gc.cost_per_unit * p.quantity as generic_cost_at_units\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.pharmacy.stg_pharmacy_claim as p\ninner join generic_sk as sk \n  on p.claim_id = sk.claim_id\n  and p.claim_line_number = sk.claim_line_number\n  and p.data_source = sk.data_source\ninner join dev_thuxuan.pharmacy._int_brand_with_generic_available as b \n  on p.rxcui = b.brand_with_generic_available\ninner join dev_thuxuan.pharmacy.rxnorm_generic_available as ga \n  on p.rxcui = ga.product_rxcui\n  and ga.ndc_product_tty in ('SCD','GPCK')\nleft join dev_thuxuan.terminology.ndc as n \n  on ga.ndc = n.ndc\nleft join dev_thuxuan.pharmacy._int_claims_current_cost as gc \n  on ga.ndc = gc.ndc_code\n  and gc.brand_vs_generic = 'generic'\n  and gc.data_source = p.data_source\nwhere \n    ga.product_startmarketingdate is not null\n    \n        and cast(ga.product_startmarketingdate as date) <= current_date\n", "relation_name": "dev_thuxuan.pharmacy.generic_available_list"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:15.130272Z", "completed_at": "2024-10-01T16:34:15.135272Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:15.135272Z", "completed_at": "2024-10-01T16:34:16.250651Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.2543220520019531, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f26"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__dq_multiple_service_categories_professional", "compiled": true, "compiled_code": "\n\nselect\n  claim_id\n, claim_line_number\n, count(distinct service_category_2) as distinct_service_category_count\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing._int_combined_professional\ngroup by claim_id, claim_line_number\nhaving count(distinct service_category_2) > 1", "relation_name": "dev_thuxuan.claims_preprocessing._dq_multiple_service_categories_professional"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:16.075776Z", "completed_at": "2024-10-01T16:34:16.200189Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:16.200189Z", "completed_at": "2024-10-01T16:34:16.823247Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.8720903396606445, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f2a"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.dbt_utils_unique_combination_of_columns_pharmacy__generic_available_list_generic_available_sk__generic_ndc.5460505c42", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        generic_available_sk, generic_ndc\n    from dev_thuxuan.pharmacy.generic_available_list\n    group by generic_available_sk, generic_ndc\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:15.390451Z", "completed_at": "2024-10-01T16:34:15.397212Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:15.397212Z", "completed_at": "2024-10-01T16:34:16.936997Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.6700971126556396, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110bdc6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__combined_institutional", "compiled": true, "compiled_code": "\n\nwith duplicate_bill_types as (\nselect distinct\n  claim_id\n, 'Other' as service_category_2\nfrom dev_thuxuan.claims_preprocessing._int_duplicate_bill_types\n)\n\n, combine as (\nselect *\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional\n\nunion all\n\nselect *\nfrom dev_thuxuan.claims_preprocessing._int_dialysis_institutional\n\nunion all\n\nselect *\nfrom dev_thuxuan.claims_preprocessing._int_emergency_department_institutional\n\nunion all\n\nselect *\nfrom dev_thuxuan.claims_preprocessing._int_home_health_institutional\n\nunion all\n\nselect *\nfrom dev_thuxuan.claims_preprocessing._int_hospice_institutional\n\nunion all\n\nselect *\nfrom dev_thuxuan.claims_preprocessing._int_lab_institutional\n\nunion all\n\nselect *\nfrom dev_thuxuan.claims_preprocessing._int_outpatient_hospital_or_clinic_institutional\n\nunion all\n\nselect *\nfrom dev_thuxuan.claims_preprocessing._int_outpatient_psychiatric_institutional\n\nunion all\n\nselect *\nfrom dev_thuxuan.claims_preprocessing._int_skilled_nursing_institutional\n\nunion all\n\nselect *\nfrom dev_thuxuan.claims_preprocessing._int_urgent_care_institutional\n)\n\nselect\n  claim_id\n, service_category_2\nfrom duplicate_bill_types\n\nunion all\n\nselect\n  a.claim_id\n, a.service_category_2\nfrom combine a\nleft join duplicate_bill_types b\n  on a.claim_id = b.claim_id\nwhere b.claim_id is null", "relation_name": "dev_thuxuan.claims_preprocessing._int_combined_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:17.072679Z", "completed_at": "2024-10-01T16:34:17.077771Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:17.082028Z", "completed_at": "2024-10-01T16:34:18.376867Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.4416399002075195, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110bdca"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__service_category_grouper", "compiled": true, "compiled_code": "\nwith service_category_1_mapping as(\n    select distinct \n        a.claim_id\n        , a.claim_line_number\n        , a.claim_type\n        , case\n            when service_category_2 = 'Acute Inpatient'               then 'Inpatient'\n            when service_category_2 = 'Ambulance'                     then 'Ancillary'\n            when service_category_2 = 'Ambulatory Surgery'            then 'Outpatient'\n            when service_category_2 = 'Dialysis'                      then 'Outpatient'\n            when service_category_2 = 'Durable Medical Equipment'     then 'Ancillary'\n            when service_category_2 = 'Emergency Department'          then 'Outpatient'\n            when service_category_2 = 'Home Health'                   then 'Outpatient'\n            when service_category_2 = 'Hospice'                       then 'Outpatient'\n            when service_category_2 = 'Inpatient Psychiatric'         then 'Inpatient'\n            when service_category_2 = 'Inpatient Rehabilitation'      then 'Inpatient'\n            when service_category_2 = 'Lab'                           then 'Ancillary'\n            when service_category_2 = 'Office Visit'                  then 'Office Visit'\n            when service_category_2 = 'Outpatient Hospital or Clinic' then 'Outpatient'\n            when service_category_2 = 'Outpatient Psychiatric'        then 'Outpatient'\n            when service_category_2 = 'Outpatient Rehabilitation'     then 'Outpatient'\n            when service_category_2 = 'Skilled Nursing'               then 'Inpatient'\n            when service_category_2 = 'Urgent Care'                   then 'Outpatient'\n            when service_category_2 is null                           then 'Other'\n        end service_category_1\n        , case\n            when service_category_2 is null then 'Other'\n            else service_category_2\n        end service_category_2\n        , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\n    from dev_thuxuan.test.service_category__stg_medical_claim a\n    left join dev_thuxuan.claims_preprocessing._int_combined_professional b\n    on a.claim_id = b.claim_id\n    and a.claim_line_number = b.claim_line_number\n    where a.claim_type = 'professional'\n\n    union all\n\n    select distinct \n        a.claim_id\n        , a.claim_line_number\n        , a.claim_type\n        , case\n            when service_category_2 = 'Acute Inpatient'               then 'Inpatient'\n            when service_category_2 = 'Ambulatory Surgery'            then 'Outpatient'\n            when service_category_2 = 'Dialysis'                      then 'Outpatient'\n            when service_category_2 = 'Emergency Department'          then 'Outpatient'\n            when service_category_2 = 'Home Health'                   then 'Outpatient'\n            when service_category_2 = 'Hospice'                       then 'Outpatient'\n            when service_category_2 = 'Inpatient Psychiatric'         then 'Inpatient'\n            when service_category_2 = 'Inpatient Rehabilitation'      then 'Inpatient'\n            when service_category_2 = 'Lab'                           then 'Ancillary'\n            when service_category_2 = 'Office Visit'                  then 'Office Visit'\n            when service_category_2 = 'Outpatient Hospital or Clinic' then 'Outpatient'\n            when service_category_2 = 'Outpatient Psychiatric'        then 'Outpatient'\n            when service_category_2 = 'Skilled Nursing'               then 'Inpatient'\n            when service_category_2 = 'Urgent Care'                   then 'Outpatient'\n            when service_category_2 is null                           then 'Other'\n        end service_category_1\n        , case\n            when service_category_2 is null then 'Other'\n            else service_category_2\n        end service_category_2\n        , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\n    from dev_thuxuan.test.service_category__stg_medical_claim a\n    left join dev_thuxuan.claims_preprocessing._int_combined_institutional b\n    on a.claim_id = b.claim_id\n    where a.claim_type = 'institutional'\n)\n, service_category_2_deduplication as(\n    select \n        claim_id\n        , claim_line_number\n        , claim_type\n        , service_category_1\n        , service_category_2\n        , row_number() over (partition by claim_id, claim_line_number order by \n            case\n            when service_category_2 = 'Acute Inpatient'               then 3\n            when service_category_2 = 'Ambulance'                     then 7\n            when service_category_2 = 'Ambulatory Surgery'            then 8\n            when service_category_2 = 'Dialysis'                      then 17\n            when service_category_2 = 'Durable Medical Equipment'     then 1\n            when service_category_2 = 'Emergency Department'          then 5\n            when service_category_2 = 'Home Health'                   then 9\n            when service_category_2 = 'Hospice'                       then 10\n            when service_category_2 = 'Inpatient Psychiatric'         then 11\n            when service_category_2 = 'Inpatient Rehabilitation'      then 12\n            when service_category_2 = 'Lab'                           then 13\n            when service_category_2 = 'Office Visit'                  then 4\n            when service_category_2 = 'Outpatient Hospital or Clinic' then 14\n            when service_category_2 = 'Outpatient Psychiatric'        then 15\n            when service_category_2 = 'Outpatient Rehabilitation'     then 16\n            when service_category_2 = 'Skilled Nursing'               then 6\n            when service_category_2 = 'Urgent Care'                   then 2\n            when service_category_2 is null                           then 18\n                else 99 end) as duplicate_row_number\n    from service_category_1_mapping\n)\n\nselect\n    claim_id\n    , claim_line_number\n    , claim_type\n    , service_category_1\n    , service_category_2\nfrom service_category_2_deduplication\nwhere duplicate_row_number = 1", "relation_name": "dev_thuxuan.claims_preprocessing.service_category_grouper"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:17.067701Z", "completed_at": "2024-10-01T16:34:17.077771Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:17.078694Z", "completed_at": "2024-10-01T16:34:18.411218Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.5734224319458008, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f913-0001-987f0111a596"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.service_category__dq_multiple_service_categories_institutional", "compiled": true, "compiled_code": "\n\nselect\n  claim_id\n, count(distinct service_category_2) as distinct_service_category_count\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing._int_combined_institutional\ngroup by claim_id\nhaving count(distinct service_category_2) > 1", "relation_name": "dev_thuxuan.claims_preprocessing._dq_multiple_service_categories_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:18.520838Z", "completed_at": "2024-10-01T16:34:18.529678Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:18.530688Z", "completed_at": "2024-10-01T16:34:19.500675Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.2448315620422363, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110bdce"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.emergency_department__stg_service_category", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , claim_type\n    , claim_line_number\n    , service_category_2\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing.service_category_grouper", "relation_name": "dev_thuxuan.test.emergency_department__stg_service_category"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:18.516835Z", "completed_at": "2024-10-01T16:34:18.525404Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:18.525404Z", "completed_at": "2024-10-01T16:34:19.761703Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3791143894195557, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f2e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__stg_service_category", "compiled": true, "compiled_code": "\n\n\nSELECT\n  claim_id\n, claim_type\n, claim_line_number\n, service_category_2\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing.service_category_grouper", "relation_name": "dev_thuxuan.test.acute_inpatient__stg_service_category"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:19.766762Z", "completed_at": "2024-10-01T16:34:19.774367Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:19.774367Z", "completed_at": "2024-10-01T16:34:21.860128Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.251710891723633, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f913-0001-987f0111a59a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.emergency_department__int_institutional_claims", "compiled": true, "compiled_code": "\n\n\nwith emergency_department_claim_lines as (\nselect\n  mc.patient_id,\n  mc.claim_id,\n  mc.claim_line_number,\n  mc.claim_start_date,\n  mc.claim_end_date,\n  mc.admission_date,\n  mc.discharge_date,\n  mc.admit_source_code,\n  mc.admit_type_code,\n  mc.discharge_disposition_code,\n  mc.facility_id,\n  mc.claim_type,\n  mc.data_source\nfrom dev_thuxuan.test.emergency_department__stg_medical_claim mc\ninner join dev_thuxuan.test.emergency_department__stg_service_category sc\n  on mc.claim_id = sc.claim_id\nwhere mc.claim_type = 'institutional'\n  and sc.service_category_2 = 'Emergency Department'\n),\n\ndata_quality_flags as (\nselect\n  claim_id,\n-- patient_id_not_unique:\n  case\n    when count(distinct patient_id) > 1 then 1\n    else 0\n  end as patient_id_not_unique,\n-- patient_id_missing:  \n  case\n    when max(patient_id) is null then 1\n    else 0\n  end as patient_id_missing,  \n-- claim_start_date_not_unique:\n  case\n    when count(distinct claim_start_date) > 1 then 1\n    else 0\n  end as claim_start_date_not_unique,\n-- claim_start_date_missing:  \n  case\n    when max(claim_start_date) is null then 1\n    else 0\n  end as claim_start_date_missing,\n-- claim_end_date_not_unique:\n  case\n    when count(distinct claim_end_date) > 1 then 1\n    else 0\n  end as claim_end_date_not_unique,\n-- claim_end_date_missing:  \n  case\n    when max(claim_end_date) is null then 1\n    else 0\n  end as claim_end_date_missing,\n-- claim_start_date_after_claim_end_date:\n  case\n    when min(claim_start_date) > max(claim_end_date) then 1\n    else 0\n  end as claim_start_date_after_claim_end_date,\n-- admission_date_not_unique:\n  case\n    when count(distinct admission_date) > 1 then 1\n    else 0\n  end as admission_date_not_unique,\n-- admission_date_missing:  \n  case\n    when max(admission_date) is null then 1\n    else 0\n  end as admission_date_missing,\n-- discharge_date_not_unique:\n  case\n    when count(distinct discharge_date) > 1 then 1\n    else 0\n  end as discharge_date_not_unique,\n-- discharge_date_missing:  \n  case\n    when max(discharge_date) is null then 1\n    else 0\n  end as discharge_date_missing,\n-- admission_date_after_discharge_date:\n  case\n    when min(admission_date) > max(discharge_date) then 1\n    else 0\n  end as admission_date_after_discharge_date,\n-- admit_type_code_not_unique:\n  case\n    when count(distinct admit_type_code) > 1 then 1\n    else 0\n  end as admit_type_code_not_unique,\n-- admit_type_code_missing:  \n  case\n    when max(admit_type_code) is null then 1\n    else 0\n  end as admit_type_code_missing,  \n-- admit_source_code_not_unique:\n  case\n    when count(distinct admit_source_code) > 1 then 1\n    else 0\n  end as admit_source_code_not_unique,\n-- admit_source_code_missing:  \n  case\n    when max(admit_source_code) is null then 1\n    else 0\n  end as admit_source_code_missing,  \n-- discharge_disposition_code_not_unique:\n  case\n    when count(distinct discharge_disposition_code) > 1 then 1\n    else 0\n  end as discharge_disposition_code_not_unique,\n-- discharge_disposition_code_missing:  \n  case\n    when max(discharge_disposition_code) is null then 1\n    else 0\n  end as discharge_disposition_code_missing,\n-- facility_id_not_unique:\n  case\n    when count(distinct facility_id) > 1 then 1\n    else 0\n  end as facility_id_not_unique,\n-- facility_id_missing:  \n  case\n    when max(facility_id) is null then 1\n    else 0\n  end as facility_id_missing,\n-- claim_type_not_unique:\n  case\n    when count(distinct claim_type) > 1 then 1\n    else 0\n  end as claim_type_not_unique,\n-- claim_type_missing:  \n  case\n    when max(claim_type) is null then 1\n    else 0\n  end as claim_type_missing,\n-- claim_type_not_institutional:\n  case\n    when max(claim_type) <> 'institutional'\n     and min(claim_type) <> 'institutional' then 1\n    else 0\n  end as claim_type_not_institutional\nfrom emergency_department_claim_lines\ngroup by claim_id\n),\n\n\nheader_level_values as (\nselect\n  claim_id,\n  max(patient_id) as patient_id,\n  min(claim_start_date) as claim_start_date,\n  max(claim_end_date) as claim_end_date,\n  min(admission_date) as admission_date,\n  max(discharge_date) as discharge_date,\n  max(admit_source_code) as admit_source_code,\n  max(admit_type_code) as admit_type_code,\n  max(discharge_disposition_code) as discharge_disposition_code,\n  max(facility_id) as facility_id,\n  max(claim_type) as claim_type,\n  coalesce(min(admission_date),\n           min(claim_start_date)) as start_date,\n  coalesce(max(discharge_date),\n           max(claim_end_date)) as end_date,\n  case\n    when min(admission_date) is not null then 'admission_date'\n    when min(claim_start_date) is not null then 'claim_start_date'\n    else null\n  end as date_used_as_start_date,\n  case\n    when max(discharge_date) is not null then 'discharge_date'\n    when max(claim_end_date) is not null then 'claim_end_date'\n    else null\n  end as date_used_as_end_date,\n  data_source\nfrom emergency_department_claim_lines\ngroup by claim_id, data_source\n)\n\nselect\n  h.patient_id as patient_id,\n  h.claim_id as claim_id,  \n  h.claim_start_date as claim_start_date,\n  h.claim_end_date as claim_end_date,\n  h.admission_date as admission_date,\n  h.discharge_date as discharge_date,\n  h.admit_source_code as admit_source_code,\n  h.admit_type_code as admit_type_code,\n  h.discharge_disposition_code as discharge_disposition_code,\n  h.facility_id as facility_id,\n  h.claim_type as claim_type,\n  h.start_date as start_date,\n  h.end_date as end_date,\n  h.date_used_as_start_date,\n  h.date_used_as_end_date, \n\n  case\n    when\n      ( (dq.patient_id_not_unique = 1) or\n        (dq.patient_id_missing = 1) or\n        (dq.discharge_disposition_code_not_unique = 1) or\n        (dq.discharge_disposition_code_missing = 1) or\n        (dq.facility_id_not_unique = 1) or\n        (dq.facility_id_missing = 1) or\n        (h.date_used_as_start_date is null) or\n\t(h.date_used_as_end_date is null) or\n\t(h.start_date > h.end_date) ) then 1\n    else 0\n  end as dq_problem,\n\n  case\n    when\n      ( (dq.claim_start_date_not_unique = 1) or\n\t(dq.claim_start_date_missing = 1) or\n        (dq.claim_end_date_not_unique = 1) or\n        (dq.claim_end_date_missing = 1) or\n        (dq.claim_start_date_after_claim_end_date = 1) or\n        (dq.admission_date_not_unique = 1) or\n        (dq.admission_date_missing = 1) or\n        (dq.discharge_date_not_unique = 1) or\n        (dq.discharge_date_missing = 1) or\n        (dq.admission_date_after_discharge_date = 1) or\n        (dq.admit_type_code_not_unique = 1) or\n        (dq.admit_type_code_missing = 1) or\n        (dq.admit_source_code_not_unique = 1) or\n        (dq.admit_source_code_missing = 1) or\t\n        (dq.claim_type_not_unique = 1) or\n        (dq.claim_type_missing = 1) or\n        (dq.claim_type_not_institutional = 1) ) then 1\n    else 0\n  end as dq_insight,\n\n  case\n    when (h.date_used_as_start_date is null) then 1\n    else 0\n  end as start_date_not_determined,\n  \n  case\n    when (h.date_used_as_end_date is null) then 1\n    else 0\n  end as end_date_not_determined,\n\n  case\n    when (h.start_date > h.end_date) then 1\n    else 0\n  end as start_date_after_end_date,\n  \n  dq.patient_id_not_unique as patient_id_not_unique,\n  dq.patient_id_missing as patient_id_missing,\n  dq.claim_start_date_not_unique as claim_start_date_not_unique,\n  dq.claim_start_date_missing as claim_start_date_missing,\n  dq.claim_end_date_not_unique as claim_end_date_not_unique,\n  dq.claim_end_date_missing as claim_end_date_missing,\n  dq.claim_start_date_after_claim_end_date\n       as claim_start_date_after_claim_end_date,\n  dq.admission_date_not_unique as admission_date_not_unique,\n  dq.admission_date_missing as admission_date_missing,\n  dq.discharge_date_not_unique as discharge_date_not_unique,\n  dq.discharge_date_missing as discharge_date_missing,\n  dq.admission_date_after_discharge_date\n       as admission_date_after_discharge_date,\n  dq.admit_type_code_not_unique\n       as admit_type_code_not_unique,\n  dq.admit_type_code_missing\n       as admit_type_code_missing,\n  dq.admit_source_code_not_unique\n       as admit_source_code_not_unique,\n  dq.admit_source_code_missing\n       as admit_source_code_missing,\n  dq.discharge_disposition_code_not_unique\n       as discharge_disposition_code_not_unique,\n  dq.discharge_disposition_code_missing\n       as discharge_disposition_code_missing,\n  dq.facility_id_not_unique as facility_id_not_unique,\n  dq.facility_id_missing as facility_id_missing,\n  dq.claim_type_not_unique as claim_type_not_unique,\n  dq.claim_type_missing as claim_type_missing,\n  dq.claim_type_not_institutional as claim_type_not_institutional,\n  h.data_source,\n  '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\n\nfrom header_level_values h\nleft join data_quality_flags dq\n  on h.claim_id = dq.claim_id", "relation_name": "dev_thuxuan.claims_preprocessing._int_emergency_department_institutional_claims"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:20.218123Z", "completed_at": "2024-10-01T16:34:20.224094Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:20.224094Z", "completed_at": "2024-10-01T16:34:22.237891Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.192530393600464, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110bdd2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__institutional_claims", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model gives us all acute inpatient institutional claims.\n-- We have one row per claim_id (for all claim_ids belonging to\n-- acute inpatient institutinal claims).\n-- The number of rows in the table is equal to the number of unique\n-- claim_ids (i.e. claim_id is a primary key).\n-- Note that we are assuming that a claim_id is unique across\n-- all people in the datset, i.e.\n-- that no two people can have the same claim_id.\n-- *************************************************\n\nwith acute_inpatient_claim_lines as (\nselect\n  mc.patient_id,\n  mc.claim_id,\n  mc.claim_line_number,\n  mc.claim_start_date,\n  mc.claim_end_date,\n  mc.admission_date,\n  mc.discharge_date,\n  mc.admit_source_code,\n  mc.admit_type_code,\n  mc.discharge_disposition_code,\n  mc.facility_id,\n  mc.claim_type,\n  mc.data_source\nfrom dev_thuxuan.test.acute_inpatient__stg_medical_claim mc\ninner join dev_thuxuan.test.acute_inpatient__stg_service_category sc\n  on mc.claim_id = sc.claim_id\nwhere mc.claim_type = 'institutional'\n  and sc.service_category_2 = 'Acute Inpatient'\n),\n\ndata_quality_flags as (\nselect\n  claim_id,\n-- patient_id_not_unique:\n  case\n    when count(distinct patient_id) > 1 then 1\n    else 0\n  end as patient_id_not_unique,\n-- patient_id_missing:  \n  case\n    when max(patient_id) is null then 1\n    else 0\n  end as patient_id_missing,  \n-- claim_start_date_not_unique:\n  case\n    when count(distinct claim_start_date) > 1 then 1\n    else 0\n  end as claim_start_date_not_unique,\n-- claim_start_date_missing:  \n  case\n    when max(claim_start_date) is null then 1\n    else 0\n  end as claim_start_date_missing,\n-- claim_end_date_not_unique:\n  case\n    when count(distinct claim_end_date) > 1 then 1\n    else 0\n  end as claim_end_date_not_unique,\n-- claim_end_date_missing:  \n  case\n    when max(claim_end_date) is null then 1\n    else 0\n  end as claim_end_date_missing,\n-- claim_start_date_after_claim_end_date:\n  case\n    when min(claim_start_date) > max(claim_end_date) then 1\n    else 0\n  end as claim_start_date_after_claim_end_date,\n-- admission_date_not_unique:\n  case\n    when count(distinct admission_date) > 1 then 1\n    else 0\n  end as admission_date_not_unique,\n-- admission_date_missing:  \n  case\n    when max(admission_date) is null then 1\n    else 0\n  end as admission_date_missing,\n-- discharge_date_not_unique:\n  case\n    when count(distinct discharge_date) > 1 then 1\n    else 0\n  end as discharge_date_not_unique,\n-- discharge_date_missing:  \n  case\n    when max(discharge_date) is null then 1\n    else 0\n  end as discharge_date_missing,\n-- admission_date_after_discharge_date:\n  case\n    when min(admission_date) > max(discharge_date) then 1\n    else 0\n  end as admission_date_after_discharge_date,\n-- admit_type_code_not_unique:\n  case\n    when count(distinct admit_type_code) > 1 then 1\n    else 0\n  end as admit_type_code_not_unique,\n-- admit_type_code_missing:  \n  case\n    when max(admit_type_code) is null then 1\n    else 0\n  end as admit_type_code_missing,  \n-- admit_source_code_not_unique:\n  case\n    when count(distinct admit_source_code) > 1 then 1\n    else 0\n  end as admit_source_code_not_unique,\n-- admit_source_code_missing:  \n  case\n    when max(admit_source_code) is null then 1\n    else 0\n  end as admit_source_code_missing,  \n-- discharge_disposition_code_not_unique:\n  case\n    when count(distinct discharge_disposition_code) > 1 then 1\n    else 0\n  end as discharge_disposition_code_not_unique,\n-- discharge_disposition_code_missing:  \n  case\n    when max(discharge_disposition_code) is null then 1\n    else 0\n  end as discharge_disposition_code_missing,\n-- facility_id_not_unique:\n  case\n    when count(distinct facility_id) > 1 then 1\n    else 0\n  end as facility_id_not_unique,\n-- facility_id_missing:  \n  case\n    when max(facility_id) is null then 1\n    else 0\n  end as facility_id_missing,\n-- claim_type_not_unique:\n  case\n    when count(distinct claim_type) > 1 then 1\n    else 0\n  end as claim_type_not_unique,\n-- claim_type_missing:  \n  case\n    when max(claim_type) is null then 1\n    else 0\n  end as claim_type_missing,\n-- claim_type_not_institutional:\n  case\n    when max(claim_type) <> 'institutional'\n     and min(claim_type) <> 'institutional' then 1\n    else 0\n  end as claim_type_not_institutional\nfrom acute_inpatient_claim_lines\ngroup by claim_id\n),\n\n\nheader_level_values as (\nselect\n  claim_id,\n  max(patient_id) as patient_id,\n  min(claim_start_date) as claim_start_date,\n  max(claim_end_date) as claim_end_date,\n  min(admission_date) as admission_date,\n  max(discharge_date) as discharge_date,\n  max(admit_source_code) as admit_source_code,\n  max(admit_type_code) as admit_type_code,\n  max(discharge_disposition_code) as discharge_disposition_code,\n  max(facility_id) as facility_id,\n  max(claim_type) as claim_type,\n  coalesce(min(admission_date),\n           min(claim_start_date)) as start_date,\n  coalesce(max(discharge_date),\n           max(claim_end_date)) as end_date,\n  case\n    when min(admission_date) is not null then 'admission_date'\n    when min(claim_start_date) is not null then 'claim_start_date'\n    else null\n  end as date_used_as_start_date,\n  case\n    when max(discharge_date) is not null then 'discharge_date'\n    when max(claim_end_date) is not null then 'claim_end_date'\n    else null\n  end as date_used_as_end_date,\n  data_source\nfrom acute_inpatient_claim_lines\ngroup by claim_id, data_source\n)\n\nselect\n  h.patient_id as patient_id,\n  h.claim_id as claim_id,  \n  h.claim_start_date as claim_start_date,\n  h.claim_end_date as claim_end_date,\n  h.admission_date as admission_date,\n  h.discharge_date as discharge_date,\n  h.admit_source_code as admit_source_code,\n  h.admit_type_code as admit_type_code,\n  h.discharge_disposition_code as discharge_disposition_code,\n  h.facility_id as facility_id,\n  h.claim_type as claim_type,\n  h.start_date as start_date,\n  h.end_date as end_date,\n  h.date_used_as_start_date,\n  h.date_used_as_end_date, \n\n  case\n    when\n      ( (dq.patient_id_not_unique = 1) or\n        (dq.patient_id_missing = 1) or\n        (dq.discharge_disposition_code_not_unique = 1) or\n        (dq.discharge_disposition_code_missing = 1) or\n        (dq.facility_id_not_unique = 1) or\n        (dq.facility_id_missing = 1) or\n        (h.date_used_as_start_date is null) or\n\t(h.date_used_as_end_date is null) or\n\t(h.start_date > h.end_date) ) then 1\n    else 0\n  end as dq_problem,\n\n  case\n    when\n      ( (dq.claim_start_date_not_unique = 1) or\n\t(dq.claim_start_date_missing = 1) or\n        (dq.claim_end_date_not_unique = 1) or\n        (dq.claim_end_date_missing = 1) or\n        (dq.claim_start_date_after_claim_end_date = 1) or\n        (dq.admission_date_not_unique = 1) or\n        (dq.admission_date_missing = 1) or\n        (dq.discharge_date_not_unique = 1) or\n        (dq.discharge_date_missing = 1) or\n        (dq.admission_date_after_discharge_date = 1) or\n        (dq.admit_type_code_not_unique = 1) or\n        (dq.admit_type_code_missing = 1) or\n        (dq.admit_source_code_not_unique = 1) or\n        (dq.admit_source_code_missing = 1) or\t\n        (dq.claim_type_not_unique = 1) or\n        (dq.claim_type_missing = 1) or\n        (dq.claim_type_not_institutional = 1) ) then 1\n    else 0\n  end as dq_insight,\n\n  case\n    when (h.date_used_as_start_date is null) then 1\n    else 0\n  end as start_date_not_determined,\n  \n  case\n    when (h.date_used_as_end_date is null) then 1\n    else 0\n  end as end_date_not_determined,\n\n  case\n    when (h.start_date > h.end_date) then 1\n    else 0\n  end as start_date_after_end_date,\n  \n  dq.patient_id_not_unique as patient_id_not_unique,\n  dq.patient_id_missing as patient_id_missing,\n  dq.claim_start_date_not_unique as claim_start_date_not_unique,\n  dq.claim_start_date_missing as claim_start_date_missing,\n  dq.claim_end_date_not_unique as claim_end_date_not_unique,\n  dq.claim_end_date_missing as claim_end_date_missing,\n  dq.claim_start_date_after_claim_end_date\n       as claim_start_date_after_claim_end_date,\n  dq.admission_date_not_unique as admission_date_not_unique,\n  dq.admission_date_missing as admission_date_missing,\n  dq.discharge_date_not_unique as discharge_date_not_unique,\n  dq.discharge_date_missing as discharge_date_missing,\n  dq.admission_date_after_discharge_date\n       as admission_date_after_discharge_date,\n  dq.admit_type_code_not_unique\n       as admit_type_code_not_unique,\n  dq.admit_type_code_missing\n       as admit_type_code_missing,\n  dq.admit_source_code_not_unique\n       as admit_source_code_not_unique,\n  dq.admit_source_code_missing\n       as admit_source_code_missing,\n  dq.discharge_disposition_code_not_unique\n       as discharge_disposition_code_not_unique,\n  dq.discharge_disposition_code_missing\n       as discharge_disposition_code_missing,\n  dq.facility_id_not_unique as facility_id_not_unique,\n  dq.facility_id_missing as facility_id_missing,\n  dq.claim_type_not_unique as claim_type_not_unique,\n  dq.claim_type_missing as claim_type_missing,\n  dq.claim_type_not_institutional as claim_type_not_institutional,\n  h.data_source,\n  '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\n\nfrom header_level_values h\nleft join data_quality_flags dq\n  on h.claim_id = dq.claim_id", "relation_name": "dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:22.024605Z", "completed_at": "2024-10-01T16:34:22.029784Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:22.029784Z", "completed_at": "2024-10-01T16:34:23.493499Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.607743740081787, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f32"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.emergency_department__int_institutional_encounter_id", "compiled": true, "compiled_code": "\n\n\nwith add_row_num as (\nselect\n  patient_id,\n  claim_id,\n  start_date,\n  end_date,\n  discharge_disposition_code,\n  facility_id,\n  row_number() over (partition by patient_id order by end_date, start_date, claim_id) as row_num\nfrom dev_thuxuan.claims_preprocessing._int_emergency_department_institutional_claims\n),\n\ncheck_for_merges_with_larger_row_num as (\nselect\n  aa.patient_id,\n  aa.claim_id as claim_id_a,\n  bb.claim_id as claim_id_b,\n  aa.row_num as row_num_a,\n  bb.row_num as row_num_b,\n  case\n    -- Claims with same end_date and same facility_id should be merged:\n    when (aa.end_date = bb.end_date\n          and aa.facility_id = bb.facility_id) then 1\n    -- Claims with different end_date \n    -- should be merged if they overlap:\n    when ( (aa.end_date <> bb.end_date) and \n           (aa.end_date >= bb.start_date) and --overlap requirement\n           (aa.facility_id = bb.facility_id)\n\t )then 1\n    else 0\n  end as merge_flag\nfrom add_row_num aa\n     inner join add_row_num bb\n     on aa.patient_id = bb.patient_id\n     and aa.row_num < bb.row_num\n),\n\nmerges_with_larger_row_num as (\nselect\n  patient_id,\n  claim_id_a,\n  claim_id_b,\n  row_num_a,\n  row_num_b,\n  merge_flag\nfrom check_for_merges_with_larger_row_num\nwhere merge_flag = 1\n),\n\n\nclaim_ids_that_merge_with_larger_row_num as (\nselect distinct claim_id_a as claim_id\nfrom merges_with_larger_row_num\n),\n\n\nclaim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as (\nselect distinct aa.claim_id as claim_id\nfrom add_row_num aa\n     inner join\n     merges_with_larger_row_num bb\n     on aa.patient_id = bb.patient_id\n     and bb.row_num_a < aa.row_num\n     and bb.row_num_b > aa.row_num\n),\n\n\nclose_flags as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  aa.start_date,\n  aa.end_date,\n  aa.discharge_disposition_code,\n  aa.facility_id,\n  aa.row_num,\n  case when (bb.claim_id is null and cc.claim_id is null) then 1\n       else 0\n  end as close_flag\n\nfrom add_row_num aa\n\nleft join claim_ids_that_merge_with_larger_row_num bb\non aa.claim_id = bb.claim_id\n\nleft join claim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num cc\non aa.claim_id = cc.claim_id\n),\n\n\njoin_every_row_to_later_closes as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.row_num as row_num,\n  bb.row_num as row_num_b\nfrom close_flags aa inner join close_flags bb\n     on aa.patient_id = bb.patient_id\n     and aa.row_num <= bb.row_num\nwhere bb.close_flag = 1\n),\n\n\nfind_min_closing_row_num_for_every_claim as (\nselect\n  patient_id,\n  claim_id,\n  min(row_num_b) as min_closing_row\nfrom join_every_row_to_later_closes\ngroup by patient_id, claim_id\n),\n\n\nadd_min_closing_row_to_every_claim as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.start_date as start_date,\n  aa.end_date as end_date,\n  aa.discharge_disposition_code as discharge_disposition_code,\n  aa.facility_id as facility_id,\n  aa.row_num as row_num,\n  aa.close_flag as close_flag,\n  bb.min_closing_row as min_closing_row\nfrom close_flags aa\n     left join find_min_closing_row_num_for_every_claim bb\n     on aa.patient_id = bb.patient_id\n     and aa.claim_id = bb.claim_id\n),\n\n\nadd_encounter_id as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.start_date as start_date,\n  aa.end_date as end_date,\n  aa.discharge_disposition_code as discharge_disposition_code,\n  aa.facility_id as facility_id,\n  aa.row_num as row_num,\n  aa.close_flag as close_flag,\n  aa.min_closing_row as min_closing_row,\n  bb.claim_id as encounter_id\nfrom add_min_closing_row_to_every_claim aa\n     left join add_min_closing_row_to_every_claim bb\n     on aa.patient_id = bb.patient_id\n     and aa.min_closing_row = bb.row_num\n)\n\nselect *, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_encounter_id", "relation_name": "dev_thuxuan.claims_preprocessing._int_emergency_department_institutional_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:22.428322Z", "completed_at": "2024-10-01T16:34:22.438149Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:22.439044Z", "completed_at": "2024-10-01T16:34:23.549983Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.2764527797698975, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f913-0001-987f0111a59e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__institutional_encounter_id", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model groups acute inpatient institutional\n-- claims into encounters. It assigns an encounter_id\n-- to each acute inpatient institutional claim.\n-- This returns a table with 3 fields:\n--      patient_id\n--      claim_id\n--      encounter_id\n-- The number of rows in the table should be equal\n-- to the number of acute inpatient institutional claims.\n-- *************************************************\n\n\nwith add_row_num as (\nselect\n  patient_id,\n  claim_id,\n  start_date,\n  end_date,\n  discharge_disposition_code,\n  facility_id,\n  row_number() over (partition by patient_id order by end_date, start_date, claim_id) as row_num\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\ncheck_for_merges_with_larger_row_num as (\nselect\n  aa.patient_id,\n  aa.claim_id as claim_id_a,\n  bb.claim_id as claim_id_b,\n  aa.row_num as row_num_a,\n  bb.row_num as row_num_b,\n  case\n    -- Claims with same end_date and same facility_id should be merged:\n    when (aa.end_date = bb.end_date\n          and aa.facility_id = bb.facility_id) then 1\n\n    -- Claims with different end_date and start_date that are\n    -- adjacent (i.e. separated by 1 day) should be merged:\n    when  ( \n\n    dateadd(\n        day,\n        1,\n        aa.end_date\n        )\n\n  = bb.start_date\n          and aa.facility_id = bb.facility_id\n\t  and aa.discharge_disposition_code = '30') then 1\n\n    -- Claims with different end_date \n    -- should be merged if they overlap:\n    when ( (aa.end_date <> bb.end_date) and \n           (aa.end_date >= bb.start_date) and --overlap requirement\n           (aa.facility_id = bb.facility_id)\n\t )then 1\n    else 0\n  end as merge_flag\nfrom add_row_num aa\n     inner join add_row_num bb\n     on aa.patient_id = bb.patient_id\n     and aa.row_num < bb.row_num\n),\n\nmerges_with_larger_row_num as (\nselect\n  patient_id,\n  claim_id_a,\n  claim_id_b,\n  row_num_a,\n  row_num_b,\n  merge_flag\nfrom check_for_merges_with_larger_row_num\nwhere merge_flag = 1\n),\n\n\nclaim_ids_that_merge_with_larger_row_num as (\nselect distinct claim_id_a as claim_id\nfrom merges_with_larger_row_num\n),\n\n\nclaim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as (\nselect distinct aa.claim_id as claim_id\nfrom add_row_num aa\n     inner join\n     merges_with_larger_row_num bb\n     on aa.patient_id = bb.patient_id\n     and bb.row_num_a < aa.row_num\n     and bb.row_num_b > aa.row_num\n),\n\n\nclose_flags as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  aa.start_date,\n  aa.end_date,\n  aa.discharge_disposition_code,\n  aa.facility_id,\n  aa.row_num,\n  case when (bb.claim_id is null and cc.claim_id is null) then 1\n       else 0\n  end as close_flag\n\nfrom add_row_num aa\n\nleft join claim_ids_that_merge_with_larger_row_num bb\non aa.claim_id = bb.claim_id\n\nleft join claim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num cc\non aa.claim_id = cc.claim_id\n),\n\n\njoin_every_row_to_later_closes as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.row_num as row_num,\n  bb.row_num as row_num_b\nfrom close_flags aa inner join close_flags bb\n     on aa.patient_id = bb.patient_id\n     and aa.row_num <= bb.row_num\nwhere bb.close_flag = 1\n),\n\n\nfind_min_closing_row_num_for_every_claim as (\nselect\n  patient_id,\n  claim_id,\n  min(row_num_b) as min_closing_row\nfrom join_every_row_to_later_closes\ngroup by patient_id, claim_id\n),\n\n\nadd_min_closing_row_to_every_claim as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.start_date as start_date,\n  aa.end_date as end_date,\n  aa.discharge_disposition_code as discharge_disposition_code,\n  aa.facility_id as facility_id,\n  aa.row_num as row_num,\n  aa.close_flag as close_flag,\n  bb.min_closing_row as min_closing_row\nfrom close_flags aa\n     left join find_min_closing_row_num_for_every_claim bb\n     on aa.patient_id = bb.patient_id\n     and aa.claim_id = bb.claim_id\n),\n\n\nadd_encounter_id as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.start_date as start_date,\n  aa.end_date as end_date,\n  aa.discharge_disposition_code as discharge_disposition_code,\n  aa.facility_id as facility_id,\n  aa.row_num as row_num,\n  aa.close_flag as close_flag,\n  aa.min_closing_row as min_closing_row,\n  bb.claim_id as encounter_id\nfrom add_min_closing_row_to_every_claim aa\n     left join add_min_closing_row_to_every_claim bb\n     on aa.patient_id = bb.patient_id\n     and aa.min_closing_row = bb.row_num\n)\n\nselect *, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_encounter_id", "relation_name": "dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:22.417235Z", "completed_at": "2024-10-01T16:34:22.434260Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:22.435037Z", "completed_at": "2024-10-01T16:34:24.042203Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.7921605110168457, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110bdd6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__data_quality_summary", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model summarizes data quality issues\n-- that could affect claims preprocessing.\n-- The table returns 2 fields:\n--        field\n--        total_count\n--\n-- If we order the results by 'field', the first\n-- 3 rows give us a high level summary:\n--\n--       01 Total acute inpatient institutional claims:\n--             This is the total number of acute inpatient\n--             institutional claims\n--       02 Acute inpatient institutional claims with insights:\n--             This is the number of acute inpatient institutional\n--             claims for which something is not ideal (e.g. they\n--             are missing a claim_start_date) but it's not something\n--             that prevents the claim from being used in the\n--             encounter grouper.\n\n--       03 Acute inpatient institutional claims with problems:\n--             This is the number of acute inpatient institutional\n--             claims that have a data quality problem that\n--             prevents them from being used in the encounter grouper.\n\n-- The rest of the rows in the table give us counts\n-- of the number of acute inpatient institutional claims\n-- that have specific data quality problems.\n-- *************************************************\n\n\n\n\nwith total_acute_inpatient__institutional_claims as (\nselect\n  '01 Total acute inpatient institutional claims' as field,\n  count(*) as total_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\ntotal_claims_with_insights as (\nselect\n  '02 Acute inpatient institutional claims with insights' as field,\n  count(*) as total_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\nwhere dq_insight = 1\n),\n\n\ntotal_claims_with_problems as (\nselect\n  '03 Acute inpatient institutional claims with problems' as field,\n  count(*) as total_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\nwhere dq_problem = 1\n),\n\n\npatient_id_not_unique as (\nselect\n  '04 patient_id_not_unique' as field,\n  sum(patient_id_not_unique) as total_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\npatient_id_missing as (\nselect\n  '05 patient_id_missing' as field,\n  sum(patient_id_missing) as total_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nclaim_start_date_not_unique as (\nselect\n  '06 claim_start_date_not_unique' as field,\n  sum(claim_start_date_not_unique) as total_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nclaim_start_date_missing as (\nselect\n  '07 claim_start_date_missing' as field,\n  sum(claim_start_date_missing) as total_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nclaim_end_date_not_unique as (\nselect\n  '08 claim_end_date_not_unique' as field,\n  sum(claim_end_date_not_unique) as total_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nclaim_end_date_missing as (\nselect\n  '09 claim_end_date_missing' as field,\n  sum(claim_end_date_missing) as total_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nclaim_start_date_after_claim_end_date as (\nselect\n  '10 claim_start_date_after_claim_end_date' as field,\n  sum(claim_start_date_after_claim_end_date) as total_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nadmission_date_not_unique as (\nselect\n  '11 admission_date_not_unique' as field,\n  sum(admission_date_not_unique) as total_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nadmission_date_missing as (\nselect\n  '12 admission_date_missing' as field,\n  sum(admission_date_missing) as total_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\ndischarge_date_not_unique as (\nselect\n  '13 discharge_date_not_unique' as field,\n  sum(discharge_date_not_unique) as total_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\ndischarge_date_missing as (\nselect\n  '14 discharge_date_missing' as field,\n  sum(discharge_date_missing) as total_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nadmission_date_after_discharge_date as (\nselect\n  '15 admission_date_after_discharge_date' as field,\n  sum(admission_date_after_discharge_date) as total_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nadmit_type_code_not_unique as (\nselect\n  '16 admit_type_code_not_unique' as field,\n  sum(admit_type_code_not_unique) as total_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nadmit_type_code_missing as (\nselect\n  '17 admit_type_code_missing' as field,\n  sum(admit_type_code_missing) as total_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nadmit_source_code_not_unique as (\nselect\n  '18 admit_source_code_not_unique' as field,\n  sum(admit_source_code_not_unique) as total_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nadmit_source_code_missing as (\nselect\n  '19 admit_source_code_missing' as field,\n  sum(admit_source_code_missing) as total_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\ndischarge_disposition_code_not_unique as (\nselect\n  '20 discharge_disposition_code_not_unique' as field,\n  sum(discharge_disposition_code_not_unique) as total_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\ndischarge_disposition_code_missing as (\nselect\n  '21 discharge_disposition_code_missing' as field,\n  sum(discharge_disposition_code_missing) as total_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nfacility_id_not_unique as (\nselect\n  '22 facility_id_not_unique' as field,\n  sum(facility_id_not_unique) as total_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nfacility_id_missing as (\nselect\n  '23 facility_id_missing' as field,\n  sum(facility_id_missing) as total_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nclaim_type_not_unique as (\nselect\n  '24 claim_type_not_unique' as field,\n  sum(claim_type_not_unique) as total_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nclaim_type_missing as (\nselect\n  '25 claim_type_missing' as field,\n  sum(claim_type_missing) as total_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nclaim_type_not_institutional as (\nselect\n  '26 claim_type_not_institutional' as field,\n  sum(claim_type_not_institutional) as total_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nstart_date_not_determined as (\nselect\n  '27 start_date_not_determined' as field,\n  sum(start_date_not_determined) as total_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nend_date_not_determined as (\nselect\n  '28 end_date_not_determined' as field,\n  sum(end_date_not_determined) as total_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nstart_date_after_end_date as (\nselect\n  '29 start_date_after_end_date' as field,\n  sum(start_date_after_end_date) as total_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\n\nunion_cte as (\nselect *\nfrom total_acute_inpatient__institutional_claims\n\nunion all\n\nselect *\nfrom total_claims_with_insights\n\nunion all\n\nselect *\nfrom total_claims_with_problems\n\nunion all\n\nselect *\nfrom patient_id_not_unique\n\nunion all\n\nselect *\nfrom patient_id_missing\n\nunion all\n\nselect *\nfrom claim_start_date_not_unique\n\nunion all\n\nselect *\nfrom claim_start_date_missing\n\nunion all\n\nselect *\nfrom claim_end_date_not_unique\n\nunion all\n\nselect *\nfrom claim_end_date_missing\n\nunion all\n\nselect *\nfrom claim_start_date_after_claim_end_date\n\nunion all\n\nselect *\nfrom admission_date_not_unique\n\nunion all\n\nselect *\nfrom admission_date_missing\n\nunion all\n\nselect *\nfrom discharge_date_not_unique\n\nunion all\n\nselect *\nfrom discharge_date_missing\n\nunion all\n\nselect *\nfrom admission_date_after_discharge_date\n\nunion all\n\nselect *\nfrom admit_type_code_not_unique\n\nunion all\n\nselect *\nfrom admit_type_code_missing\n\nunion all\n\nselect *\nfrom admit_source_code_not_unique\n\nunion all\n\nselect *\nfrom admit_source_code_missing\n\nunion all\n\nselect *\nfrom discharge_disposition_code_not_unique\n\nunion all\n\nselect *\nfrom discharge_disposition_code_missing\n\nunion all\n\nselect *\nfrom facility_id_not_unique\n\nunion all\n\nselect *\nfrom facility_id_missing\n\nunion all\n\nselect *\nfrom claim_type_not_unique\n\nunion all\n\nselect *\nfrom claim_type_missing\n\nunion all\n\nselect *\nfrom claim_type_not_institutional\n\nunion all\n\nselect *\nfrom start_date_not_determined\n\nunion all\n\nselect *\nfrom end_date_not_determined\n\nunion all\n\nselect *\nfrom start_date_after_end_date\n)\n\n\n\nselect *, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom union_cte", "relation_name": "dev_thuxuan.claims_preprocessing._int_acute_inpatient_data_quality_summary"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:23.637569Z", "completed_at": "2024-10-01T16:34:23.642566Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:23.642566Z", "completed_at": "2024-10-01T16:34:25.131952Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.6577084064483643, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f36"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.emergency_department__int_encounter_start_and_end_dates", "compiled": true, "compiled_code": "\n\n\nwith add_encounter_id_to_emergency_department_encounters as (\nselect\n  aip.claim_id as claim_id,\n  aip.patient_id as patient_id,\n  aip.start_date as start_date,\n  aip.end_date as end_date,\n  eid.encounter_id as encounter_id\nfrom dev_thuxuan.claims_preprocessing._int_emergency_department_institutional_claims aip\nleft join dev_thuxuan.claims_preprocessing._int_emergency_department_institutional_encounter_id eid\n  on aip.patient_id = eid.patient_id\n  and aip.claim_id = eid.claim_id\n),\n\nencounter_start_and_end_dates as (\nselect\n  patient_id,\n  encounter_id,\n  min(start_date) as encounter_start_date,\n  max(end_date) as encounter_end_date\nfrom add_encounter_id_to_emergency_department_encounters\ngroup by patient_id, encounter_id\n)\n\nselect \n    patient_id\n    , encounter_id\n    , encounter_start_date\n    , encounter_end_date\n    , coalesce(encounter_start_date, encounter_end_date) as determined_encounter_start_date\n    , coalesce(encounter_end_date, encounter_start_date) as determined_encounter_end_date\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom encounter_start_and_end_dates", "relation_name": "dev_thuxuan.claims_preprocessing._int_emergency_department_encounter_start_and_end_dates"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:23.706807Z", "completed_at": "2024-10-01T16:34:23.712929Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:23.712929Z", "completed_at": "2024-10-01T16:34:25.478679Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.8942539691925049, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f3a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__encounter_start_and_end_dates", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model assigns an encounter_start_date and\n-- an encounter_end_date to each acute inpatient\n-- encounter_id.\n-- This returns a table with 4 fields:\n--      patient_id\n--      encounter_id\n--      encounter_start_date\n--      encounter_end_date\n-- The number of rows in the table should be equal\n-- to the number of acute inpatient encounters.\n-- *************************************************\n\n\nwith add_encounter_id_to_acute_inpatient_encounters as (\nselect\n  aip.claim_id as claim_id,\n  aip.patient_id as patient_id,\n  aip.start_date as start_date,\n  aip.end_date as end_date,\n  eid.encounter_id as encounter_id\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims aip\nleft join dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_encounter_id eid\n  on aip.patient_id = eid.patient_id\n  and aip.claim_id = eid.claim_id\n),\n\nencounter_start_and_end_dates as (\nselect\n  patient_id,\n  encounter_id,\n  min(start_date) as encounter_start_date,\n  max(end_date) as encounter_end_date\nfrom add_encounter_id_to_acute_inpatient_encounters\ngroup by patient_id, encounter_id\n)\n\nselect\n    patient_id\n    , encounter_id\n    , encounter_start_date\n    , encounter_end_date\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom encounter_start_and_end_dates", "relation_name": "dev_thuxuan.claims_preprocessing._int_acute_inpatient_encounter_start_and_end_dates"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:25.299102Z", "completed_at": "2024-10-01T16:34:25.304210Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:25.305141Z", "completed_at": "2024-10-01T16:34:26.626489Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.4452834129333496, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110bdda"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.emergency_department__int_professional_encounter_id", "compiled": true, "compiled_code": "\n\n\nwith emergency_department_professional_claim_ids as (\nselect \n    claim_id\n    , claim_line_number\nfrom dev_thuxuan.test.emergency_department__stg_service_category \nwhere claim_type = 'professional'\n  and service_category_2 = 'Emergency Department'\n),\n\nemergency_department_professional_claim_lines as (\nselect\n  mc.claim_id\n  , mc.claim_line_number\n  , mc.patient_id\n  , mc.claim_start_date as start_date\n  , mc.claim_end_date as end_date\t   \nfrom dev_thuxuan.test.emergency_department__stg_medical_claim mc\ninner join emergency_department_professional_claim_ids prof\n  on mc.claim_id = prof.claim_id\n  and mc.claim_line_number = prof.claim_line_number\n),\n\n\nemergency_department_professional_claim_dates as (\nselect\n  claim_id\n  , claim_line_number\n  , patient_id\n  , min(start_date) as start_date\n  , max(end_date) as end_date\nfrom emergency_department_professional_claim_lines\ngroup by \n    claim_id\n    , claim_line_number\n    , patient_id\n),\n\n\nroll_up_professional_claims_to_institutional_claims as (\n    select\n    aa.patient_id\n    , aa.claim_id\n    , aa.claim_line_number\n    , aa.start_date\n    , aa.end_date\n    , bb.encounter_id\n    , case\n            when bb.encounter_id is null then 1\n            else 0\n    end as orphan_claim_flag\n    from emergency_department_professional_claim_dates aa\n    left join dev_thuxuan.claims_preprocessing._int_emergency_department_encounter_start_and_end_dates bb\n    on aa.patient_id = bb.patient_id\n    and (coalesce(aa.start_date, aa.end_date) between coalesce(bb.encounter_start_date, bb.determined_encounter_start_date) and coalesce(bb.encounter_end_date, bb.determined_encounter_end_date))\n    and (coalesce(aa.end_date, aa.start_date) between coalesce(bb.encounter_start_date, bb.determined_encounter_start_date) and coalesce(bb.encounter_end_date, bb.determined_encounter_end_date))\n),\n\nprofessional_claims_in_more_than_one_encounter as (\nselect\n  patient_id\n , claim_id\n , claim_line_number\n , min(start_date) as start_date\n , max(end_date) as end_date\n , count(distinct encounter_id) as encounter_count\nfrom roll_up_professional_claims_to_institutional_claims\ngroup by patient_id, claim_id, claim_line_number\nhaving count(distinct encounter_id) > 1\n),\n\n\nprofessional_claims_not_in_more_than_one_encounter as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  aa.claim_line_number,\n  aa.start_date,\n  aa.end_date,\n  aa.encounter_id,\n  aa.orphan_claim_flag,\n  case\n    when (aa.orphan_claim_flag = 1) then 0\n    else 1\n  end as encounter_count\nfrom roll_up_professional_claims_to_institutional_claims aa\nleft join professional_claims_in_more_than_one_encounter bb\non aa.claim_id = bb.claim_id\nand aa.claim_line_number = bb.claim_line_number\nand aa.patient_id = bb.patient_id\nwhere (bb.patient_id is null) and (bb.claim_id is null)\n),\n\n\nall_emergency_department_professional_claims as (\nselect\n  patient_id,\n  claim_id,\n  claim_line_number,\n  start_date,\n  end_date,\n  encounter_id,\n  orphan_claim_flag,\n  encounter_count\nfrom professional_claims_not_in_more_than_one_encounter\n\nunion all\n\nselect\n  patient_id,\n  claim_id,\n  claim_line_number,\n  start_date,\n  end_date,\n  null as encounter_id,\n  0 as orphan_claim_count,\n  encounter_count\nfrom professional_claims_in_more_than_one_encounter\n)\n\n\n\nselect *, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom all_emergency_department_professional_claims", "relation_name": "dev_thuxuan.claims_preprocessing._int_emergency_department_professional_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:25.605700Z", "completed_at": "2024-10-01T16:34:25.611719Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:25.611719Z", "completed_at": "2024-10-01T16:34:27.085978Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.6151533126831055, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f3e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__professional_encounter_id", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model assigns professional acute inpatient\n-- claims to acute inpatient encounters.\n-- Some acute inpatient professional claims do not fall\n-- within an acute inpatient encounter. We call these\n-- orphan claims, and they do not have an encounter_id.\n-- Some acute inpatient professional claims fall within\n-- more than one acute inpatient encounter. Since we do not\n-- know what encounter these claims should be mapped to\n-- we do not assign them an encounter_id. These claims\n-- have encounter_count > 1.\n-- This model returns a table with 5 fields:\n--      patient_id\n--      claim_id\n--      encounter_id (is null for orphan claims or claims\n--                    that fall within more than one encounter)\n--      orphan_claim_flag (is always 0 or 1)\n--      encounter_count (an integer that represents the number\n--                       of acute inpatient encounters this\n--                       professional claim could fall into:\n--                       could be 0,1,2,3,...  but is never null\n--                       for acute inpatient professional claims)\n-- *************************************************\n\n\n\n\nwith acute_inpatient_professional_claim_ids as (\nselect distinct \n    claim_id\n    , claim_line_number\nfrom dev_thuxuan.test.acute_inpatient__stg_service_category \nwhere claim_type = 'professional'\n  and service_category_2 = 'Acute Inpatient'\n),\n\nacute_inpatient_professional_claim_lines as (\nselect\n  mc.claim_id,\n  mc.claim_line_number,\n  mc.patient_id,\n  mc.claim_start_date as start_date,\n  mc.claim_end_date as end_date\t   \nfrom dev_thuxuan.test.acute_inpatient__stg_medical_claim mc\ninner join acute_inpatient_professional_claim_ids prof\n  on mc.claim_id = prof.claim_id\n  and mc.claim_line_number = prof.claim_line_number\n),\n\n\nacute_inpatient_professional_claim_dates as (\nselect\n  claim_id,\n  claim_line_number,\n  patient_id,\n  min(start_date) as start_date,\n  max(end_date) as end_date\nfrom acute_inpatient_professional_claim_lines\ngroup by claim_id, claim_line_number, patient_id\n),\n\n\nroll_up_professional_claims_to_institutional_claims as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  aa.claim_line_number,\n  aa.start_date,\n  aa.end_date,\n  bb.encounter_id,\n  case\n    when bb.encounter_id is null then 1\n    else 0\n  end as orphan_claim_flag\nfrom acute_inpatient_professional_claim_dates aa\nleft join dev_thuxuan.claims_preprocessing._int_acute_inpatient_encounter_start_and_end_dates bb\n  on aa.patient_id = bb.patient_id\n  and (coalesce(aa.start_date, aa.end_date) between bb.encounter_start_date and bb.encounter_end_date)\n  and (coalesce(aa.end_date, aa.start_date) between bb.encounter_start_date and bb.encounter_end_date)\n),\n\nprofessional_claims_in_more_than_one_encounter as (\nselect\n  patient_id,\n  claim_id,\n  claim_line_number,\n  min(start_date) as start_date,\n  max(end_date) as end_date,\n  count(distinct encounter_id) as encounter_count\nfrom roll_up_professional_claims_to_institutional_claims\ngroup by patient_id, claim_line_number, claim_id\nhaving count(distinct encounter_id) > 1\n),\n\n\nprofessional_claims_not_in_more_than_one_encounter as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  aa.claim_line_number,\n  aa.start_date,\n  aa.end_date,\n  aa.encounter_id,\n  aa.orphan_claim_flag,\n  case\n    when (aa.orphan_claim_flag = 1) then 0\n    else 1\n  end as encounter_count\nfrom roll_up_professional_claims_to_institutional_claims aa\nleft join professional_claims_in_more_than_one_encounter bb\non aa.claim_id = bb.claim_id\nand aa.claim_line_number = bb.claim_line_number\nand aa.patient_id = bb.patient_id\nwhere (bb.patient_id is null) and (bb.claim_id is null)\n),\n\n\nall_acute_inpatient_professional_claims as (\nselect\n  patient_id,\n  claim_id,\n  claim_line_number,\n  start_date,\n  end_date,\n  encounter_id,\n  orphan_claim_flag,\n  encounter_count\nfrom professional_claims_not_in_more_than_one_encounter\n\nunion all\n\nselect\n  patient_id,\n  claim_id,\n  claim_line_number,\n  start_date,\n  end_date,\n  null as encounter_id,\n  0 as orphan_claim_count,\n  encounter_count\nfrom professional_claims_in_more_than_one_encounter\n)\n\n\n\nselect *, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom all_acute_inpatient_professional_claims", "relation_name": "dev_thuxuan.claims_preprocessing._int_acute_inpatient_professional_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:26.749658Z", "completed_at": "2024-10-01T16:34:26.756655Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:26.757656Z", "completed_at": "2024-10-01T16:34:27.885413Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2666680812835693, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f42"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.emergency_department__int_encounter_id", "compiled": true, "compiled_code": "\n\n\nselect\n  inst.patient_id,\n  inst.claim_id,\n  med.claim_line_number,\n  inst.encounter_id,\n  '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing._int_emergency_department_institutional_encounter_id inst\nleft join dev_thuxuan.test.emergency_department__stg_medical_claim med\n    on inst.claim_id = med.claim_id\n\n\nunion distinct\n\n\nselect\n  patient_id,\n  claim_id,\n  claim_line_number,\n  encounter_id,\n  '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing._int_emergency_department_professional_encounter_id\nwhere (orphan_claim_flag = 0) and (encounter_count = 1)", "relation_name": "dev_thuxuan.claims_preprocessing._int_emergency_department_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:27.224826Z", "completed_at": "2024-10-01T16:34:27.234371Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:27.234371Z", "completed_at": "2024-10-01T16:34:28.342470Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.289238452911377, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110bdde"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__encounter_id", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model assigns an encounter_id to each\n-- institutional or professional acute inpatient claim\n-- that is eligible to be part of an encounter.\n-- Professional acute inpatient claims that are\n-- orphan claims (don't overlap with an institutional\n-- acute inpatient claim) or that have\n-- encounter_count > 1 (overlap with more than one different\n-- acute inpatient encounter) are not included here.\n-- It returns a table with these 3 columns:\n--      patient_id\n--      claim_id\n--      encounter_id\n-- *************************************************\n\n\n\n\nselect\n  inst.patient_id,\n  inst.claim_id,\n  med.claim_line_number,\n  inst.encounter_id,\n  '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_encounter_id inst\nleft join dev_thuxuan.test.acute_inpatient__stg_medical_claim med\n    on inst.claim_id = med.claim_id\n\n\nunion distinct\n\n\nselect\n  patient_id,\n  claim_id,\n  claim_line_number,\n  encounter_id,\n  '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_professional_encounter_id\nwhere (orphan_claim_flag = 0) and (encounter_count = 1)", "relation_name": "dev_thuxuan.claims_preprocessing._int_acute_inpatient_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:28.023345Z", "completed_at": "2024-10-01T16:34:28.031877Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:28.031877Z", "completed_at": "2024-10-01T16:34:30.017405Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.1500232219696045, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f913-0001-987f0111a5a2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.emergency_department__int_first_claim_values", "compiled": true, "compiled_code": "\n\nwith first_claim_values as(\n    select distinct\n        e.encounter_id\n        , coalesce(claim_start_date, admission_date) as claim_start\n        , diagnosis_code_1\n        , diagnosis_code_type\n        , admit_source_code\n        , admit_type_code\n        , facility_id\n        , ms_drg_code\n        , apr_drg_code\n    from dev_thuxuan.claims_preprocessing._int_emergency_department_encounter_id e\n    inner join dev_thuxuan.test.emergency_department__stg_medical_claim m\n        on e.claim_id = m.claim_id\n    where claim_type = 'institutional'\n)\n\nselect\n    encounter_id\n    , claim_start\n    , diagnosis_code_1\n    , diagnosis_code_type\n    , admit_source_code\n    , admit_type_code\n    , facility_id\n    , ms_drg_code\n    , apr_drg_code\n    , row_number() over (partition by encounter_id order by claim_start) as claim_row\nfrom first_claim_values", "relation_name": "dev_thuxuan.claims_preprocessing._int_emergency_department_first_claim_values"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:28.027346Z", "completed_at": "2024-10-01T16:34:28.035858Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:28.036858Z", "completed_at": "2024-10-01T16:34:30.006974Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.1500604152679443, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f46"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.emergency_department__int_last_claim_values", "compiled": true, "compiled_code": "\n\nwith first_claim_values as(\n    select distinct\n        e.encounter_id\n        , coalesce(claim_start_date, admission_date) as claim_start\n        , discharge_disposition_code\n    from dev_thuxuan.claims_preprocessing._int_emergency_department_encounter_id e\n    inner join dev_thuxuan.test.emergency_department__stg_medical_claim m\n        on e.claim_id = m.claim_id\n    where claim_type = 'institutional'\n)\n\nselect\n    encounter_id\n    , claim_start\n    , discharge_disposition_code\n    , row_number() over (partition by encounter_id order by claim_start desc) as claim_row\nfrom first_claim_values", "relation_name": "dev_thuxuan.claims_preprocessing._int_emergency_department_last_claim_values"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:28.528811Z", "completed_at": "2024-10-01T16:34:28.538812Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:28.538812Z", "completed_at": "2024-10-01T16:34:30.318223Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.957108974456787, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d5d6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__first_claim_values", "compiled": true, "compiled_code": "\n\nwith first_claim_values as(\n    select distinct\n        e.encounter_id\n        , coalesce(claim_start_date, admission_date) as claim_start\n        , diagnosis_code_1\n        , diagnosis_code_type\n        , admit_source_code\n        , admit_type_code\n        , facility_id\n        , ms_drg_code\n        , apr_drg_code\n    from dev_thuxuan.claims_preprocessing._int_acute_inpatient_encounter_id e\n    inner join dev_thuxuan.test.acute_inpatient__stg_medical_claim m\n        on e.claim_id = m.claim_id\n    where claim_type = 'institutional'\n)\n\nselect\n    encounter_id\n    , claim_start\n    , diagnosis_code_1\n    , diagnosis_code_type\n    , admit_source_code\n    , admit_type_code\n    , facility_id\n    , ms_drg_code\n    , apr_drg_code\n    , row_number() over (partition by encounter_id order by claim_start) as claim_row\nfrom first_claim_values", "relation_name": "dev_thuxuan.claims_preprocessing._int_acute_inpatient_first_claim_values"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:28.534826Z", "completed_at": "2024-10-01T16:34:28.545404Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:28.546606Z", "completed_at": "2024-10-01T16:34:30.333619Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.03216290473938, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f912-0001-987f0111b5f6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__last_claim_values", "compiled": true, "compiled_code": "\n\nwith first_claim_values as(\n    select distinct\n        e.encounter_id\n        , coalesce(claim_start_date, admission_date) as claim_start\n        , discharge_disposition_code\n    from dev_thuxuan.claims_preprocessing._int_acute_inpatient_encounter_id e\n    inner join dev_thuxuan.test.acute_inpatient__stg_medical_claim m\n        on e.claim_id = m.claim_id\n    where claim_type = 'institutional'\n)\n\nselect\n    encounter_id\n    , claim_start\n    , discharge_disposition_code\n    , row_number() over (partition by encounter_id order by claim_start desc) as claim_row\nfrom first_claim_values", "relation_name": "dev_thuxuan.claims_preprocessing._int_acute_inpatient_last_claim_values"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:28.521784Z", "completed_at": "2024-10-01T16:34:28.527811Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:28.531812Z", "completed_at": "2024-10-01T16:34:30.489019Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.192080020904541, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f4a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__claims_with_encounter_data", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model returns relevant encounter-level\n-- data for every professional or institutional\n-- acute inpatient claim that is part of an encounter\n-- (note that all institutional acute inpatienet claims\n--  are part of an acute inpatient encounter, but only\n--  professional acute inpatient claims that are not\n--  orphan claims and that belong to one and only\n--  one encounter, i.e. have encounter_count = 1,\n--  are part of an acute inpatient encounter).\n-- It returns a table with these columns:\n--      patient_id\n--      claim_id\n--      start_date (date used for merging claims into encounters)\n--      end_date (date used for merging claims into encounters)\n--      encounter_id\n--      encounter_start_date,\n--      encounter_end_date,\n--      encounter_admit_source_code,\n--      encounter_admit_type_code,\n--      encounter_discharge_disposition_code\n-- *************************************************\n\n\n\n\nwith useful_fields_at_claim_id_level as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  aa.admit_type_code,\n  aa.admit_source_code,\n  aa.discharge_disposition_code,\n  aa.start_date,\n  aa.end_date,\n\n  bb.encounter_id,\n\n  cc.encounter_start_date,\n  cc.encounter_end_date\n\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_claims aa\n\nleft join\ndev_thuxuan.claims_preprocessing._int_acute_inpatient_encounter_id bb\non aa.claim_id = bb.claim_id\nand aa.patient_id = bb.patient_id\n\nleft join\ndev_thuxuan.claims_preprocessing._int_acute_inpatient_encounter_start_and_end_dates cc\non bb.encounter_id = cc.encounter_id\nand bb.patient_id = cc.patient_id\n),\n\n\n\nadmit_codes as (\nselect\n  encounter_id,\n  max(admit_source_code) as encounter_admit_source_code,\n  max(admit_type_code) as encounter_admit_type_code\nfrom useful_fields_at_claim_id_level\nwhere start_date = encounter_start_date\ngroup by encounter_id\n),\n\n\ndischarge_code as (\nselect\n  encounter_id,\n  max(discharge_disposition_code) as encounter_discharge_disposition_code\nfrom useful_fields_at_claim_id_level\nwhere end_date = encounter_end_date\ngroup by encounter_id\n),\n\n\nall_useful_fields_at_claim_id_level as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  aa.start_date,\n  aa.end_date,\n  aa.encounter_id,\n  aa.encounter_start_date,\n  aa.encounter_end_date,\n\n  bb.encounter_admit_source_code,\n  bb.encounter_admit_type_code,\n  \n  cc.encounter_discharge_disposition_code\n\nfrom useful_fields_at_claim_id_level aa \n     left join admit_codes bb on aa.encounter_id = bb.encounter_id\n     left join discharge_code cc on aa.encounter_id = cc.encounter_id\n)\n\n\n\nselect \n *, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom all_useful_fields_at_claim_id_level", "relation_name": "dev_thuxuan.claims_preprocessing._int_acute_inpatient_claims_with_encounter_data"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:30.196019Z", "completed_at": "2024-10-01T16:34:30.227196Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:30.228702Z", "completed_at": "2024-10-01T16:34:31.994033Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.9361858367919922, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d5da"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_medical_claim", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model creates the medical_claim table\n-- in core. It adds these 4 fields to the input layer\n-- medical claim table:\n--      encounter_id\n--      service_category_1\n--      service_category_2\n-- *************************************************\n\nwith medical_claim_stage as(\n    select\n        med.claim_id || '-' || med.claim_line_number as medical_claim_id\n        , cast(med.claim_id as TEXT ) as claim_id\n        , cast(med.claim_line_number as integer ) as claim_line_number\n        , cast(coalesce(ap.encounter_id,ed.encounter_id) as TEXT ) as encounter_id\n        , cast(med.claim_type as TEXT ) as claim_type\n        , cast(med.patient_id as TEXT ) as patient_id\n        , cast(med.member_id as TEXT ) as member_id\n        , cast(med.payer as TEXT ) as payer\n        , med.plan\n        , try_cast( med.claim_start_date as date ) as claim_start_date\n        , try_cast( med.claim_end_date as date ) as claim_end_date\n        , try_cast( med.claim_line_start_date as date ) as claim_line_start_date\n        , try_cast( med.claim_line_end_date as date ) as claim_line_end_date\n        , try_cast( med.admission_date as date ) as admission_date\n        , try_cast( med.discharge_date as date ) as discharge_date\n        , cast(srv_group.service_category_1 as TEXT ) as service_category_1\n        , cast(srv_group.service_category_2 as TEXT ) as service_category_2\n        , cast(med.admit_source_code as TEXT ) as admit_source_code\n        , cast(med.admit_source_description as TEXT ) as admit_source_description\n        , cast(med.admit_type_code as TEXT ) as admit_type_code\n        , cast(med.admit_type_description as TEXT ) as admit_type_description\n        , cast(med.discharge_disposition_code as TEXT ) as discharge_disposition_code\n        , cast(med.discharge_disposition_description as TEXT ) as discharge_disposition_description\n        , cast(med.place_of_service_code as TEXT ) as place_of_service_code\n        , cast(med.place_of_service_description as TEXT ) as place_of_service_description\n        , cast(med.bill_type_code as TEXT ) as bill_type_code\n        , cast(med.bill_type_description as TEXT ) as bill_type_description\n        , cast(med.ms_drg_code as TEXT ) as ms_drg_code\n        , cast(med.ms_drg_description as TEXT ) as ms_drg_description\n        , cast(med.apr_drg_code as TEXT ) as apr_drg_code\n        , cast(med.apr_drg_description as TEXT ) as apr_drg_description\n        , cast(med.revenue_center_code as TEXT ) as revenue_center_code\n        , cast(med.revenue_center_description as TEXT ) as revenue_center_description\n        , cast(med.service_unit_quantity as numeric(28,6) ) as service_unit_quantity\n        , cast(med.hcpcs_code as TEXT ) as hcpcs_code\n        , cast(med.hcpcs_modifier_1 as TEXT ) as hcpcs_modifier_1\n        , cast(med.hcpcs_modifier_2 as TEXT ) as hcpcs_modifier_2\n        , cast(med.hcpcs_modifier_3 as TEXT ) as hcpcs_modifier_3\n        , cast(med.hcpcs_modifier_4 as TEXT ) as hcpcs_modifier_4\n        , cast(med.hcpcs_modifier_5 as TEXT ) as hcpcs_modifier_5\n        , cast(med.rendering_id as TEXT ) as rendering_id\n        , cast(med.rendering_tin as TEXT ) as rendering_tin\n        , cast(med.rendering_name as TEXT ) as rendering_name\n        , cast(med.billing_id as TEXT ) as billing_id\n        , cast(med.billing_tin as TEXT ) as billing_tin\n        , cast(med.billing_name as TEXT ) as billing_name\n        , cast(med.facility_id as TEXT ) as facility_id\n        , cast(med.facility_name as TEXT ) as facility_name\n        , try_cast( med.paid_date as date ) as paid_date\n        , cast(med.paid_amount as numeric(28,6) ) as paid_amount\n        , cast(med.allowed_amount as numeric(28,6) ) as allowed_amount\n        , cast(med.charge_amount as numeric(28,6) ) as charge_amount\n        , cast(med.coinsurance_amount as numeric(28,6) ) as coinsurance_amount\n        , cast(med.copayment_amount as numeric(28,6) ) as copayment_amount\n        , cast(med.deductible_amount as numeric(28,6) ) as deductible_amount\n        , cast(med.total_cost_amount as numeric(28,6) ) as total_cost_amount\n        , cast(med.in_network_flag as int ) as in_network_flag\n        , cast(med.data_source as TEXT ) as data_source\n        , cast('2024-10-01 16:29:14.142894+00:00' as timestamp ) as tuva_last_run\n    from dev_thuxuan.claims_preprocessing.normalized_input_medical_claim med\n    left join dev_thuxuan.claims_preprocessing.service_category_grouper srv_group\n        on med.claim_id = srv_group.claim_id\n        and med.claim_line_number = srv_group.claim_line_number\n    left join dev_thuxuan.claims_preprocessing._int_acute_inpatient_encounter_id ap\n        on med.claim_id = ap.claim_id\n        and med.claim_line_number = ap.claim_line_number\n    left join dev_thuxuan.claims_preprocessing._int_emergency_department_encounter_id ed\n        on med.claim_id = ed.claim_id\n        and med.claim_line_number = ed.claim_line_number\n)\nselect\n    cast(med.medical_claim_id as TEXT ) as medical_claim_id\n    , cast(med.claim_id as TEXT ) as claim_id\n    , cast(med.claim_line_number as integer ) as claim_line_number\n    , cast(med.encounter_id as TEXT ) as encounter_id\n    , cast(med.claim_type as TEXT ) as claim_type\n    , cast(med.patient_id as TEXT ) as patient_id\n    , cast(med.member_id as TEXT ) as member_id\n    , cast(med.payer as TEXT ) as payer\n    , med.plan\n    , try_cast( med.claim_start_date as date ) as claim_start_date\n    , try_cast( med.claim_end_date as date ) as claim_end_date\n    , try_cast( med.claim_line_start_date as date ) as claim_line_start_date\n    , try_cast( med.claim_line_end_date as date ) as claim_line_end_date\n    , try_cast( med.admission_date as date ) as admission_date\n    , try_cast( med.discharge_date as date ) as discharge_date\n    , cast(med.service_category_1 as TEXT ) as service_category_1\n    , cast(med.service_category_2 as TEXT ) as service_category_2\n    , cast(med.admit_source_code as TEXT ) as admit_source_code\n    , cast(med.admit_source_description as TEXT ) as admit_source_description\n    , cast(med.admit_type_code as TEXT ) as admit_type_code\n    , cast(med.admit_type_description as TEXT ) as admit_type_description\n    , cast(med.discharge_disposition_code as TEXT ) as discharge_disposition_code\n    , cast(med.discharge_disposition_description as TEXT ) as discharge_disposition_description\n    , cast(med.place_of_service_code as TEXT ) as place_of_service_code\n    , cast(med.place_of_service_description as TEXT ) as place_of_service_description\n    , cast(med.bill_type_code as TEXT ) as bill_type_code\n    , cast(med.bill_type_description as TEXT ) as bill_type_description\n    , cast(med.ms_drg_code as TEXT ) as ms_drg_code\n    , cast(med.ms_drg_description as TEXT ) as ms_drg_description\n    , cast(med.apr_drg_code as TEXT ) as apr_drg_code\n    , cast(med.apr_drg_description as TEXT ) as apr_drg_description\n    , cast(med.revenue_center_code as TEXT ) as revenue_center_code\n    , cast(med.revenue_center_description as TEXT ) as revenue_center_description\n    , cast(med.service_unit_quantity as numeric(28,6) ) as service_unit_quantity\n    , cast(med.hcpcs_code as TEXT ) as hcpcs_code\n    , cast(med.hcpcs_modifier_1 as TEXT ) as hcpcs_modifier_1\n    , cast(med.hcpcs_modifier_2 as TEXT ) as hcpcs_modifier_2\n    , cast(med.hcpcs_modifier_3 as TEXT ) as hcpcs_modifier_3\n    , cast(med.hcpcs_modifier_4 as TEXT ) as hcpcs_modifier_4\n    , cast(med.hcpcs_modifier_5 as TEXT ) as hcpcs_modifier_5\n    , cast(med.rendering_id as TEXT ) as rendering_id\n    , cast(med.rendering_tin as TEXT ) as rendering_tin\n    , cast(med.rendering_name as TEXT ) as rendering_name\n    , cast(med.billing_id as TEXT ) as billing_id\n    , cast(med.billing_tin as TEXT ) as billing_tin\n    , cast(med.billing_name as TEXT ) as billing_name\n    , cast(med.facility_id as TEXT ) as facility_id\n    , cast(med.facility_name as TEXT ) as facility_name\n    , try_cast( med.paid_date as date ) as paid_date\n    , cast(med.paid_amount as numeric(28,6) ) as paid_amount\n    , cast(med.allowed_amount as numeric(28,6) ) as allowed_amount\n    , cast(med.charge_amount as numeric(28,6) ) as charge_amount\n    , cast(med.coinsurance_amount as numeric(28,6) ) as coinsurance_amount\n    , cast(med.copayment_amount as numeric(28,6) ) as copayment_amount\n    , cast(med.deductible_amount as numeric(28,6) ) as deductible_amount\n    , cast(med.total_cost_amount as numeric(28,6) ) as total_cost_amount\n    , cast(med.in_network_flag as int ) as in_network_flag\n    , cast(\n        case\n            when enroll.medical_claim_id is not null then 1\n                else 0\n        end as int) as enrollment_flag\n    , cast(med.data_source as TEXT ) as data_source\n    , cast(med.tuva_last_run as timestamp ) as tuva_last_run\nfrom medical_claim_stage med\nleft join dev_thuxuan.claims_preprocessing.flag_claims_with_enrollment enroll\n    on med.medical_claim_id = enroll.medical_claim_id", "relation_name": "dev_thuxuan.core._stg_claims_medical_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:30.180679Z", "completed_at": "2024-10-01T16:34:30.224179Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:30.224179Z", "completed_at": "2024-10-01T16:34:32.069485Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.011918783187866, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f4e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_condition", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model creates the condition table in core.\n-- *************************************************\n\nwith unpivot_cte as (\n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_1 as source_code\n  , 1 as diagnosis_rank\n  , diagnosis_poa_1 as present_on_admit_code\n  , data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim \nwhere diagnosis_code_1 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n\t       , discharge_date\n\t       , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_2 as source_code\n  , 2 as diagnosis_rank\n  , diagnosis_poa_2 as present_on_admit_code\n  , data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_2 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_3 as source_code\n  , 3 as diagnosis_rank\n  , diagnosis_poa_3 as present_on_admit_code\n  , data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_3 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_4 as source_code\n  , 4 as diagnosis_rank\n  , diagnosis_poa_4 as present_on_admit_code\n  , data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_4 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_5 as source_code\n  , 5 as diagnosis_rank\n  , diagnosis_poa_5 as present_on_admit_code\n  , data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_5 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_6 as source_code\n  , 6 as diagnosis_rank\n  , diagnosis_poa_6 as present_on_admit_code\n  , data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_6 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_7 as source_code\n  , 7 as diagnosis_rank\n  , diagnosis_poa_7 as present_on_admit_code\n  , data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_7 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_8 as source_code\n  , 8 as diagnosis_rank\n  , diagnosis_poa_8 as present_on_admit_code\n  , data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_8 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_9 as source_code\n  , 9 as diagnosis_rank\n  , diagnosis_poa_9 as present_on_admit_code\n  , data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_9 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_10 as source_code\n  , 10 as diagnosis_rank\n  , diagnosis_poa_10 as present_on_admit_code\n  , data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_10 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_11 as source_code\n  , 11 as diagnosis_rank\n  , diagnosis_poa_11 as present_on_admit_code\n  , data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_11 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_12 as source_code\n  , 12 as diagnosis_rank\n  , diagnosis_poa_12 as present_on_admit_code\n  , data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_12 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_13 as source_code\n  , 13 as diagnosis_rank\n  , diagnosis_poa_13 as present_on_admit_code\n  , data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_13 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_14 as source_code\n  , 14 as diagnosis_rank\n  , diagnosis_poa_14 as present_on_admit_code\n  , data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_14 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_15 as source_code\n  , 15 as diagnosis_rank\n  , diagnosis_poa_15 as present_on_admit_code\n  , data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_15 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_16 as source_code\n  , 16 as diagnosis_rank\n  , diagnosis_poa_16 as present_on_admit_code\n  , data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_16 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_17 as source_code\n  , 17 as diagnosis_rank\n  , diagnosis_poa_17 as present_on_admit_code\n  , data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_17 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_18 as source_code\n  , 18 as diagnosis_rank\n  , diagnosis_poa_18 as present_on_admit_code\n  , data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_18 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_19 as source_code\n  , 19 as diagnosis_rank\n  , diagnosis_poa_19 as present_on_admit_code\n  , data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_19 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_20 as source_code\n  , 20 as diagnosis_rank\n  , diagnosis_poa_20 as present_on_admit_code\n  , data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_20 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_21 as source_code\n  , 21 as diagnosis_rank\n  , diagnosis_poa_21 as present_on_admit_code\n  , data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_21 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_22 as source_code\n  , 22 as diagnosis_rank\n  , diagnosis_poa_22 as present_on_admit_code\n  , data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_22 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_23 as source_code\n  , 23 as diagnosis_rank\n  , diagnosis_poa_23 as present_on_admit_code\n  , data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_23 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_24 as source_code\n  , 24 as diagnosis_rank\n  , diagnosis_poa_24 as present_on_admit_code\n  , data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_24 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_25 as source_code\n  , 25 as diagnosis_rank\n  , diagnosis_poa_25 as present_on_admit_code\n  , data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_25 is not null\n\n)\n\nselect distinct\n\n    \n        try_cast(CAST(unpivot_cte.data_source AS TEXT) || '_' || CAST(unpivot_cte.claim_id AS TEXT) || '_' || CAST(unpivot_cte.diagnosis_rank AS TEXT) || '_' || CAST(unpivot_cte.source_code AS TEXT) as TEXT)\n     as condition_id\n\n    , cast(unpivot_cte.patient_id as TEXT ) as patient_id\n    , cast(coalesce(ap.encounter_id, ed.encounter_id) as TEXT ) as encounter_id\n    , cast(unpivot_cte.claim_id as TEXT ) as claim_id\n    , try_cast( unpivot_cte.recorded_date as date ) as recorded_date\n    , try_cast( null as date ) as onset_date\n    , try_cast( null as date ) as resolved_date\n    , cast('active' as TEXT ) as status\n    , cast(unpivot_cte.condition_type as TEXT ) as condition_type\n    , cast(unpivot_cte.source_code_type as TEXT ) as source_code_type\n    , cast(unpivot_cte.source_code as TEXT ) as source_code\n    , cast(null as TEXT ) as source_description\n    , cast(\n        case\n        when icd.icd_10_cm is not null then 'icd-10-cm'\n        end as TEXT\n      ) as normalized_code_type\n    , cast(icd.icd_10_cm as TEXT ) as normalized_code\n    , cast(icd.long_description as TEXT ) as normalized_description\n    , cast(unpivot_cte.diagnosis_rank as integer ) as condition_rank\n    , cast(unpivot_cte.present_on_admit_code as TEXT ) as present_on_admit_code\n    , cast(poa.present_on_admit_description as TEXT ) as present_on_admit_description\n    , cast(unpivot_cte.data_source as TEXT ) as data_source\n    , cast('2024-10-01 16:29:14.142894+00:00' as timestamp ) as tuva_last_run\nfrom unpivot_cte\nleft join dev_thuxuan.claims_preprocessing._int_acute_inpatient_encounter_id as ap\n    on unpivot_cte.claim_id = ap.claim_id\nleft join dev_thuxuan.claims_preprocessing._int_emergency_department_encounter_id as ed\n    on unpivot_cte.claim_id = ed.claim_id\nleft join dev_thuxuan.terminology.icd_10_cm icd\n    on unpivot_cte.source_code = icd.icd_10_cm\nleft join dev_thuxuan.terminology.present_on_admission as poa\n    on unpivot_cte.present_on_admit_code = poa.present_on_admit_code", "relation_name": "dev_thuxuan.core._stg_claims_condition"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:30.492939Z", "completed_at": "2024-10-01T16:34:30.518074Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:30.519113Z", "completed_at": "2024-10-01T16:34:32.540105Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.1828720569610596, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110bde2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_procedure", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model creates the procedure table in core.\n-- *************************************************\n\nwith unpivot_cte as (\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as procedure_date\n  , 'hcpcs' as source_code_type\n  , hcpcs_code as source_code\n  , rendering_id as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim\nwhere hcpcs_code is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_1 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_1 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_1 is not null\n    \n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_2 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_2 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_2 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_3 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_3 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_3 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_4 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_4 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_4 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_5 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_5 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_5 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_6 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_6 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_6 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_7 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_7 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_7 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_8 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_8 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_8 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_9 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_9 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_9 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_10 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_10 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_10 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_11 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_11 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_11 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_12 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_12 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_12 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_13 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_13 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_13 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_14 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_14 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_14 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_15 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_15 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_15 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_16 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_16 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_16 is not null\n    \n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_17 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_17 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_17 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_18 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_18 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_18 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_19 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_19 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_19 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_20 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_20 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_20 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_21 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_21 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_21 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_22 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_22 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_22 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_23 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_23 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_23 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_24 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_24 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_24 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_25 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_25 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_thuxuan.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_25 is not null\n\n)\n\nselect distinct\n\n    \n        try_cast(unpivot_cte.data_source || '_' || unpivot_cte.claim_id || '_' || unpivot_cte.source_code || case when unpivot_cte.modifier_1 is not null then CONCAT('_', unpivot_cte.modifier_1) else '' end || case when unpivot_cte.modifier_2 is not null then CONCAT('_', unpivot_cte.modifier_2) else '' end || case when unpivot_cte.modifier_3 is not null then CONCAT('_', unpivot_cte.modifier_3) else '' end || case when unpivot_cte.modifier_4 is not null then CONCAT('_', unpivot_cte.modifier_4) else '' end || case when unpivot_cte.modifier_5 is not null then CONCAT('_', unpivot_cte.modifier_5) else '' end || case when unpivot_cte.practitioner_npi is not null then CONCAT('_', unpivot_cte.practitioner_npi) else '' end as TEXT)\n     as procedure_id\n    , cast(unpivot_cte.patient_id as TEXT ) as patient_id\n    , cast(coalesce(ap.encounter_id, ed.encounter_id) as TEXT ) as encounter_id\n    , cast(unpivot_cte.claim_id as TEXT ) as claim_id\n    , try_cast( unpivot_cte.procedure_date as date ) as procedure_date\n    , cast(unpivot_cte.source_code_type as TEXT ) as source_code_type\n    , cast(unpivot_cte.source_code as TEXT ) as source_code\n    , cast(null as TEXT ) as source_description\n    , cast(\n        case\n        when icd.icd_10_pcs is not null then 'icd-10-pcs'\n        when hcpcs.hcpcs is not null then 'hcpcs'\n        end\n      as TEXT ) as normalized_code_type\n    , cast (\n        coalesce (\n            icd.icd_10_pcs\n          , hcpcs.hcpcs\n        )\n      as TEXT ) as normalized_code\n    , cast (\n        coalesce (\n            icd.description\n          , hcpcs.short_description\n        )\n      as TEXT ) as normalized_description\n    , cast(unpivot_cte.modifier_1 as TEXT ) as modifier_1\n    , cast(unpivot_cte.modifier_2 as TEXT ) as modifier_2\n    , cast(unpivot_cte.modifier_3 as TEXT ) as modifier_3\n    , cast(unpivot_cte.modifier_4 as TEXT ) as modifier_4\n    , cast(unpivot_cte.modifier_5 as TEXT ) as modifier_5\n    , cast(unpivot_cte.practitioner_npi as TEXT ) as practitioner_id\n    , cast(unpivot_cte.data_source as TEXT ) as data_source\n    , cast('2024-10-01 16:29:14.142894+00:00' as timestamp ) as tuva_last_run\nfrom unpivot_cte\nleft join dev_thuxuan.terminology.icd_10_pcs as icd\n    on unpivot_cte.source_code = icd.icd_10_pcs\nleft join dev_thuxuan.terminology.hcpcs_level_2 as hcpcs\n    on unpivot_cte.source_code = hcpcs.hcpcs\nleft join dev_thuxuan.claims_preprocessing._int_acute_inpatient_encounter_id as ap\n    on unpivot_cte.claim_id = ap.claim_id\nleft join dev_thuxuan.claims_preprocessing._int_emergency_department_encounter_id as ed\n    on unpivot_cte.claim_id = ed.claim_id", "relation_name": "dev_thuxuan.core._stg_claims_procedure"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:30.564568Z", "completed_at": "2024-10-01T16:34:30.576530Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:30.576530Z", "completed_at": "2024-10-01T16:34:32.763643Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.322202682495117, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f52"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.emergency_department__summary", "compiled": true, "compiled_code": "\n\nwith distinct_encounters as (\n    select distinct\n      a.encounter_id\n    , a.patient_id\n    , b.encounter_start_date\n    , b.encounter_end_date\n    from dev_thuxuan.claims_preprocessing._int_emergency_department_encounter_id a\n    inner join dev_thuxuan.claims_preprocessing._int_emergency_department_encounter_start_and_end_dates b\n      on a.encounter_id = b.encounter_id\n)\n\n, institutional_claim_details as (\n    select\n        b.encounter_id\n        , first.diagnosis_code_1\n        , first.diagnosis_code_type\n        , first.facility_id as facility_id\n        , first.ms_drg_code as ms_drg_code\n        , first.apr_drg_code as apr_drg_code\n        , first.admit_source_code as admit_source_code\n        , first.admit_type_code as admit_type_code\n        , last.discharge_disposition_code as discharge_disposition_code\n        , sum(paid_amount) as inst_paid_amount\n        , sum(allowed_amount) as inst_allowed_amount\n        , sum(charge_amount) as inst_charge_amount\n        , max(data_source) as data_source\n    from tuva.input_layer.medical_claim a\n    inner join dev_thuxuan.claims_preprocessing._int_emergency_department_encounter_id b\n        on a.claim_id = b.claim_id\n        and a.claim_line_number = b.claim_line_number\n        and a.claim_type = 'institutional'\n    inner join dev_thuxuan.claims_preprocessing._int_emergency_department_first_claim_values first\n        on b.encounter_id = first.encounter_id\n        and first.claim_row = 1\n    inner join dev_thuxuan.claims_preprocessing._int_emergency_department_last_claim_values last\n        on b.encounter_id = last.encounter_id\n        and last.claim_row = 1\n    group by\n    b.encounter_id\n    , first.diagnosis_code_1\n    , first.diagnosis_code_type\n    , first.facility_id\n    , first.ms_drg_code\n    , first.apr_drg_code\n    , first.admit_source_code\n    , first.admit_type_code\n    , last.discharge_disposition_code\n)\n\n, professional_claim_details as (\n    select\n      b.encounter_id\n    , sum(paid_amount) as prof_paid_amount\n    , sum(allowed_amount) as prof_allowed_amount\n    , sum(charge_amount) as prof_charge_amount\n    from tuva.input_layer.medical_claim a\n    inner join dev_thuxuan.claims_preprocessing._int_emergency_department_encounter_id b\n      on a.claim_id = b.claim_id\n      and a.claim_line_number = b.claim_line_number\n      and a.claim_type = 'professional'\n    group by b.encounter_id\n)\n\n, patient as (\n    select distinct\n          patient_id\n        , birth_date\n        , gender\n        , race\n    from dev_thuxuan.test.emergency_department__stg_eligibility\n)\n\n, facility as (\n    select\n          a.encounter_id\n        , max(a.facility_id) as facility_id\n        , count(distinct facility_id) as npi_count\n    from dev_thuxuan.claims_preprocessing._int_emergency_department_institutional_encounter_id a\n    group by a.encounter_id\n)\n\nselect\n    a.encounter_id\n    , a.encounter_start_date\n    , a.encounter_end_date\n    , a.patient_id\n    , datediff(\n        day,\n        birth_date,\n        encounter_end_date\n        )/365 as admit_age\n    , e.gender\n    , e.race\n    , c.diagnosis_code_type as primary_diagnosis_code_type\n    , c.diagnosis_code_1 as primary_diagnosis_code\n    , coalesce(icd10cm.long_description, icd9cm.long_description) as primary_diagnosis_description\n    , f.facility_id\n    , b.provider_organization_name as facility_name\n    , c.ms_drg_code\n    , j.ms_drg_description\n    , j.medical_surgical\n    , c.apr_drg_code\n    , k.apr_drg_description\n    , c.admit_source_code\n    , h.admit_source_description\n    , c.admit_type_code\n    , i.admit_type_description\n    , c.discharge_disposition_code\n    , g.discharge_disposition_description\n    , c.inst_paid_amount + coalesce(d.prof_paid_amount,0) as total_paid_amount\n    , c.inst_allowed_amount + coalesce(d.prof_allowed_amount,0) as total_allowed_amount\n    , c.inst_charge_amount + coalesce(d.prof_charge_amount,0) as total_charge_amount\n    , datediff(\n        day,\n        a.encounter_start_date,\n        a.encounter_end_date\n        ) as length_of_stay\n    , case\n        when c.discharge_disposition_code = '20' then 1\n        else 0\n    end mortality_flag\n    , data_source\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom distinct_encounters a\nleft join institutional_claim_details c\n  on a.encounter_id = c.encounter_id\nleft join professional_claim_details d\n  on a.encounter_id = d.encounter_id\nleft join patient e\n  on a.patient_id = e.patient_id\nleft join facility f\n  on a.encounter_id = f.encounter_id\nleft join dev_thuxuan.terminology.provider b\n  on f.facility_id = b.npi\nleft join dev_thuxuan.terminology.discharge_disposition g\n  on c.discharge_disposition_code = g.discharge_disposition_code\nleft join dev_thuxuan.terminology.admit_source h\n  on c.admit_source_code = h.admit_source_code\nleft join dev_thuxuan.terminology.admit_type i\n  on c.admit_type_code = i.admit_type_code\nleft join dev_thuxuan.terminology.ms_drg j\n  on c.ms_drg_code = j.ms_drg_code\nleft join dev_thuxuan.terminology.apr_drg k\n  on c.apr_drg_code = k.apr_drg_code\nleft join dev_thuxuan.terminology.icd_10_cm icd10cm\n  on c.diagnosis_code_1 = icd10cm.icd_10_cm\n  and c.diagnosis_code_type = 'icd-10-cm'\nleft join dev_thuxuan.terminology.icd_9_cm icd9cm\n  on c.diagnosis_code_1 = icd9cm.icd_9_cm\n  and c.diagnosis_code_type = 'icd-9-cm'", "relation_name": "dev_thuxuan.claims_preprocessing.emergency_department_summary"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:32.123160Z", "completed_at": "2024-10-01T16:34:32.129856Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:32.130811Z", "completed_at": "2024-10-01T16:34:33.310180Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.3051788806915283, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110bde6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__encounter_data_for_medical_claims", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model returns all the columns with relevant\n-- encounter fields that we will append to the medical_claim\n-- table.\n\n-- It returns a table with these columns:\n--      patient_id\n--      claim_id\n--      encounter_type\n--      encounter_id\n--      start_date (date used for merging claims into encounters)\n--      end_date (date used for merging claims into encounters)\n--      encounter_start_date,\n--      encounter_end_date,\n--      encounter_admit_source_code,\n--      encounter_admit_type_code,\n--      encounter_discharge_disposition_code\n--      orphan_claim_flag (always 0 or 1) (never null)\n--      encounter_count (could be 0,1,2,3,...) (never null)\n-- *************************************************\n\n\n\n\nwith acute_inpatient_claims_with_encounter_id as (\nselect\n  patient_id,\n  claim_id,\n  start_date,\n  end_date,  \n-- Relevant encounter-level fields for\n-- professional and institutional acute inpatient\n-- claims that are assigned to an encounter:\n  'acute inpatient' as encounter_type,\n  encounter_id,\n  encounter_start_date,\n  encounter_end_date,\n  encounter_admit_source_code,\n  encounter_admit_type_code,\n  encounter_discharge_disposition_code,\n-- Fields that are only relevant for professional\n-- acute inpatient claims that are not assigned to\n-- an encounter because they are orphan claims or because\n-- they overlap with more than one encounter:\n  0 as orphan_claim_flag,\n  1 as encounter_count\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_claims_with_encounter_data\n),\n\n\nacute_inpatient_claims_without_encounter_id as (\nselect\n  patient_id,\n  claim_id,\n  start_date,\n  end_date,  \n-- Relevant encounter-level fields for\n-- professional and institutional acute inpatient\n-- claims that are assigned to an encounter:\n  'acute inpatient' encounter_type,\n  cast(null as TEXT) as encounter_id,\n  cast(null as date) as encounter_start_date,\n  cast(null as date) as encounter_end_date,\n  cast(null as TEXT) as encounter_admit_source_code,\n  cast(null as TEXT) as encounter_admit_type_code,\n  cast(null as TEXT) as encounter_discharge_disposition_code,\n-- Fields that are only relevant for professional\n-- acute inpatient claims that are not assigned to\n-- an encounter because they are orphan claims or because\n-- they overlap with more than one encounter:\n  orphan_claim_flag,\n  encounter_count\n  \nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_professional_encounter_id\nwhere (orphan_claim_flag = 1) or (encounter_count > 1)\n)\n\n\nselect *, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom acute_inpatient_claims_with_encounter_id\n\nunion all\n\nselect *, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom acute_inpatient_claims_without_encounter_id", "relation_name": "dev_thuxuan.claims_preprocessing._int_encounter_data_for_medical_claims"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:30.720858Z", "completed_at": "2024-10-01T16:34:30.736527Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:30.736527Z", "completed_at": "2024-10-01T16:34:33.344421Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.8206405639648438, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f913-0001-987f0111a5a6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__summary", "compiled": true, "compiled_code": "\n\nwith distinct_encounters as (\n    select distinct\n    a.encounter_id\n    , a.patient_id\n    , b.encounter_start_date\n    , b.encounter_end_date\nfrom dev_thuxuan.claims_preprocessing._int_acute_inpatient_encounter_id a\ninner join dev_thuxuan.claims_preprocessing._int_acute_inpatient_encounter_start_and_end_dates b\n  on a.encounter_id = b.encounter_id\n)\n\n, institutional_claim_details as (\n    select\n        b.encounter_id\n        , first.diagnosis_code_1\n        , first.diagnosis_code_type\n        , first.facility_id as facility_id\n        , first.ms_drg_code as ms_drg_code\n        , first.apr_drg_code as apr_drg_code\n        , first.admit_source_code as admit_source_code\n        , first.admit_type_code as admit_type_code\n        , last.discharge_disposition_code as discharge_disposition_code\n        , sum(paid_amount) as inst_paid_amount\n        , sum(allowed_amount) as inst_allowed_amount\n        , sum(charge_amount) as inst_charge_amount\n        , max(data_source) as data_source\n    from tuva.input_layer.medical_claim a\n    inner join dev_thuxuan.claims_preprocessing._int_acute_inpatient_encounter_id b\n    on a.claim_id = b.claim_id\n    and a.claim_line_number = b.claim_line_number\n    and a.claim_type = 'institutional'\n    inner join dev_thuxuan.claims_preprocessing._int_acute_inpatient_first_claim_values first\n        on b.encounter_id = first.encounter_id\n        and first.claim_row = 1\n    inner join dev_thuxuan.claims_preprocessing._int_acute_inpatient_last_claim_values last\n        on b.encounter_id = last.encounter_id\n        and last.claim_row = 1\n    group by\n        b.encounter_id\n        , first.diagnosis_code_1\n        , first.diagnosis_code_type\n        , first.facility_id\n        , first.ms_drg_code\n        , first.apr_drg_code\n        , first.admit_source_code\n        , first.admit_type_code\n        , last.discharge_disposition_code\n)\n\n, professional_claim_details as (\n    select\n        b.encounter_id\n        , sum(paid_amount) as prof_paid_amount\n        , sum(allowed_amount) as prof_allowed_amount\n        , sum(charge_amount) as prof_charge_amount\n    from dev_thuxuan.test.acute_inpatient__stg_medical_claim a\n    inner join dev_thuxuan.claims_preprocessing._int_acute_inpatient_encounter_id b\n    on a.claim_id = b.claim_id\n    and a.claim_line_number = b.claim_line_number\n    and a.claim_type = 'professional'\ngroup by b.encounter_id\n)\n\n, patient as (\n    select distinct\n        patient_id\n        , birth_date\n        , gender\n        , race\n    from dev_thuxuan.test.acute_inpatient__stg_eligibility\n    )\n\n, facility as (\n    select\n          a.encounter_id\n        , max(a.facility_id) as facility_id\n        , count(distinct facility_id) as npi_count\n    from dev_thuxuan.claims_preprocessing._int_acute_inpatient_institutional_encounter_id a\n    group by a.encounter_id\n)\n\nselect\n  a.encounter_id\n, a.encounter_start_date\n, a.encounter_end_date\n, a.patient_id\n, datediff(\n        day,\n        birth_date,\n        encounter_end_date\n        )/365 as admit_age\n, e.gender\n, e.race\n, c.diagnosis_code_type as primary_diagnosis_code_type\n, c.diagnosis_code_1 as primary_diagnosis_code\n, coalesce(icd10cm.long_description, icd9cm.long_description) as primary_diagnosis_description\n, f.facility_id as facility_id\n, b.provider_organization_name as facility_name\n, c.ms_drg_code\n, j.ms_drg_description\n, j.medical_surgical\n, c.apr_drg_code\n, k.apr_drg_description\n, c.admit_source_code\n, h.admit_source_description\n, c.admit_type_code\n, i.admit_type_description\n, c.discharge_disposition_code\n, g.discharge_disposition_description\n, c.inst_paid_amount + coalesce(d.prof_paid_amount,0) as total_paid_amount\n, c.inst_allowed_amount + coalesce(d.prof_allowed_amount,0) as total_allowed_amount\n, c.inst_charge_amount + coalesce(d.prof_charge_amount,0) as total_charge_amount\n, datediff(\n        day,\n        a.encounter_start_date,\n        a.encounter_end_date\n        ) as length_of_stay\n, case\n    when c.discharge_disposition_code = '20' then 1\n    else 0\n  end mortality_flag\n, data_source\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom distinct_encounters a\nleft join institutional_claim_details c\n  on a.encounter_id = c.encounter_id\nleft join professional_claim_details d\n  on a.encounter_id = d.encounter_id\nleft join patient e\n  on a.patient_id = e.patient_id\nleft join facility f\n  on a.encounter_id = f.encounter_id\nleft join dev_thuxuan.terminology.provider b\n  on f.facility_id = b.npi\nleft join dev_thuxuan.terminology.discharge_disposition g\n  on c.discharge_disposition_code = g.discharge_disposition_code\nleft join dev_thuxuan.terminology.admit_source h\n  on c.admit_source_code = h.admit_source_code\nleft join dev_thuxuan.terminology.admit_type i\n  on c.admit_type_code = i.admit_type_code\nleft join dev_thuxuan.terminology.ms_drg j\n  on c.ms_drg_code = j.ms_drg_code\nleft join dev_thuxuan.terminology.apr_drg k\n  on c.apr_drg_code = k.apr_drg_code\nleft join dev_thuxuan.terminology.icd_10_cm icd10cm\n  on c.diagnosis_code_1 = icd10cm.icd_10_cm\n  and c.diagnosis_code_type = 'icd-10-cm'\nleft join dev_thuxuan.terminology.icd_9_cm icd9cm\n  on c.diagnosis_code_1 = icd9cm.icd_9_cm\n  and c.diagnosis_code_type = 'icd-9-cm'", "relation_name": "dev_thuxuan.claims_preprocessing.acute_inpatient_summary"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:32.195842Z", "completed_at": "2024-10-01T16:34:32.200022Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:32.200548Z", "completed_at": "2024-10-01T16:34:33.566091Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.5259642601013184, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d5de"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__medical_claim", "compiled": true, "compiled_code": "\n\n\nselect * from dev_thuxuan.core._stg_claims_medical_claim", "relation_name": "dev_thuxuan.core.medical_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:32.680574Z", "completed_at": "2024-10-01T16:34:32.692668Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:32.692668Z", "completed_at": "2024-10-01T16:34:34.039564Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.5239717960357666, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110bdea"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_location", "compiled": true, "compiled_code": "\n\nwith all_providers_in_claims_dataset as (\nselect distinct facility_id as npi, data_source\nfrom dev_thuxuan.core._stg_claims_medical_claim\n\n\nunion distinct\n\n\nselect distinct rendering_id as npi, data_source\nfrom dev_thuxuan.core._stg_claims_medical_claim\n\n\nunion distinct\n\n\nselect distinct billing_id as npi, data_source\nfrom dev_thuxuan.core._stg_claims_medical_claim\n\n\nunion distinct\n\n\nselect distinct prescribing_provider_id as npi, data_source\nfrom dev_thuxuan.core._stg_claims_pharmacy_claim\n\n\nunion distinct\n\n\nselect distinct dispensing_provider_id as npi, data_source\nfrom dev_thuxuan.core._stg_claims_pharmacy_claim\n),\n\n\nprovider as (\nselect aa.*, bb.data_source\nfrom dev_thuxuan.terminology.provider aa\ninner join all_providers_in_claims_dataset bb\non aa.npi = bb.npi\nwhere lower(aa.entity_type_description) = 'organization'\n)\n\n\n\nselect \n    cast(npi as TEXT ) as location_id\n    , cast(npi as TEXT ) as npi\n    , cast(provider_organization_name as TEXT ) as name\n    , cast(null as TEXT ) as facility_type\n    , cast(parent_organization_name as TEXT ) as parent_organization\n    , cast(practice_address_line_1 as TEXT ) as address\n    , cast(practice_city as TEXT ) as city\n    , cast(practice_state as TEXT ) as state\n    , cast(practice_zip_code as TEXT ) as zip_code\n    , cast(null as float ) as latitude\n    , cast(null as float ) as longitude\n    , cast(data_source as TEXT ) as data_source\n    , cast( '2024-10-01 16:29:14.142894+00:00' as timestamp ) as tuva_last_run\nfrom provider", "relation_name": "dev_thuxuan.core._stg_claims_location"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:32.891631Z", "completed_at": "2024-10-01T16:34:32.900147Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:32.900147Z", "completed_at": "2024-10-01T16:34:34.297527Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.5357084274291992, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f56"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_practitioner", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model creates the provider table \n-- in core. It includes data about all providers\n-- present in the raw claims dataset.\n-- *************************************************\n\n\nwith all_providers_in_claims_dataset as (\nselect distinct facility_id as npi, data_source\nfrom dev_thuxuan.core._stg_claims_medical_claim\n\n\nunion distinct\n\n\nselect distinct rendering_id as npi, data_source\nfrom dev_thuxuan.core._stg_claims_medical_claim\n\n\nunion distinct\n\n\nselect distinct billing_id as npi, data_source\nfrom dev_thuxuan.core._stg_claims_medical_claim\n\n\nunion distinct\n\n\nselect distinct prescribing_provider_id as npi, data_source\nfrom dev_thuxuan.core._stg_claims_pharmacy_claim\n\n\nunion distinct\n\n\nselect distinct dispensing_provider_id as npi, data_source\nfrom dev_thuxuan.core._stg_claims_pharmacy_claim\n),\n\n\nprovider as (\nselect aa.*, bb.data_source\nfrom dev_thuxuan.terminology.provider aa\ninner join all_providers_in_claims_dataset bb\non aa.npi = bb.npi\nwhere lower(aa.entity_type_description) = 'individual'\n)\n\n\n\nselect \n    cast(npi as TEXT ) as practitioner_id\n    , cast(npi as TEXT ) as npi\n    , cast(provider_first_name as TEXT ) as provider_first_name\n    , cast(provider_last_name as TEXT ) as provider_last_name\n    , cast(parent_organization_name as TEXT ) as practice_affiliation\n    , cast(primary_specialty_description as TEXT ) as specialty\n    , cast(null as TEXT ) as sub_specialty\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-10-01 16:29:14.142894+00:00' as timestamp ) as tuva_last_run\nfrom provider", "relation_name": "dev_thuxuan.core._stg_claims_practitioner"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:34.216169Z", "completed_at": "2024-10-01T16:34:34.222185Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:34.223169Z", "completed_at": "2024-10-01T16:34:35.008467Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.9373762607574463, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110bdee"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.unique_core__medical_claim_medical_claim_id.74a5d63708", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    medical_claim_id as unique_field,\n    count(*) as n_records\n\nfrom dev_thuxuan.core.medical_claim\nwhere medical_claim_id is not null\ngroup by medical_claim_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:33.432406Z", "completed_at": "2024-10-01T16:34:33.442471Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:33.443454Z", "completed_at": "2024-10-01T16:34:35.099355Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.8914685249328613, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f5a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__condition", "compiled": true, "compiled_code": "\n\n\nwith all_conditions as (\n   select *\nfrom dev_thuxuan.core._stg_claims_condition\nunion all\nselect *\nfrom dev_thuxuan.core._stg_clinical_condition\n\n\n)\n\n\n\n\nselect\n    all_conditions.condition_id\n  , all_conditions.patient_id\n  , all_conditions.encounter_id\n  , all_conditions.claim_id\n  , all_conditions.recorded_date\n  , all_conditions.onset_date\n  , all_conditions.resolved_date\n  , all_conditions.status\n  , all_conditions.condition_type\n  , all_conditions.source_code_type\n  , all_conditions.source_code\n  , all_conditions.source_description\n  , case\n        when all_conditions.normalized_code_type is not null then all_conditions.normalized_code_type\n        when icd10.icd_10_cm is not null then 'icd-10-cm'\n        when icd9.icd_9_cm is not null then 'icd-9-cm'\n        when snomed_ct.snomed_ct is not null then 'snomed-ct'\n        else null end as normalized_code_type\n  , coalesce(\n        all_conditions.normalized_code\n      , icd10.icd_10_cm\n      , icd9.icd_9_cm\n      , snomed_ct.snomed_ct) as normalized_code\n  , coalesce(\n        all_conditions.normalized_description\n      , icd10.short_description\n      , icd9.short_description\n      , snomed_ct.description) as normalized_description\n  , case when coalesce(all_conditions.normalized_code, all_conditions.normalized_description) is not null then 'manual'\n         when coalesce(icd10.icd_10_cm,icd9.icd_9_cm, snomed_ct.snomed_ct) is not null then 'automatic'\n         end as mapping_method\n  , all_conditions.condition_rank\n  , all_conditions.present_on_admit_code\n  , all_conditions.present_on_admit_description\n  , all_conditions.data_source\n  , all_conditions.tuva_last_run\nfrom\nall_conditions\nleft join dev_thuxuan.terminology.icd_10_cm icd10\n    on all_conditions.source_code_type = 'icd-10-cm'\n        and replace(all_conditions.source_code,'.','') = icd10.icd_10_cm\nleft join dev_thuxuan.terminology.icd_9_cm icd9\n    on all_conditions.source_code_type = 'icd-9-cm'\n        and replace(all_conditions.source_code,'.','') = icd9.icd_9_cm\nleft join dev_thuxuan.terminology.snomed_ct snomed_ct\n    on all_conditions.source_code_type = 'snomed-ct'\n        and all_conditions.source_code = snomed_ct.snomed_ct\n\n\n\n\n", "relation_name": "dev_thuxuan.core.condition"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:33.727285Z", "completed_at": "2024-10-01T16:34:33.746111Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:33.747120Z", "completed_at": "2024-10-01T16:34:35.196241Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.6020967960357666, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f62"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_encounter", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model creates the encounter table in core.\n-- *************************************************\n\nselect\n    cast(encounter_id as TEXT ) as encounter_id\n    , cast(patient_id as TEXT ) as patient_id\n    , cast('acute inpatient' as TEXT ) as encounter_type\n    , try_cast( encounter_start_date as date ) as encounter_start_date\n    , try_cast( encounter_end_date as date ) as encounter_end_date\n    , cast(length_of_stay as integer ) as length_of_stay\n    , cast(admit_source_code as TEXT ) as admit_source_code\n    , cast(admit_source_description as TEXT ) as admit_source_description\n    , cast(admit_type_code as TEXT ) as admit_type_code\n    , cast(admit_type_description as TEXT ) as admit_type_description\n    , cast(discharge_disposition_code as TEXT ) as discharge_disposition_code\n    , cast(discharge_disposition_description as TEXT ) as discharge_disposition_description\n    , cast(null as TEXT ) as attending_provider_id\n    , cast(null as TEXT ) as attending_provider_name\n    , cast(facility_id as TEXT ) as facility_id\n    , cast(facility_name as TEXT ) as facility_name\n    , cast(primary_diagnosis_code_type as TEXT ) as primary_diagnosis_code_type\n    , cast(primary_diagnosis_code as TEXT ) as primary_diagnosis_code\n    , cast(primary_diagnosis_description as TEXT ) as primary_diagnosis_description\n    , cast(ms_drg_code as TEXT ) as ms_drg_code\n    , cast(ms_drg_description as TEXT ) as ms_drg_description\n    , cast(apr_drg_code as TEXT ) as apr_drg_code\n    , cast(apr_drg_description as TEXT ) as apr_drg_description\n    , cast(total_paid_amount as numeric(28,6) ) as  paid_amount\n    , cast(total_allowed_amount as numeric(28,6) ) as allowed_amount\n    , cast(total_charge_amount as numeric(28,6) ) as charge_amount\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-10-01 16:29:14.142894+00:00' as timestamp ) as  tuva_last_run\nfrom dev_thuxuan.claims_preprocessing.acute_inpatient_summary \n\nunion all \n\nselect\n    cast(encounter_id as TEXT ) as encounter_id\n    , cast(patient_id as TEXT ) as patient_id\n    , cast('emergency department' as TEXT ) as encounter_type\n    , try_cast( encounter_start_date as date ) as encounter_start_date\n    , try_cast( encounter_end_date as date ) as encounter_end_date\n    , cast(length_of_stay as integer ) as length_of_stay\n    , cast(admit_source_code as TEXT ) as admit_source_code\n    , cast(admit_source_description as TEXT ) as admit_source_description\n    , cast(admit_type_code as TEXT ) as admit_type_code\n    , cast(admit_type_description as TEXT ) as admit_type_description\n    , cast(discharge_disposition_code as TEXT ) as discharge_disposition_code\n    , cast(discharge_disposition_description as TEXT ) as discharge_disposition_description\n    , cast(null as TEXT ) as attending_provider_id\n    , cast(null as TEXT ) as attending_provider_name\n    , cast(facility_id as TEXT ) as facility_id\n    , cast(facility_name as TEXT ) as facility_name\n    , cast(primary_diagnosis_code_type as TEXT ) as primary_diagnosis_code_type\n    , cast(primary_diagnosis_code as TEXT ) as primary_diagnosis_code\n    , cast(primary_diagnosis_description as TEXT ) as primary_diagnosis_description\n    , cast(ms_drg_code as TEXT ) as ms_drg_code\n    , cast(ms_drg_description as TEXT ) as ms_drg_description\n    , cast(apr_drg_code as TEXT ) as apr_drg_code\n    , cast(apr_drg_description as TEXT ) as apr_drg_description\n    , cast(total_paid_amount as numeric(28,6) ) as  paid_amount\n    , cast(total_allowed_amount as numeric(28,6) ) as allowed_amount\n    , cast(total_charge_amount as numeric(28,6) ) as charge_amount\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-10-01 16:29:14.142894+00:00' as timestamp ) as  tuva_last_run\nfrom dev_thuxuan.claims_preprocessing.emergency_department_summary", "relation_name": "dev_thuxuan.core._stg_claims_encounter"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:33.544428Z", "completed_at": "2024-10-01T16:34:33.554949Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:33.555946Z", "completed_at": "2024-10-01T16:34:35.501420Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.11960768699646, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f5e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__procedure", "compiled": true, "compiled_code": "\n\n\nwith all_procedures as (\nselect * from dev_thuxuan.core._stg_claims_procedure\nunion all\nselect * from dev_thuxuan.core._stg_clinical_procedure\n\n\n)\n\n\n\nselect\n    all_procedures.procedure_id\n  , all_procedures.patient_id\n  , all_procedures.encounter_id\n  , all_procedures.claim_id\n  , all_procedures.procedure_date\n  , all_procedures.source_code_type\n  , all_procedures.source_code\n  , all_procedures.source_description\n  , case when all_procedures.normalized_code_type is not null then  all_procedures.normalized_code_type\n      when icd10.icd_10_pcs is not null then 'icd-10-pcs'\n      when icd9.icd_9_pcs is not null then 'icd-9-pcs'\n      when hcpcs.hcpcs is not null then 'hcpcs'\n      when snomed_ct.snomed_ct is not null then 'snomed-ct'\n      end as normalized_code_type\n  , coalesce(all_procedures.normalized_code\n      , icd10.icd_10_pcs\n      , icd9.icd_9_pcs\n      , hcpcs.hcpcs\n      ,snomed_ct.snomed_ct ) as normalized_code\n  ,  coalesce(all_procedures.normalized_description\n      , icd10.description\n      , icd9.short_description\n      , hcpcs.short_description\n      , snomed_ct.description) normalized_description\n  , case when coalesce(all_procedures.normalized_code, all_procedures.normalized_description) is not null then 'manual'\n         when coalesce(icd10.icd_10_pcs,icd9.icd_9_pcs, hcpcs.hcpcs, snomed_ct.snomed_ct) is not null then 'automatic'\n         end as mapping_method\n  , all_procedures.modifier_1\n  , all_procedures.modifier_2\n  , all_procedures.modifier_3\n  , all_procedures.modifier_4\n  , all_procedures.modifier_5\n  , all_procedures.practitioner_id\n  , all_procedures.data_source\n  , all_procedures.tuva_last_run\nfrom all_procedures\nleft join dev_thuxuan.terminology.icd_10_pcs icd10\n    on all_procedures.source_code_type = 'icd-10-pcs'\n        and all_procedures.source_code = icd10.icd_10_pcs\nleft join dev_thuxuan.terminology.icd_9_pcs icd9\n    on all_procedures.source_code_type = 'icd-9-pcs'\n        and all_procedures.source_code = icd9.icd_9_pcs\nleft join dev_thuxuan.terminology.hcpcs_level_2 hcpcs\n    on all_procedures.source_code_type = 'hcpcs'\n        and all_procedures.source_code = hcpcs.hcpcs\nleft join dev_thuxuan.terminology.snomed_ct snomed_ct\n    on all_procedures.source_code_type = 'snomed-ct'\n        and all_procedures.source_code = snomed_ct.snomed_ct\n\n\n", "relation_name": "dev_thuxuan.core.procedure"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:34.432858Z", "completed_at": "2024-10-01T16:34:34.440972Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:34.441943Z", "completed_at": "2024-10-01T16:34:36.058927Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.7731897830963135, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f912-0001-987f0111b5fa"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__location", "compiled": true, "compiled_code": "\n\nselect * from dev_thuxuan.core._stg_claims_location\nunion all\nselect * from dev_thuxuan.core._stg_clinical_location\n\n", "relation_name": "dev_thuxuan.core.location"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:35.332388Z", "completed_at": "2024-10-01T16:34:35.340389Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:35.342387Z", "completed_at": "2024-10-01T16:34:36.606815Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.464376449584961, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f912-0001-987f0111b602"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.cms_chronic_conditions__stg_core__medical_claim", "compiled": true, "compiled_code": "\n\nselect\n      claim_id\n    , patient_id\n    , claim_start_date\n    , ms_drg_code\n    , data_source\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.medical_claim", "relation_name": "dev_thuxuan.test.cms_chronic_conditions__stg_core__medical_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:35.157941Z", "completed_at": "2024-10-01T16:34:35.165942Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:35.165942Z", "completed_at": "2024-10-01T16:34:36.757639Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.7185003757476807, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f912-0001-987f0111b5fe"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__practitioner", "compiled": true, "compiled_code": "\n\nselect * from dev_thuxuan.core._stg_claims_practitioner\nunion all\nselect * from dev_thuxuan.core._stg_clinical_practitioner\n\n", "relation_name": "dev_thuxuan.core.practitioner"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:35.349507Z", "completed_at": "2024-10-01T16:34:35.359507Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:35.360508Z", "completed_at": "2024-10-01T16:34:36.808588Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.6653027534484863, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110bdf2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__stg_core__medical_claim", "compiled": true, "compiled_code": "\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , claim_start_date\n    , claim_end_date\n    , bill_type_code\n    , hcpcs_code\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.medical_claim", "relation_name": "dev_thuxuan.cms_hcc._stg_medical_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:35.672042Z", "completed_at": "2024-10-01T16:34:35.679570Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:35.680581Z", "completed_at": "2024-10-01T16:34:37.270308Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.7166285514831543, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d5e2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__stg_medical_claim", "compiled": true, "compiled_code": "\n\n\nSELECT\n    patient_id\n    , claim_id\n    , claim_line_number\n    , claim_start_date\n    , claim_end_date\n    , service_category_1\n    , service_category_2\n    , paid_amount\n    , allowed_amount\n    , payer\n    , plan\n    , data_source\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.medical_claim", "relation_name": "dev_thuxuan.test.financial_pmpm__stg_medical_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:36.215047Z", "completed_at": "2024-10-01T16:34:36.222049Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:36.223048Z", "completed_at": "2024-10-01T16:34:38.164105Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.118265390396118, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f66"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.mart_review__data_source", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT data_source\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM dev_thuxuan.core.medical_claim", "relation_name": "dev_thuxuan.data_quality.mart_review__data_source"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:37.185199Z", "completed_at": "2024-10-01T16:34:37.196858Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:37.197863Z", "completed_at": "2024-10-01T16:34:38.331334Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.2674715518951416, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d5e6"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.unique_core__condition_condition_id.ef1067e2f0", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    condition_id as unique_field,\n    count(*) as n_records\n\nfrom dev_thuxuan.core.condition\nwhere condition_id is not null\ngroup by condition_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:37.163205Z", "completed_at": "2024-10-01T16:34:37.177211Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:37.189359Z", "completed_at": "2024-10-01T16:34:38.963247Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.044578790664673, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d5ea"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__stg_medical_claim", "compiled": true, "compiled_code": "\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.medical_claim\n\n", "relation_name": "dev_thuxuan.quality_measures._stg_medical_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:37.398977Z", "completed_at": "2024-10-01T16:34:37.408977Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:37.409978Z", "completed_at": "2024-10-01T16:34:39.106794Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.8307852745056152, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d5ee"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.core__encounter", "compiled": true, "compiled_code": "\n\nselect * from dev_thuxuan.core._stg_claims_encounter\nunion all\nselect * from dev_thuxuan.core._stg_clinical_encounter\n\n", "relation_name": "dev_thuxuan.core.encounter"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:37.029730Z", "completed_at": "2024-10-01T16:34:37.177211Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:37.178719Z", "completed_at": "2024-10-01T16:34:39.084871Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.203939437866211, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f6a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.mart_review__stg_medical_claim", "compiled": true, "compiled_code": "\n\nselect mc.*,\ncast(c.year_month_int as TEXT) as year_month\nFROM dev_thuxuan.core.medical_claim  mc\nleft join dev_thuxuan.reference_data.calendar c on coalesce(mc.claim_line_start_date,mc.claim_start_date) = c.full_date", "relation_name": "dev_thuxuan.data_quality.mart_review__stg_medical_claim"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:38.340796Z", "completed_at": "2024-10-01T16:34:38.347867Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:38.348800Z", "completed_at": "2024-10-01T16:34:39.162731Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.0095500946044922, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110bdf6"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.unique_core__procedure_procedure_id.feb1b6b4d5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    procedure_id as unique_field,\n    count(*) as n_records\n\nfrom dev_thuxuan.core.procedure\nwhere procedure_id is not null\ngroup by procedure_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:38.448361Z", "completed_at": "2024-10-01T16:34:38.455033Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:38.455033Z", "completed_at": "2024-10-01T16:34:39.252548Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.9487545490264893, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f6e"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.unique_core__location_location_id.dc12ec8d3a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    location_id as unique_field,\n    count(*) as n_records\n\nfrom dev_thuxuan.core.location\nwhere location_id is not null\ngroup by location_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:39.077870Z", "completed_at": "2024-10-01T16:34:39.086790Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:39.086790Z", "completed_at": "2024-10-01T16:34:39.979015Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.0222418308258057, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f72"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.unique_core__practitioner_practitioner_id.24d565a6b6", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    practitioner_id as unique_field,\n    count(*) as n_records\n\nfrom dev_thuxuan.core.practitioner\nwhere practitioner_id is not null\ngroup by practitioner_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:39.355843Z", "completed_at": "2024-10-01T16:34:39.364089Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:39.365093Z", "completed_at": "2024-10-01T16:34:40.595648Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.3798911571502686, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d5f6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ccsr__stg_core__condition", "compiled": true, "compiled_code": "\n\nselect\n    encounter_id\n    , claim_id\n    , patient_id\n    , normalized_code\n    , condition_rank\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.condition\nwhere normalized_code_type = 'icd-10-cm'", "relation_name": "dev_thuxuan.test.ccsr__stg_core__condition"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:39.253551Z", "completed_at": "2024-10-01T16:34:39.259588Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:39.261093Z", "completed_at": "2024-10-01T16:34:40.610320Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.5141639709472656, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f913-0001-987f0111a5aa"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__stg_pqi_condition", "compiled": true, "compiled_code": "\n\nselect \n    normalized_code_type\n  , normalized_code\n  , encounter_id\n  , data_source\nfrom \n    dev_thuxuan.core.condition", "relation_name": "dev_thuxuan.ahrq_measures._stg_pqi_condition"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:39.403123Z", "completed_at": "2024-10-01T16:34:39.413639Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:39.414646Z", "completed_at": "2024-10-01T16:34:40.733786Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.4394042491912842, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f76"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.cms_chronic_conditions__stg_core__condition", "compiled": true, "compiled_code": "\n\nselect\n      claim_id\n    , patient_id\n    , recorded_date\n    , normalized_code_type\n    , normalized_code\n    , data_source\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.condition\nwhere claim_id is not null", "relation_name": "dev_thuxuan.test.cms_chronic_conditions__stg_core__condition"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:39.239766Z", "completed_at": "2024-10-01T16:34:39.261093Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:39.265611Z", "completed_at": "2024-10-01T16:34:41.150535Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.0574159622192383, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d5f2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__patient_spend_with_service_categories", "compiled": true, "compiled_code": "\n\nwith claims_with_service_categories as (\n  select\n      patient_id\n    , payer\n    , plan\n    , service_category_1\n    , service_category_2\n    , coalesce(claim_start_date,claim_end_date) as claim_date\n    , paid_amount\n    , allowed_amount\n    , data_source\n  from dev_thuxuan.test.financial_pmpm__stg_medical_claim\n)\n\n, medical_claims_year_month as (\n  select\n      patient_id\n    , payer\n    , plan\n    , service_category_1\n    , service_category_2\n    , date_part('year', claim_date) || \n\n    case when 2 = 0\n        then ''\n    else\n        right(\n            '0' || date_part('month', claim_date),\n            2\n        )\n    end as year_month\n    , paid_amount\n    , allowed_amount\n    , data_source\n  from claims_with_service_categories\n)\n\n, rx_claims as (\n  select\n      patient_id\n    , payer\n    , plan\n    , 'Pharmacy' as service_category_1\n    , cast(null as TEXT) as service_category_2\n    , coalesce(dispensing_date, paid_date) as claim_date\n    , paid_amount\n    , allowed_amount\n    , data_source\n  from dev_thuxuan.test.financial_pmpm__stg_pharmacy_claim\n)\n\n, rx_claims_year_month as (\n  select\n      patient_id\n    , payer\n    , plan\n    , service_category_1\n    , service_category_2\n    , date_part('year', claim_date) || \n\n    case when 2 = 0\n        then ''\n    else\n        right(\n            '0' || date_part('month', claim_date),\n            2\n        )\n    end as year_month\n    , paid_amount\n    , allowed_amount\n    , data_source\n  from rx_claims\n)\n\n, combine_medical_and_rx as (\nselect *\nfrom medical_claims_year_month\n\nunion all\n\nselect *\nfrom rx_claims_year_month\n)\n\nselect\n    patient_id\n  , year_month\n  , payer\n  , plan\n  , service_category_1\n  , service_category_2\n  , sum(paid_amount) as total_paid\n  , sum(allowed_amount) as total_allowed\n  , data_source\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\n  from combine_medical_and_rx\ngroup by\n    patient_id\n  , year_month\n  , payer\n  , plan\n  , service_category_1\n  , service_category_2\n  , data_source", "relation_name": "dev_thuxuan.financial_pmpm._int_patient_spend_with_service_categories"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:40.105175Z", "completed_at": "2024-10-01T16:34:40.111653Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:40.112582Z", "completed_at": "2024-10-01T16:34:41.148462Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.1962590217590332, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d5fa"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__stg_core__condition", "compiled": true, "compiled_code": "\nselect\n      claim_id\n    , patient_id\n    , recorded_date\n    , condition_type\n    , normalized_code_type as code_type\n    , normalized_code as code\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.condition", "relation_name": "dev_thuxuan.cms_hcc._stg_condition"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:40.741218Z", "completed_at": "2024-10-01T16:34:40.745733Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:40.746742Z", "completed_at": "2024-10-01T16:34:41.953464Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.347078561782837, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d602"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__stg_core__condition", "compiled": true, "compiled_code": "\nselect\n      claim_id\n    , patient_id\n    , recorded_date\n    , condition_type\n    , lower(normalized_code_type) as code_type\n    , normalized_code as code\n    , data_source\nfrom dev_thuxuan.core.condition", "relation_name": "dev_thuxuan.hcc_suspecting._stg_condition"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:40.757026Z", "completed_at": "2024-10-01T16:34:40.763979Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:40.764976Z", "completed_at": "2024-10-01T16:34:41.955362Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.3352985382080078, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d5fe"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__stg_core__condition", "compiled": true, "compiled_code": "\nselect\n      patient_id\n    , claim_id\n    , encounter_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.condition", "relation_name": "dev_thuxuan.quality_measures._stg_condition"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:40.846040Z", "completed_at": "2024-10-01T16:34:40.853115Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:40.853115Z", "completed_at": "2024-10-01T16:34:42.114936Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.4212396144866943, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f913-0001-987f0111a5ae"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.tuva_chronic_conditions__stg_core__condition", "compiled": true, "compiled_code": "\n\nselect \n      patient_id\n    , normalized_code\n    , recorded_date\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.condition", "relation_name": "dev_thuxuan.test.tuva_chronic_conditions__stg_core__condition"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:41.320784Z", "completed_at": "2024-10-01T16:34:41.337679Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:41.338679Z", "completed_at": "2024-10-01T16:34:42.231112Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.0346570014953613, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f913-0001-987f0111a5b2"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.unique_core__encounter_encounter_id.d6227f8792", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    encounter_id as unique_field,\n    count(*) as n_records\n\nfrom dev_thuxuan.core.encounter\nwhere encounter_id is not null\ngroup by encounter_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:41.309265Z", "completed_at": "2024-10-01T16:34:41.332685Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:41.332685Z", "completed_at": "2024-10-01T16:34:42.753821Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.599048137664795, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d606"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_shared_exclusions_institutional_snp", "compiled": true, "compiled_code": "\n\n/*\n    patients in institutional special needs plans (snp)\n    or residing in long term care\n\n    while referencing this model, patients greater or equal than 66 years of age should be taken\n\n    filtering out age from this model has been stripped out as different measures calculate age varingly\n\n    future enhancement: group claims into encounters\n*/\n\nwith patients as (\n\n    select\n          patient_id\n    from dev_thuxuan.quality_measures._stg_patient\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from dev_thuxuan.quality_measures._stg_medical_claim\n\n)\n\n, exclusions as (\n\n    select\n          patients.patient_id\n        , coalesce(\n              medical_claim.claim_start_date\n            , medical_claim.claim_end_date\n          ) as exclusion_date\n        , 'institutional or long term care' as exclusion_reason\n    from patients\n         inner join medical_claim\n         on patients.patient_id = medical_claim.patient_id\n    where place_of_service_code in ('32', '33', '34', '54', '56')\n    and datediff(\n        day,\n        medical_claim.claim_start_date,\n        medical_claim.claim_end_date\n        ) >= 90\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , 'institutional_snp' as exclusion_type\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom exclusions", "relation_name": "dev_thuxuan.quality_measures._int_shared_exclusions_institutional_snp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:42.272307Z", "completed_at": "2024-10-01T16:34:42.277270Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:42.277270Z", "completed_at": "2024-10-01T16:34:43.433492Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.2895898818969727, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110bdfe"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__stg_pqi_procedure", "compiled": true, "compiled_code": "\n\nselect \n    normalized_code_type\n  , normalized_code\n  , encounter_id\n  , data_source\nfrom \n    dev_thuxuan.core.procedure", "relation_name": "dev_thuxuan.ahrq_measures._stg_pqi_procedure"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:42.360961Z", "completed_at": "2024-10-01T16:34:42.379890Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:42.381068Z", "completed_at": "2024-10-01T16:34:43.650229Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.4069006443023682, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f913-0001-987f0111a5b6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ccsr__stg_core__procedure", "compiled": true, "compiled_code": "\n\nselect \n      encounter_id\n    , claim_id\n    , patient_id\n    , normalized_code\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.procedure", "relation_name": "dev_thuxuan.test.ccsr__stg_core__procedure"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:42.095824Z", "completed_at": "2024-10-01T16:34:42.102822Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:42.103823Z", "completed_at": "2024-10-01T16:34:43.689619Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.7095866203308105, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110bdfa"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.mart_review__claims_with_enrollment", "compiled": true, "compiled_code": "\n\nwith enrollment_stage as(\nSELECT\n    mc.data_source,\n    mc.year_month,\n    SUM(CASE WHEN mm.patient_id IS NOT NULL THEN 1 ELSE 0 END) AS claims_with_enrollment,\n    COUNT(*) AS claims\nFROM dev_thuxuan.data_quality.mart_review__stg_medical_claim mc\nLEFT JOIN dev_thuxuan.core.member_months mm\n    ON mc.patient_id = mm.patient_id\n    AND mc.data_source = mm.data_source\n    AND mc.year_month = mm.year_month\nGROUP BY mc.data_source\n, mc.year_month\n)\n\nselect\n    data_source\n    , year_month\n    , claims_with_enrollment\n    , claims\n    , cast(claims_with_enrollment / claims as numeric(28,6) ) AS percentage_claims_with_enrollment\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom enrollment_stage", "relation_name": "dev_thuxuan.data_quality.mart_review__claims_with_enrollment"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:42.122852Z", "completed_at": "2024-10-01T16:34:42.131435Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:42.131435Z", "completed_at": "2024-10-01T16:34:43.751472Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.760784387588501, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f912-0001-987f0111b606"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.mart_review__members_with_claims", "compiled": true, "compiled_code": "\n\nWITH medical_claim AS (\n    SELECT\n        data_source,\n        patient_id,\n        year_month,\n        SUM(paid_amount) AS paid_amount\n    FROM dev_thuxuan.data_quality.mart_review__stg_medical_claim\n    GROUP BY data_source\n    , patient_id\n    , year_month\n)\n\n,pharmacy_claim AS (\n    SELECT\n        data_source,\n        patient_id,\n        year_month,\n        SUM(paid_amount) AS paid_amount\n    FROM dev_thuxuan.data_quality.mart_review__stg_pharmacy_claim\n    GROUP BY data_source\n    , patient_id\n    , year_month\n)\n, final as(\nSELECT\n    mm.data_source,\n    mm.year_month,\n    SUM(CASE WHEN mc.patient_id IS NOT NULL THEN 1 ELSE 0 END) AS members_with_medical_claims,\n    SUM(CASE WHEN pc.patient_id IS NOT NULL THEN 1 ELSE 0 END) AS members_with_pharmacy_claims,\n    SUM(CASE WHEN pc.patient_id IS NOT NULL THEN 1\n             WHEN mc.patient_id is not null THEN 1 ELSE 0 END) AS members_with_claims,\n    COUNT(*) AS total_member_months\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM dev_thuxuan.core.member_months mm\nLEFT JOIN medical_claim mc\n    ON mm.patient_id = mc.patient_id\n    AND mm.data_source = mc.data_source\n    AND mm.year_month = mc.year_month\nLEFT JOIN pharmacy_claim pc\n    ON mm.patient_id = pc.patient_id\n    AND mm.data_source = pc.data_source\n    AND mm.year_month = pc.year_month\nGROUP BY mm.data_source, mm.year_month\n)\n\nselect\n    data_source\n    , year_month\n    , members_with_medical_claims\n    , members_with_pharmacy_claims\n    , members_with_claims\n    , total_member_months\n    , cast(members_with_claims/ total_member_months as numeric(28,6)) as percent_members_with_claims\n    , cast(members_with_medical_claims/ total_member_months  as numeric(28,6)) as percent_members_with_medical_claims\n    , cast(members_with_pharmacy_claims/ total_member_months as numeric(28,6))  as  percent_members_with_pharmacy_claims\nfrom final", "relation_name": "dev_thuxuan.data_quality.mart_review__members_with_claims"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:42.914225Z", "completed_at": "2024-10-01T16:34:42.932397Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:42.933411Z", "completed_at": "2024-10-01T16:34:43.973719Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.182677984237671, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d60a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.cms_chronic_conditions__stg_core__procedure", "compiled": true, "compiled_code": "\n\nselect\n      claim_id\n    , patient_id\n    , procedure_date\n    , normalized_code_type\n    , normalized_code\n    , data_source\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.procedure\nwhere claim_id is not null", "relation_name": "dev_thuxuan.test.cms_chronic_conditions__stg_core__procedure"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:43.568335Z", "completed_at": "2024-10-01T16:34:43.575336Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:43.575336Z", "completed_at": "2024-10-01T16:34:44.849285Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.412869930267334, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f912-0001-987f0111b60a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__stg_core__procedure", "compiled": true, "compiled_code": "\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.procedure", "relation_name": "dev_thuxuan.quality_measures._stg_procedure"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:43.772943Z", "completed_at": "2024-10-01T16:34:43.779605Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:43.780614Z", "completed_at": "2024-10-01T16:34:45.083129Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.4907996654510498, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f7a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.readmissions__stg_core__procedure", "compiled": true, "compiled_code": "\n\nselect\n  encounter_id\n, normalized_code\n, normalized_code_type\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.procedure", "relation_name": "dev_thuxuan.test.readmissions__stg_core__procedure"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:43.810328Z", "completed_at": "2024-10-01T16:34:43.816963Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:43.817961Z", "completed_at": "2024-10-01T16:34:45.450459Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.811255931854248, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110be02"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.mart_review__pharmacy", "compiled": true, "compiled_code": "\n\n\nWITH dedup_prac AS (\n    SELECT DISTINCT practitioner_id,\n                    provider_first_name,\n                    provider_last_name,\n                    specialty\n    FROM dev_thuxuan.core.practitioner\n),\ndedup_loc AS (\n    SELECT DISTINCT location_id,\n                    npi,\n                    name\n    FROM dev_thuxuan.core.location\n)\n\nSELECT\n    p.claim_id,\n    p.claim_line_number,\n    p.patient_id,\n    p.data_source,\n    p.patient_id || '|' || p.data_source as patient_source_key,\n    p.ndc_code,\n    COALESCE(n.fda_description, n.rxnorm_description) AS ndc_description,\n    p.paid_amount,\n    p.allowed_amount,\n    p.prescribing_provider_id,\n    p.prescribing_provider_name,\n    prac.specialty AS prescribing_specialty,\n    p.dispensing_provider_id,\n    p.dispensing_provider_name,\n    p.paid_date,\n    p.dispensing_date,\n    p.days_supply,\n    n.rxcui,\n    n.rxnorm_description,\n    r.brand_name,\n    r.brand_vs_generic,\n    r.ingredient_name,\n    a.atc_1_name,\n    a.atc_2_name,\n    a.atc_3_name,\n    a.atc_4_name\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM dev_thuxuan.core.pharmacy_claim p\nLEFT JOIN dev_thuxuan.terminology.ndc n ON p.ndc_code = n.ndc\nLEFT JOIN dev_thuxuan.terminology.rxnorm_brand_generic r ON n.rxcui = r.product_rxcui\nLEFT JOIN dev_thuxuan.terminology.rxnorm_to_atc a ON n.rxcui = a.rxcui\nLEFT JOIN dedup_prac prac ON p.prescribing_provider_id = prac.practitioner_id\nLEFT JOIN dedup_loc l ON p.dispensing_provider_id = l.location_id", "relation_name": "dev_thuxuan.data_quality.mart_review__pharmacy"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:43.887659Z", "completed_at": "2024-10-01T16:34:43.896173Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:43.897184Z", "completed_at": "2024-10-01T16:34:45.951184Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.187281847000122, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f7e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ccsr__long_condition_category", "compiled": true, "compiled_code": "\n\nwith ccsr__dx_vertical_pivot as (\n    \n    select * from dev_thuxuan.ccsr.dx_vertical_pivot \n\n), condition as (\n    \n    select * from dev_thuxuan.test.ccsr__stg_core__condition\n\n), dxccsr_body_systems as (\n\n    select * from dev_thuxuan.ccsr._value_set_dxccsr_v2023_1_body_systems\n\n)\n\nselect \n    condition.encounter_id,\n    condition.claim_id,\n    condition.patient_id,\n    condition.normalized_code,\n    ccsr__dx_vertical_pivot.code_description,\n    condition.condition_rank,\n    ccsr__dx_vertical_pivot.ccsr_parent_category,\n    dxccsr_body_systems.body_system,\n    dxccsr_body_systems.parent_category_description,\n    ccsr__dx_vertical_pivot.ccsr_category,\n    ccsr__dx_vertical_pivot.ccsr_category_description,\n    ccsr__dx_vertical_pivot.ccsr_category_rank,\n    ccsr__dx_vertical_pivot.is_ip_default_category,\n    ccsr__dx_vertical_pivot.is_op_default_category,\n    '2023.1' as dxccsr_version,\n    '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom condition\nleft join ccsr__dx_vertical_pivot\n    on condition.normalized_code = ccsr__dx_vertical_pivot.code\nleft join dxccsr_body_systems on ccsr__dx_vertical_pivot.ccsr_parent_category = dxccsr_body_systems.ccsr_parent_category", "relation_name": "dev_thuxuan.ccsr.long_condition_category"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:44.100382Z", "completed_at": "2024-10-01T16:34:44.111894Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:44.112631Z", "completed_at": "2024-10-01T16:34:45.963908Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.996143102645874, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f913-0001-987f0111a5ba"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_hiv_aids", "compiled": true, "compiled_code": "with chronic_conditions as (\n\n    select * from dev_thuxuan.chronic_conditions._value_set_cms_chronic_conditions_hierarchy\n    where condition = 'Human Immunodeficiency Virus and/or Acquired Immunodeficiency Syndrome (HIV/AIDS)'\n\n)\n\n, patient_conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date as start_date\n        , normalized_code_type as code_type\n        , replace(normalized_code,'.','') as code\n        , data_source\n    from dev_thuxuan.test.cms_chronic_conditions__stg_core__condition\n\n)\n\n, patient_ms_drgs as (\n\n    select\n          patient_id\n        , claim_id\n        , claim_start_date as start_date\n        , 'MS-DRG' as code_type\n        , ms_drg_code as code\n        , data_source\n    from dev_thuxuan.test.cms_chronic_conditions__stg_core__medical_claim\n\n)\n\n/*\n    Exception logic: a claim with the diagnosis code R75 requires a second\n    qualifying claim that is not R75 (a screening code)\n\n    This CTE excludes encounters with the exception code. Those encounters\n    will be evaluated separately.\n*/\n, inclusions_diagnosis as (\n\n    select\n          patient_conditions.patient_id\n        , patient_conditions.claim_id\n        , patient_conditions.start_date\n        , patient_conditions.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_conditions\n         inner join chronic_conditions\n             on patient_conditions.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n    and chronic_conditions.code <> 'R75'\n\n)\n\n, inclusions_ms_drg as (\n\n    select\n          patient_ms_drgs.patient_id\n        , patient_ms_drgs.claim_id\n        , patient_ms_drgs.start_date\n        , patient_ms_drgs.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_ms_drgs\n         inner join chronic_conditions\n             on patient_ms_drgs.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'MS-DRG'\n\n)\n\n/*\n    Exception logic: a claim with the diagnosis code R75 requires a second\n    qualifying claim that is not R75 (a screening code)\n\n    This CTE includes encounters with the exception code only where that\n    patient has another encounter that is not R75.\n*/\n, exception_diagnosis as (\n\n    select\n          patient_conditions.patient_id\n        , patient_conditions.claim_id\n        , patient_conditions.start_date\n        , patient_conditions.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_conditions\n         inner join chronic_conditions\n             on patient_conditions.code = chronic_conditions.code\n         inner join inclusions_diagnosis\n             on patient_conditions.patient_id = inclusions_diagnosis.patient_id\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n    and chronic_conditions.code = 'R75'\n\n)\n\n\n, inclusions_unioned as (\n\n    select * from inclusions_diagnosis\n    union distinct\n    select * from inclusions_ms_drg\n    union distinct\n    select * from exception_diagnosis\n\n)\n\n\nselect distinct\n      cast(inclusions_unioned.patient_id as TEXT) as patient_id\n    , cast(inclusions_unioned.claim_id as TEXT) as claim_id\n    , cast(inclusions_unioned.start_date as date) as start_date\n    , cast(inclusions_unioned.chronic_condition_type as TEXT) as chronic_condition_type\n    , cast(inclusions_unioned.condition_category as TEXT) as condition_category\n    , cast(inclusions_unioned.condition as TEXT) as condition\n    , cast(inclusions_unioned.data_source as TEXT) as data_source\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom inclusions_unioned", "relation_name": "dev_thuxuan.chronic_conditions._int_cms_chronic_condition_hiv_aids"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:45.269743Z", "completed_at": "2024-10-01T16:34:45.278826Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:45.279735Z", "completed_at": "2024-10-01T16:34:46.450520Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.3047535419464111, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f86"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__service_category_1_paid_pivot", "compiled": true, "compiled_code": "\n\nwith service_cat_1 as (\n  select\n    patient_id\n  , year_month\n  , payer\n  , plan\n  , service_category_1\n  , data_source\n  , sum(total_paid) as total_paid\n  from dev_thuxuan.financial_pmpm._int_patient_spend_with_service_categories\n  group by\n    patient_id\n  , year_month\n  , payer\n  , plan\n  , service_category_1\n  , data_source\n)\n\nselect\n  patient_id\n, year_month\n, payer\n, plan\n, data_source\n, \n  \n    sum(\n      \n      case\n      when service_category_1 = 'Inpatient'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as inpatient_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'Outpatient'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as outpatient_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'Office Visit'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as office_visit_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'Ancillary'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as ancillary_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'Other'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as other_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'Pharmacy'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as pharmacy_paid\n      \n    \n    \n  \n\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom service_cat_1\ngroup by\n  patient_id\n, year_month\n, payer\n, plan\n, data_source", "relation_name": "dev_thuxuan.financial_pmpm._int_service_category_1_paid_pivot"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:44.988231Z", "completed_at": "2024-10-01T16:34:45.001271Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:45.002238Z", "completed_at": "2024-10-01T16:34:46.448510Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.592175006866455, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f82"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__service_category_1_allowed_pivot", "compiled": true, "compiled_code": "\n\nwith service_cat_1 as (\n  select\n    patient_id\n  , year_month\n  , payer\n  , plan\n  , service_category_1\n  , data_source\n  , sum(total_allowed) as total_allowed\n  from dev_thuxuan.financial_pmpm._int_patient_spend_with_service_categories\n  group by\n    patient_id\n  , year_month\n  , payer\n  , plan\n  , service_category_1\n  , data_source\n)\n\nselect\n  patient_id\n, year_month\n, payer\n, plan\n, data_source\n, \n  \n    sum(\n      \n      case\n      when service_category_1 = 'Inpatient'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as inpatient_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'Outpatient'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as outpatient_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'Office Visit'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as office_visit_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'Ancillary'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as ancillary_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'Other'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as other_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'Pharmacy'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as pharmacy_allowed\n      \n    \n    \n  \n\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom service_cat_1\ngroup by\n  patient_id\n, year_month\n, payer\n, plan\n, data_source", "relation_name": "dev_thuxuan.financial_pmpm._int_service_category_1_allowed_pivot"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:45.632674Z", "completed_at": "2024-10-01T16:34:45.644164Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:45.644164Z", "completed_at": "2024-10-01T16:34:46.824432Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.3303649425506592, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d60e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__service_category_2_allowed_pivot", "compiled": true, "compiled_code": "\n\nwith service_cat_2 as (\n  select\n    patient_id\n  , year_month\n  , payer\n  , plan\n  , service_category_2\n  , data_source\n  , sum(total_allowed) as total_allowed\n  from dev_thuxuan.financial_pmpm._int_patient_spend_with_service_categories\n  group by\n    patient_id\n  , year_month\n  , payer\n  , plan\n  , service_category_2\n  , data_source\n)\n\nselect\n  patient_id\n, year_month\n, payer\n, plan\n, data_source\n, \n  \n    sum(\n      \n      case\n      when service_category_2 = 'Acute Inpatient'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as acute_inpatient_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Ambulance'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as ambulance_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Ambulatory Surgery'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as ambulatory_surgery_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Dialysis'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as dialysis_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Durable Medical Equipment'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as durable_medical_equipment_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Emergency Department'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as emergency_department_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Home Health'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as home_health_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Hospice'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as hospice_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Inpatient Psychiatric'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as inpatient_psychiatric_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Inpatient Rehabilitation'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as inpatient_rehabilitation_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Lab'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as lab_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Office Visit'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as office_visit_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Outpatient Hospital or Clinic'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as outpatient_hospital_or_clinic_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Outpatient Psychiatric'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as outpatient_psychiatric_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Outpatient Rehabilitation'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as outpatient_rehabilitation_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Skilled Nursing'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as skilled_nursing_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Urgent Care'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as urgent_care_allowed\n      \n    \n    \n  \n\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom service_cat_2\ngroup by\n  patient_id\n, year_month\n, payer\n, plan\n, data_source", "relation_name": "dev_thuxuan.financial_pmpm._int_service_category_2_allowed_pivot"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:46.613929Z", "completed_at": "2024-10-01T16:34:46.621928Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:46.622927Z", "completed_at": "2024-10-01T16:34:47.409802Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.9427194595336914, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f913-0001-987f0111a5be"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__condition_patient_id.1f1222e348", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom dev_thuxuan.quality_measures._stg_condition\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:46.080899Z", "completed_at": "2024-10-01T16:34:46.100203Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:46.110453Z", "completed_at": "2024-10-01T16:34:47.411719Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.4542553424835205, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f912-0001-987f0111b60e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__service_category_2_paid_pivot", "compiled": true, "compiled_code": "\n\nwith service_cat_2 as (\n  select\n    patient_id\n  , year_month\n  , payer\n  , plan\n  , service_category_2\n  , data_source\n  , sum(total_paid) as total_paid\n  from dev_thuxuan.financial_pmpm._int_patient_spend_with_service_categories\n  group by\n    patient_id\n  , year_month\n  , payer\n  , plan\n  , service_category_2\n  , data_source\n)\n\nselect\n  patient_id\n, year_month\n, payer\n, plan\n, data_source\n, \n  \n    sum(\n      \n      case\n      when service_category_2 = 'Acute Inpatient'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as acute_inpatient_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Ambulance'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as ambulance_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Ambulatory Surgery'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as ambulatory_surgery_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Dialysis'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as dialysis_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Durable Medical Equipment'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as durable_medical_equipment_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Emergency Department'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as emergency_department_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Home Health'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as home_health_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Hospice'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as hospice_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Inpatient Psychiatric'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as inpatient_psychiatric_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Inpatient Rehabilitation'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as inpatient_rehabilitation_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Lab'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as lab_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Office Visit'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as office_visit_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Outpatient Hospital or Clinic'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as outpatient_hospital_or_clinic_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Outpatient Psychiatric'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as outpatient_psychiatric_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Outpatient Rehabilitation'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as outpatient_rehabilitation_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Skilled Nursing'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as skilled_nursing_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Urgent Care'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as urgent_care_paid\n      \n    \n    \n  \n\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom service_cat_2\ngroup by\n  patient_id\n, year_month\n, payer\n, plan\n, data_source", "relation_name": "dev_thuxuan.financial_pmpm._int_service_category_2_paid_pivot"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:46.101351Z", "completed_at": "2024-10-01T16:34:46.117977Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:46.118977Z", "completed_at": "2024-10-01T16:34:47.689622Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.7235734462738037, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f8a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_eligible_conditions", "compiled": true, "compiled_code": "\n/*\nSteps for staging condition data:\n    1) Filter to risk-adjustable claims per claim type for the collection year.\n    2) Gather diagnosis codes from condition for the eligible claims.\n    3) Map and filter diagnosis codes to HCCs\n\nClaims filtering logic:\n - Professional:\n    - CPT/HCPCS in CPT/HCPCS seed file from CMS\n - Inpatient:\n    - Bill type code in (11X, 41X)\n - Outpatient:\n    - Bill type code in (12X, 13X, 43X, 71X, 73X, 76X, 77X, 85X)\n    - CPT/HCPCS in CPT/HCPCS seed file from CMS\n\nJinja is used to set payment year variable.\n - The payment_year var has been set here so it gets compiled.\n - The collection year is one year prior to the payment year.\n*/\n\nwith medical_claims as (\n\n    select\n          claim_id\n        , claim_line_number\n        , claim_type\n        , patient_id\n        , claim_start_date\n        , claim_end_date\n        , bill_type_code\n        , hcpcs_code\n    from dev_thuxuan.cms_hcc._stg_medical_claim\n\n)\n\n, conditions as (\n\n    select\n          claim_id\n        , patient_id\n        , code\n    from dev_thuxuan.cms_hcc._stg_condition\n    where code_type = 'icd-10-cm'\n\n)\n\n, cpt_hcpcs_list as (\n\n    select\n          payment_year\n        , hcpcs_cpt_code\n    from dev_thuxuan.cms_hcc._value_set_cpt_hcpcs\n\n)\n\n, professional_claims as (\n\n    select\n          medical_claims.claim_id\n        , medical_claims.claim_line_number\n        , medical_claims.claim_type\n        , medical_claims.patient_id\n        , medical_claims.claim_start_date\n        , medical_claims.claim_end_date\n        , medical_claims.bill_type_code\n        , medical_claims.hcpcs_code\n    from medical_claims\n        inner join cpt_hcpcs_list\n            on medical_claims.hcpcs_code = cpt_hcpcs_list.hcpcs_cpt_code\n    where claim_type = 'professional'\n              and date_part('year', claim_end_date) = 2023\n        and cpt_hcpcs_list.payment_year = 2024\n\n)\n\n\n, inpatient_claims as (\n\n    select\n          medical_claims.claim_id\n        , medical_claims.claim_line_number\n        , medical_claims.claim_type\n        , medical_claims.patient_id\n        , medical_claims.claim_start_date\n        , medical_claims.claim_end_date\n        , medical_claims.bill_type_code\n        , medical_claims.hcpcs_code\n    from medical_claims\n    where claim_type = 'institutional'\n        \n            and extract(year from claim_end_date) = 2023\n        \n        and substring(bill_type_code, 1, 2) in ('11','41')\n\n)\n\n, outpatient_claims as (\n\n    select\n          medical_claims.claim_id\n        , medical_claims.claim_line_number\n        , medical_claims.claim_type\n        , medical_claims.patient_id\n        , medical_claims.claim_start_date\n        , medical_claims.claim_end_date\n        , medical_claims.bill_type_code\n        , medical_claims.hcpcs_code\n    from medical_claims\n        inner join cpt_hcpcs_list\n            on medical_claims.hcpcs_code = cpt_hcpcs_list.hcpcs_cpt_code\n    where claim_type = 'institutional'\n        \n            and extract(year from claim_end_date) = 2023\n        \n        and cpt_hcpcs_list.payment_year = 2024\n        and substring(bill_type_code, 1, 2) in ('12','13','43','71','73','76','77','85')\n\n)\n\n, eligible_claims as (\n\n    select * from professional_claims\n    union all\n    select * from inpatient_claims\n    union all\n    select * from outpatient_claims\n\n)\n\n, eligible_conditions as (\n\n    select distinct\n          eligible_claims.claim_id\n        , eligible_claims.patient_id\n        , conditions.code\n    from eligible_claims\n        inner join conditions\n            on eligible_claims.claim_id = conditions.claim_id\n            and eligible_claims.patient_id = conditions.patient_id\n\n)\n\n, add_data_types as (\n\n    select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(code as TEXT) as condition_code\n        , cast('2024' as integer) as payment_year\n    from eligible_conditions\n\n)\n\nselect\n      patient_id\n    , condition_code\n    , payment_year\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.cms_hcc._int_eligible_conditions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:46.581409Z", "completed_at": "2024-10-01T16:34:46.591410Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:46.592409Z", "completed_at": "2024-10-01T16:34:47.975749Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.522752285003662, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f8e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__int_prep_conditions", "compiled": true, "compiled_code": "\n\nwith conditions as (\n\n    select\n          patient_id\n        , recorded_date\n        , condition_type\n        , code_type\n        , code\n        , data_source\n    from dev_thuxuan.hcc_suspecting._stg_condition\n\n)\n\n/*\n    Default mapping guidance: Most map groups terminate with an unconditional\n    rule \u2013 a rule whose predicate is \u201cTRUE\u201d or, equivalently, \u201cOTHERWISE TRUE\u201d.\n    This rule is considered a \u201cdefault\u201d because it should be applied if\n    nothing further is known about the patient\u2019s condition.\n*/\n, seed_snomed_icd_10_map as (\n\n    select\n          referenced_component_id as snomed_code\n        , map_target as icd_10_code\n    from dev_thuxuan.terminology.snomed_icd_10_map\n    where lower(map_rule) in ('true', 'otherwise true')\n    and map_group = '1'\n\n)\n\n, snomed_conditions as (\n\n    select\n          patient_id\n        , recorded_date\n        , condition_type\n        , 'icd-10-cm' as code_type\n        , icd_10_code as code\n        , data_source\n    from conditions\n         inner join seed_snomed_icd_10_map\n         on conditions.code = seed_snomed_icd_10_map.snomed_code\n    where conditions.code_type = 'snomed-ct'\n\n)\n\n, other_conditions as (\n\n    select\n          patient_id\n        , recorded_date\n        , condition_type\n        , code_type\n        , code\n        , data_source\n    from conditions\n    where conditions.code_type <> 'snomed-ct'\n\n)\n\n, union_conditions as (\n\n    select * from snomed_conditions\n    union all\n    select * from other_conditions\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(recorded_date as date) as recorded_date\n        , cast(condition_type as TEXT) as condition_type\n        , cast(code_type as TEXT) as code_type\n        , cast(code as TEXT) as code\n        , cast(data_source as TEXT) as data_source\n    from union_conditions\n\n)\n\nselect\n      patient_id\n    , recorded_date\n    , condition_type\n    , code_type\n    , code\n    , data_source\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.hcc_suspecting._int_prep_conditions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:46.969502Z", "completed_at": "2024-10-01T16:34:46.978517Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:46.978517Z", "completed_at": "2024-10-01T16:34:48.292598Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.4630424976348877, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d612"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_long", "compiled": true, "compiled_code": "\n\nwith all_conditions as (\nselect \n  patient_id,\n  normalized_code,\n  recorded_date\n    from dev_thuxuan.test.tuva_chronic_conditions__stg_core__condition\n),\n\n\nconditions_with_first_and_last_diagnosis_date as (\nselect \n  patient_id,\n  normalized_code as icd_10_cm,\n  min(recorded_date) as first_diagnosis_date,\n  max(recorded_date) as last_diagnosis_date\nfrom all_conditions\ngroup by patient_id, normalized_code\n\n)\n\n\nselect\n  aa.patient_id,\n  bb.concept_name as condition,\n  min(first_diagnosis_date) as first_diagnosis_date,\n  max(last_diagnosis_date) as last_diagnosis_date,\n  '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom conditions_with_first_and_last_diagnosis_date aa\ninner join dev_thuxuan.clinical_concept_library.value_set_member_relevant_fields bb\non aa.icd_10_cm = bb.code\ngroup by aa.patient_id, bb.concept_name", "relation_name": "dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:47.552852Z", "completed_at": "2024-10-01T16:34:47.691621Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:47.692622Z", "completed_at": "2024-10-01T16:34:48.988749Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.5744924545288086, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d616"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__stg_pqi_inpatient_encounter", "compiled": true, "compiled_code": "\n\nselect \n    encounter_id\n  , data_source\n  , ms_drg_code\n  , ms_drg_description\n  , admit_source_code\n  , encounter_start_date\n  , encounter_end_date\n  , length_of_stay\n  , primary_diagnosis_code\n  , patient_id\n  , facility_id\n  , paid_amount\n  , date_part('year', encounter_start_date) as year_number\nfrom\n    dev_thuxuan.core.encounter\nwhere \n    encounter_type = 'acute inpatient'", "relation_name": "dev_thuxuan.ahrq_measures._stg_pqi_inpatient_encounter"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:47.853591Z", "completed_at": "2024-10-01T16:34:47.867229Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:47.868123Z", "completed_at": "2024-10-01T16:34:49.305181Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.5884068012237549, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f913-0001-987f0111a5c6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ed_classification__stg_encounter", "compiled": true, "compiled_code": "\n\nselect\n    encounter_id\n    , encounter_type\n    , patient_id\n    , encounter_end_date\n    , facility_id\n    , primary_diagnosis_code_type\n    , primary_diagnosis_code\n    , primary_diagnosis_description\n    , paid_amount\n    , allowed_amount\n    , charge_amount\nfrom dev_thuxuan.core.encounter", "relation_name": "dev_thuxuan.ed_classification.ed_classification__stg_encounter"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:48.109160Z", "completed_at": "2024-10-01T16:34:48.126932Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:48.128443Z", "completed_at": "2024-10-01T16:34:49.437970Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.4538898468017578, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f912-0001-987f0111b612"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__stg_core__encounter", "compiled": true, "compiled_code": "\n\nselect\n      patient_id\n    , encounter_id\n    , encounter_type\n    , length_of_stay\n    , encounter_start_date\n    , encounter_end_date\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.encounter\n\n", "relation_name": "dev_thuxuan.quality_measures._stg_encounter"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:47.859565Z", "completed_at": "2024-10-01T16:34:47.874123Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:47.874123Z", "completed_at": "2024-10-01T16:34:49.557029Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.851353645324707, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f913-0001-987f0111a5c2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.mart_review__inpatient", "compiled": true, "compiled_code": "\n\nwith cte as (\n    select distinct\n        location_id\n      , npi\n      , name\n    from dev_thuxuan.core.location\n)\n\n, final as (\n    select\n        e.*\n      , e.patient_id || '|' || e.data_source as patient_source_key\n      , e.encounter_id || '|' || e.data_source as encounter_source_key\n      , e.ms_drg_code || ' | ' || e.ms_drg_description as drgwithdescription\n      , e.primary_diagnosis_code || ' | ' || e.primary_diagnosis_description as primary_diagnosis_and_description\n      , e.admit_source_code || ' | ' || e.admit_source_description as admit_source_code_and_description\n      , e.admit_type_code || ' | ' || e.admit_type_description as admit_type_code_and_description\n      , e.discharge_disposition_code || ' | ' || e.discharge_disposition_description as discharge_code_and_description\n      , p.ccsr_parent_category\n      , p.ccsr_category\n      , p.ccsr_category_description\n      , p.ccsr_category || ' | ' || p.ccsr_category_description as ccsr_category_and_description\n      , b.body_system\n      , case \n            when e.length_of_stay <= 1 then '1. 0-1 day'\n            when e.length_of_stay <= 3 then '2. 2-3 days'\n            when e.length_of_stay <= 5 then '3. 4-5 days'\n            when e.length_of_stay <= 7 then '4. 6-7 days'\n            when e.length_of_stay <= 14 then '5. 8-14 days'\n            when e.length_of_stay <= 30 then '6. 15-30 days'\n        end as los_groups\n    from dev_thuxuan.core.encounter as e\n    left join cte as l\n      on e.facility_id = l.location_id\n    left join dev_thuxuan.ccsr.dx_vertical_pivot as p\n      on e.primary_diagnosis_code = p.code\n      and p.ccsr_category_rank = 1\n    left join dev_thuxuan.ccsr._value_set_dxccsr_v2023_1_body_systems as b\n      on p.ccsr_parent_category = b.ccsr_parent_category\n    where e.encounter_type = 'acute inpatient'\n)\n\nselect * from final", "relation_name": "dev_thuxuan.data_quality.mart_review__inpatient"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:48.439545Z", "completed_at": "2024-10-01T16:34:48.449641Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:48.450551Z", "completed_at": "2024-10-01T16:34:49.545008Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.2743725776672363, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f92"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.readmissions__stg_core__encounter", "compiled": true, "compiled_code": "\n\nselect\n    encounter_id,\n    patient_id,\n    encounter_start_date,\n    encounter_end_date,\n    discharge_disposition_code,\n    facility_id,\n    ms_drg_code,\n    paid_amount,\n    primary_diagnosis_code,\n    '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.encounter\nwhere encounter_type = 'acute inpatient'", "relation_name": "dev_thuxuan.test.readmissions__stg_core__encounter"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:49.132249Z", "completed_at": "2024-10-01T16:34:49.138327Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:49.139280Z", "completed_at": "2024-10-01T16:34:50.316443Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.3364613056182861, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110be06"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ccsr__long_procedure_category", "compiled": true, "compiled_code": "\n\nwith procedures as (\n\n    select * from dev_thuxuan.test.ccsr__stg_core__procedure\n\n)\n\n, ccsr__procedure_category_map as (\n\n    select * from dev_thuxuan.ccsr.procedure_category_map\n\n)\n\nselect distinct\n      procedures.encounter_id\n    , procedures.claim_id\n    , procedures.patient_id\n    , procedures.normalized_code\n    , ccsr__procedure_category_map.code_description\n    , ccsr__procedure_category_map.ccsr_parent_category\n    , ccsr__procedure_category_map.ccsr_category\n    , ccsr__procedure_category_map.ccsr_category_description\n    , ccsr__procedure_category_map.clinical_domain\n    , '2023.1' as prccsr_version\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom procedures\nleft join ccsr__procedure_category_map\n    on procedures.normalized_code = ccsr__procedure_category_map.code", "relation_name": "dev_thuxuan.ccsr.long_procedure_category"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:49.569052Z", "completed_at": "2024-10-01T16:34:49.576388Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:49.577491Z", "completed_at": "2024-10-01T16:34:50.836567Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.4592370986938477, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d61a"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__procedure_patient_id.0b52ff75d9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom dev_thuxuan.quality_measures._stg_procedure\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:49.725081Z", "completed_at": "2024-10-01T16:34:49.748005Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:49.749071Z", "completed_at": "2024-10-01T16:34:51.295556Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.690272569656372, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f96"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.readmissions__procedure_ccs", "compiled": true, "compiled_code": "\n\n-- Here we map every procedure code to its corresponding\n-- CCS procedure category.\n-- This model may list more than one CCS procedure category\n-- per encounter_id because different procedures associated with the\n-- encounter (different rows on the stg_procedure model) may have\n-- different associated CCS procedure categories.\n\n\n\nselect\n    aa.encounter_id,\n    aa.normalized_code as procedure_code,\n    case\n        when bb.icd_10_pcs is null then 0\n\telse 1\n    end as valid_icd_10_pcs_flag,\n    cc.ccs_procedure_category,\n    '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom\n    dev_thuxuan.test.readmissions__stg_core__procedure aa\n    left join dev_thuxuan.terminology.icd_10_pcs bb\n    on aa.normalized_code = bb.icd_10_pcs\n    left join dev_thuxuan.readmissions._value_set_icd_10_pcs_to_ccs cc\n    on aa.normalized_code = cc.icd_10_pcs\nwhere aa.normalized_code_type = 'icd-10-pcs'", "relation_name": "dev_thuxuan.readmissions._int_procedure_ccs"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:49.737855Z", "completed_at": "2024-10-01T16:34:49.756441Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:49.758447Z", "completed_at": "2024-10-01T16:34:51.464735Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.8913793563842773, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d61e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ccsr__singular_condition_category", "compiled": true, "compiled_code": "\n\nselect \n    encounter_id,\n    claim_id,\n    patient_id,\n    ccsr_category,\n    ccsr_category_description,\n    ccsr_parent_category,\n    parent_category_description,\n    body_system,\n    '2023.1' as dxccsr_version,\n    '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ccsr.long_condition_category\nwhere\n        is_ip_default_category = 1\n        and condition_rank = 1", "relation_name": "dev_thuxuan.ccsr.singular_condition_category"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:50.480724Z", "completed_at": "2024-10-01T16:34:50.491589Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:50.492588Z", "completed_at": "2024-10-01T16:34:51.558608Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.2639319896697998, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f912-0001-987f0111b61a"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.accepted_values_chronic_conditions__cms_chronic_conditions_hiv_aids_condition__Human_Immunodeficiency_Virus_and_or_Acquired_Immunodeficiency_Syndrome_HIV_AIDS_.c54d45a2c6", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        condition as value_field,\n        count(*) as n_records\n\n    from dev_thuxuan.chronic_conditions._int_cms_chronic_condition_hiv_aids\n    group by condition\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Human Immunodeficiency Virus and/or Acquired Immunodeficiency Syndrome (HIV/AIDS)'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:49.447473Z", "completed_at": "2024-10-01T16:34:49.460564Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:49.460564Z", "completed_at": "2024-10-01T16:34:51.642702Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.368499279022217, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f912-0001-987f0111b616"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_all", "compiled": true, "compiled_code": "\n\nwith chronic_conditions as (\n\n    select * from dev_thuxuan.chronic_conditions._value_set_cms_chronic_conditions_hierarchy\n\n)\n\n, patient_conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date as start_date\n        , normalized_code_type as code_type\n        , replace(normalized_code,'.','') as code\n        , data_source\n    from dev_thuxuan.test.cms_chronic_conditions__stg_core__condition\n\n)\n\n, patient_ms_drgs as (\n\n    select\n          patient_id\n        , claim_id\n        , claim_start_date as start_date\n        , 'MS-DRG' as code_type\n        , ms_drg_code as code\n        , data_source\n    from dev_thuxuan.test.cms_chronic_conditions__stg_core__medical_claim\n\n)\n\n, patient_procedures as (\n\n    select\n          patient_id\n        , claim_id\n        , procedure_date as start_date\n        , normalized_code_type as code_type\n        , replace(normalized_code,'.','') as code\n        , data_source\n    from dev_thuxuan.test.cms_chronic_conditions__stg_core__procedure\n\n)\n\n, inclusions_diagnosis as (\n\n    select\n          patient_conditions.patient_id\n        , patient_conditions.claim_id\n        , patient_conditions.start_date\n        , patient_conditions.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_conditions\n         inner join chronic_conditions\n             on patient_conditions.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n    and chronic_conditions.additional_logic = 'None'\n\n)\n\n, inclusions_ms_drg as (\n\n    select\n          patient_ms_drgs.patient_id\n        , patient_ms_drgs.claim_id\n        , patient_ms_drgs.start_date\n        , patient_ms_drgs.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_ms_drgs\n         inner join chronic_conditions\n             on patient_ms_drgs.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'MS-DRG'\n    and chronic_conditions.additional_logic = 'None'\n\n)\n\n, inclusions_procedure as (\n\n    select\n          patient_procedures.patient_id\n        , patient_procedures.claim_id\n        , patient_procedures.start_date\n        , patient_procedures.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_procedures\n         inner join chronic_conditions\n             on patient_procedures.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system in ('ICD-10-PCS', 'HCPCS')\n    and chronic_conditions.additional_logic = 'None'\n\n)\n\n, exclusions_diagnosis as (\n\n    select distinct\n          patient_conditions.claim_id\n        , chronic_conditions.condition\n    from patient_conditions\n         inner join chronic_conditions\n             on patient_conditions.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Exclude'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n\n)\n\n\n, inclusions_unioned as (\n\n    select * from inclusions_diagnosis\n    union distinct\n    select * from inclusions_procedure\n    union distinct\n    select * from inclusions_ms_drg\n\n)\n\n\nselect distinct\n      cast(inclusions_unioned.patient_id as TEXT) as patient_id\n    , cast(inclusions_unioned.claim_id as TEXT) as claim_id\n    , cast(inclusions_unioned.start_date as date) as start_date\n    , cast(inclusions_unioned.chronic_condition_type as TEXT) as chronic_condition_type\n    , cast(inclusions_unioned.condition_category as TEXT) as condition_category\n    , cast(inclusions_unioned.condition as TEXT) as condition\n    , cast(inclusions_unioned.data_source as TEXT) as data_source\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom inclusions_unioned\n     left join exclusions_diagnosis\n         on inclusions_unioned.claim_id = exclusions_diagnosis.claim_id\n         and inclusions_unioned.condition = exclusions_diagnosis.condition\nwhere exclusions_diagnosis.claim_id is null", "relation_name": "dev_thuxuan.chronic_conditions._int_cms_chronic_condition_all"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:51.036774Z", "completed_at": "2024-10-01T16:34:51.054384Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:51.055961Z", "completed_at": "2024-10-01T16:34:52.026973Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.122680425643921, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f9a"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_claim_id.9baa48027d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect claim_id\nfrom dev_thuxuan.chronic_conditions._int_cms_chronic_condition_hiv_aids\nwhere claim_id is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:51.419319Z", "completed_at": "2024-10-01T16:34:51.426372Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:51.427312Z", "completed_at": "2024-10-01T16:34:52.843869Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.5840916633605957, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112f9e"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_condition.da32954f00", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect condition\nfrom dev_thuxuan.chronic_conditions._int_cms_chronic_condition_hiv_aids\nwhere condition is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:51.655512Z", "completed_at": "2024-10-01T16:34:51.668868Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:51.669878Z", "completed_at": "2024-10-01T16:34:53.340730Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.839306354522705, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f912-0001-987f0111b61e"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_patient_id.b6c58add4b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom dev_thuxuan.chronic_conditions._int_cms_chronic_condition_hiv_aids\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:52.168364Z", "completed_at": "2024-10-01T16:34:52.182005Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:52.183015Z", "completed_at": "2024-10-01T16:34:53.831188Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.8483448028564453, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d622"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_cms_hcc__int_eligible_conditions_condition_code.e811a078bc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect condition_code\nfrom dev_thuxuan.cms_hcc._int_eligible_conditions\nwhere condition_code is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:51.752616Z", "completed_at": "2024-10-01T16:34:51.770553Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:51.772559Z", "completed_at": "2024-10-01T16:34:54.419565Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.8366029262542725, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110be0a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm438_denominator_criteria3", "compiled": true, "compiled_code": "\n\nwith diabetes_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in (\n              'diabetes'\n        )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , encounter_id\n        , recorded_date\n        , source_code\n        , source_code_type\n        , normalized_code\n        , normalized_code_type\n    from dev_thuxuan.quality_measures._stg_condition\n\n)\n\n, diabetes_conditions as (\n\n    select\n          conditions.patient_id\n        , conditions.recorded_date as evidence_date\n    from conditions\n    inner join diabetes_codes\n        on coalesce(conditions.normalized_code_type, conditions.source_code_type) = diabetes_codes.code_system\n            and coalesce(conditions.normalized_code, conditions.source_code) = diabetes_codes.code\n\n)\n\n, patients_with_diabetes as (\n\n    select\n        distinct\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version \n    from diabetes_conditions\n    inner join dev_thuxuan.quality_measures._int_cqm438__performance_period pp\n    on evidence_date <= pp.performance_period_end\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from patients_with_diabetes\n\n)\n\nselect \n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_cqm438_denominator_criteria3"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:51.830876Z", "completed_at": "2024-10-01T16:34:51.867934Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:51.869446Z", "completed_at": "2024-10-01T16:34:54.507150Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.837538480758667, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112fa2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__pmpm_prep", "compiled": true, "compiled_code": "\n\nwith combine as (\nSELECT\n  a.patient_id,\n  a.year_month,\n  a.payer,\n  a.plan,\n  a.data_source,\n\n  -- service cat 1 paid\n  COALESCE(b.inpatient_paid, 0) AS inpatient_paid,\n  COALESCE(b.outpatient_paid, 0) AS outpatient_paid,\n  COALESCE(b.office_visit_paid, 0) AS office_visit_paid,\n  COALESCE(b.ancillary_paid, 0) AS ancillary_paid,\n  COALESCE(b.pharmacy_paid, 0) AS pharmacy_paid,\n  COALESCE(b.other_paid, 0) AS other_paid,\n\n  -- service cat 2 paid\n  COALESCE(c.acute_inpatient_paid, 0) AS acute_inpatient_paid,\n  COALESCE(c.ambulance_paid, 0) AS ambulance_paid,\n  COALESCE(c.ambulatory_surgery_paid, 0) AS ambulatory_surgery_paid,\n  COALESCE(c.dialysis_paid, 0) AS dialysis_paid,\n  COALESCE(c.durable_medical_equipment_paid, 0) AS durable_medical_equipment_paid,\n  COALESCE(c.emergency_department_paid, 0) AS emergency_department_paid,\n  COALESCE(c.home_health_paid, 0) AS home_health_paid,\n  COALESCE(c.hospice_paid, 0) AS hospice_paid,\n  COALESCE(c.inpatient_psychiatric_paid, 0) AS inpatient_psychiatric_paid,\n  COALESCE(c.inpatient_rehabilitation_paid, 0) AS inpatient_rehabilitation_paid,\n  COALESCE(c.lab_paid, 0) AS lab_paid,\n  COALESCE(c.office_visit_paid, 0) AS office_visit_paid_2,\n  COALESCE(c.outpatient_hospital_or_clinic_paid, 0) AS outpatient_hospital_or_clinic_paid,\n  COALESCE(c.outpatient_psychiatric_paid, 0) AS outpatient_psychiatric_paid,\n  COALESCE(c.outpatient_rehabilitation_paid, 0) AS outpatient_rehabilitation_paid,\n  COALESCE(c.skilled_nursing_paid, 0) AS skilled_nursing_paid,\n  COALESCE(c.urgent_care_paid, 0) AS urgent_care_paid,\n\n  -- service cat 1 allowed\n  COALESCE(d.inpatient_allowed, 0) AS inpatient_allowed,\n  COALESCE(d.outpatient_allowed, 0) AS outpatient_allowed,\n  COALESCE(d.office_visit_allowed, 0) AS office_visit_allowed,\n  COALESCE(d.ancillary_allowed, 0) AS ancillary_allowed,\n  COALESCE(d.pharmacy_allowed, 0) AS pharmacy_allowed,\n  COALESCE(d.other_allowed, 0) AS other_allowed,\n\n  -- service cat 2 allowed\n  COALESCE(e.acute_inpatient_allowed, 0) AS acute_inpatient_allowed,\n  COALESCE(e.ambulance_allowed, 0) AS ambulance_allowed,\n  COALESCE(e.ambulatory_surgery_allowed, 0) AS ambulatory_surgery_allowed,\n  COALESCE(e.dialysis_allowed, 0) AS dialysis_allowed,\n  COALESCE(e.durable_medical_equipment_allowed, 0) AS durable_medical_equipment_allowed,\n  COALESCE(e.emergency_department_allowed, 0) AS emergency_department_allowed,\n  COALESCE(e.home_health_allowed, 0) AS home_health_allowed,\n  COALESCE(e.hospice_allowed, 0) AS hospice_allowed,\n  COALESCE(e.inpatient_psychiatric_allowed, 0) AS inpatient_psychiatric_allowed,\n  COALESCE(e.inpatient_rehabilitation_allowed, 0) AS inpatient_rehabilitation_allowed,\n  COALESCE(e.lab_allowed, 0) AS lab_allowed,\n  COALESCE(e.office_visit_allowed, 0) AS office_visit_allowed_2,\n  COALESCE(e.outpatient_hospital_or_clinic_allowed, 0) AS outpatient_hospital_or_clinic_allowed,\n  COALESCE(e.outpatient_psychiatric_allowed, 0) AS outpatient_psychiatric_allowed,\n  COALESCE(e.outpatient_rehabilitation_allowed, 0) AS outpatient_rehabilitation_allowed,\n  COALESCE(e.skilled_nursing_allowed, 0) AS skilled_nursing_allowed,\n  COALESCE(e.urgent_care_allowed, 0) AS urgent_care_allowed\nFROM dev_thuxuan.core.member_months a\nleft join dev_thuxuan.financial_pmpm._int_service_category_1_paid_pivot b\n  on a.patient_id = b.patient_id\n  and a.year_month = b.year_month\n  and a.payer = b.payer\n  and a.plan = b.plan\n\nleft join dev_thuxuan.financial_pmpm._int_service_category_2_paid_pivot c\n  on a.patient_id = c.patient_id\n  and a.year_month = c.year_month\n  and a.payer = c.payer\n  and a.plan = c.plan\n\nleft join dev_thuxuan.financial_pmpm._int_service_category_1_allowed_pivot d\n  on a.patient_id = d.patient_id\n  and a.year_month = d.year_month\n  and a.payer = d.payer\n  and a.plan = d.plan\n\nleft join dev_thuxuan.financial_pmpm._int_service_category_2_allowed_pivot e\n  on a.patient_id = e.patient_id\n  and a.year_month = e.year_month\n  and a.payer = e.payer\n  and a.plan = e.plan\n\n)\n\nselect *\n, inpatient_paid + outpatient_paid + office_visit_paid + ancillary_paid + other_paid + pharmacy_paid as total_paid\n, inpatient_paid + outpatient_paid + office_visit_paid + ancillary_paid + other_paid as medical_paid\n, inpatient_allowed + outpatient_allowed + office_visit_allowed + ancillary_allowed + other_allowed + pharmacy_allowed as total_allowed\n, inpatient_allowed + outpatient_allowed + office_visit_allowed + ancillary_allowed + other_allowed as medical_allowed\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom combine", "relation_name": "dev_thuxuan.financial_pmpm.pmpm_prep"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:53.505803Z", "completed_at": "2024-10-01T16:34:53.521808Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:53.522809Z", "completed_at": "2024-10-01T16:34:54.934578Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.6496927738189697, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110be12"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.dbt_utils_unique_combination_of_columns_chronic_conditions__tuva_chronic_conditions_long_patient_id__condition.9c8c725ff2", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        patient_id, condition\n    from dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\n    group by patient_id, condition\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:53.016058Z", "completed_at": "2024-10-01T16:34:53.044331Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:53.045852Z", "completed_at": "2024-10-01T16:34:55.343709Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.544997453689575, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110be0e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__int_all_conditions", "compiled": true, "compiled_code": "\n\nwith conditions as (\n\n    select\n          patient_id\n        , recorded_date\n        , condition_type\n        , code_type\n        , code\n        , data_source\n    from dev_thuxuan.hcc_suspecting._int_prep_conditions\n\n)\n\n, seed_hcc_mapping as (\n\n    select\n          diagnosis_code\n        , cms_hcc_v28 as hcc_code\n    from dev_thuxuan.hcc_suspecting._value_set_icd_10_cm_mappings\n    where cms_hcc_v28 is not null\n\n)\n\n, seed_hcc_descriptions as (\n\n    select distinct\n          hcc_code\n        , hcc_description\n    from dev_thuxuan.hcc_suspecting._value_set_hcc_descriptions\n\n)\n\n, joined as (\n\n    select\n          conditions.patient_id\n        , conditions.recorded_date\n        , conditions.condition_type\n        , conditions.code\n        , conditions.data_source\n        , seed_hcc_mapping.hcc_code\n        , seed_hcc_descriptions.hcc_description\n    from conditions\n         left join seed_hcc_mapping\n         on conditions.code = seed_hcc_mapping.diagnosis_code\n         left join seed_hcc_descriptions\n         on seed_hcc_mapping.hcc_code = seed_hcc_descriptions.hcc_code\n    where conditions.code_type = 'icd-10-cm'\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(recorded_date as date) as recorded_date\n        , cast(condition_type as TEXT) as condition_type\n        , cast(code as TEXT) as icd_10_cm_code\n        , cast(hcc_code as TEXT) as hcc_code\n        , cast(hcc_description as TEXT) as hcc_description\n        , cast(data_source as TEXT) as data_source\n    from joined\n\n)\n\nselect\n      patient_id\n    , recorded_date\n    , condition_type\n    , icd_10_cm_code\n    , hcc_code\n    , hcc_description\n    , data_source\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.hcc_suspecting._int_all_conditions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:54.026695Z", "completed_at": "2024-10-01T16:34:54.045162Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:54.047187Z", "completed_at": "2024-10-01T16:34:55.818202Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.009340286254883, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f912-0001-987f0111b622"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_shared_exclusion_missing_dates", "compiled": true, "compiled_code": "\n-- Exclude encounters with missing start dates\nselect\n    encounter_id\n  , data_source\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_inpatient_encounter\nwhere \n  encounter_start_date is null", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_shared_exclusion_missing_dates"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:54.604421Z", "completed_at": "2024-10-01T16:34:54.627433Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:54.629842Z", "completed_at": "2024-10-01T16:34:56.554049Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.1172659397125244, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f7c5-0001-987f0110be16"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_shared_exclusion_missing_primary_dx", "compiled": true, "compiled_code": "\n\n-- Exclude encounters with missing primary diagnosis code\nselect \n    encounter_id\n  , data_source\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_inpatient_encounter\nwhere \n  primary_diagnosis_code is null", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_shared_exclusion_missing_primary_dx"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:54.678458Z", "completed_at": "2024-10-01T16:34:54.692822Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:54.693821Z", "completed_at": "2024-10-01T16:34:56.560212Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.044752836227417, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d626"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_shared_exclusion_transfer", "compiled": true, "compiled_code": "\n\n-- Exclude transfers from hospital, SNF, or other healthcare facility\nselect \n    encounter_id\n  , data_source\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_inpatient_encounter\nwhere \n  admit_source_code in ('4', '5', '6')", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_shared_exclusion_transfer"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:55.163504Z", "completed_at": "2024-10-01T16:34:55.176124Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:55.177120Z", "completed_at": "2024-10-01T16:34:57.119929Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.0812313556671143, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112fa6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_shared_exclusion_ungroupable_drg", "compiled": true, "compiled_code": "\n\n-- Exclude encounters with ungroupable DRG\nselect \n    encounter_id\n  , data_source\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_inpatient_encounter\nwhere \n  ms_drg_code = '999'", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_shared_exclusion_ungroupable_drg"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:56.045762Z", "completed_at": "2024-10-01T16:34:56.062748Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:56.064894Z", "completed_at": "2024-10-01T16:34:57.465099Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.5647313594818115, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f912-0001-987f0111b626"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__encounter_patient_id.a0d82e2159", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom dev_thuxuan.quality_measures._stg_encounter\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:55.573529Z", "completed_at": "2024-10-01T16:34:55.598560Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:55.600852Z", "completed_at": "2024-10-01T16:34:57.904695Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.454899311065674, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112faa"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ed_classification__int_map_primary_dx", "compiled": true, "compiled_code": "/*\nAll condition discharge diagnosis left join with probabilistic\nindicators of ED classification terminology\n*/\n\n\n\n\nwith condition as (\n    select * \n    from dev_thuxuan.ed_classification.ed_classification__stg_encounter\n    where encounter_type = 'emergency department'\n)\n, icd9 as (\n  select\n     icd9 as code\n     \n     , edcnnpa\n     \n     , edcnpa\n     \n     , epct\n     \n     , noner\n     \n     , injury\n     \n     , psych\n     \n     , alcohol\n     \n     , drug\n     \n     , 1 as ed_classification_capture\n  from dev_thuxuan.ed_classification._value_set_johnston_icd9\n)\n, icd10 as (\n  select\n     icd10 as code\n     \n     , edcnnpa\n     \n     , edcnpa\n     \n     , epct\n     \n     , noner\n     \n     , injury\n     \n     , psych\n     \n     , alcohol\n     \n     , drug\n     \n     , 1 as ed_classification_capture\n  from dev_thuxuan.ed_classification._value_set_johnston_icd10\n)\n\nselect\n   a.*\n   \n   , icd10.edcnnpa\n   \n   , icd10.edcnpa\n   \n   , icd10.epct\n   \n   , icd10.noner\n   \n   , icd10.injury\n   \n   , icd10.psych\n   \n   , icd10.alcohol\n   \n   , icd10.drug\n   \n   , coalesce(icd10.ed_classification_capture, 0) as ed_classification_capture\nfrom condition a\nleft join icd10\n    on a.primary_diagnosis_code = icd10.code \n    and a.primary_diagnosis_code_type = 'icd-10-cm'\n\nunion all\n\nselect\n   a.*\n   \n   , icd9.edcnnpa\n   \n   , icd9.edcnpa\n   \n   , icd9.epct\n   \n   , icd9.noner\n   \n   , icd9.injury\n   \n   , icd9.psych\n   \n   , icd9.alcohol\n   \n   , icd9.drug\n   \n   , coalesce(icd9.ed_classification_capture, 0) ed_classification_capture\nfrom condition a\ninner join icd9\n    on a.primary_diagnosis_code = icd9.code \n    and a.primary_diagnosis_code_type = 'icd-9-cm'", "relation_name": "dev_thuxuan.ed_classification._int_by_provider_parent_organization"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:56.743235Z", "completed_at": "2024-10-01T16:34:56.793747Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:56.796292Z", "completed_at": "2024-10-01T16:34:58.518206Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.9346230030059814, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d62a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.readmissions__encounter", "compiled": true, "compiled_code": "\n\n-- Staging model for the input layer:\n-- stg_encounter input layer model.\n-- This contains one row for every unique encounter in the dataset.\n\nselect\n    cast(encounter_id as TEXT) as encounter_id,\n    cast(patient_id as TEXT) as patient_id,\n    cast(encounter_start_date as date) as admit_date,\n    cast(encounter_end_date as date) as discharge_date,\n    cast(discharge_disposition_code as TEXT) as discharge_disposition_code,\n    cast(facility_id as TEXT) as facility_id,\n    cast(ms_drg_code as TEXT) as ms_drg_code,\n    cast(paid_amount as numeric(28,6)) as paid_amount,\n    cast(primary_diagnosis_code as TEXT) as primary_diagnosis_code,\n    '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.readmissions__stg_core__encounter", "relation_name": "dev_thuxuan.readmissions._int_encounter"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:56.771763Z", "completed_at": "2024-10-01T16:34:56.808334Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:56.809312Z", "completed_at": "2024-10-01T16:34:58.837809Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.2374703884124756, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112fae"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm438_denominator_criteria1", "compiled": true, "compiled_code": "\n\nwith ascvd_codes as (\n\n    select\n          code\n        , code_system\n    from dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in (\n              'atherosclerosis and peripheral arterial disease'\n            , 'myocardial infarction'\n            , 'pci'\n            , 'stable and unstable angina'\n            , 'cabg or pci procedure'\n            , 'cabg surgeries'\n            , 'cerebrovascular disease stroke or tia'\n            , 'ischemic heart disease or related diagnoses'\n            , 'carotid intervention'\n        )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , encounter_id\n        , recorded_date\n        , source_code\n        , source_code_type\n        , normalized_code\n        , normalized_code_type\n    from dev_thuxuan.quality_measures._stg_condition\n\n)\n\n, ascvd_conditions as (\n\n    select\n          conditions.patient_id\n        , conditions.recorded_date as evidence_date\n    from conditions\n    inner join ascvd_codes\n        on coalesce(conditions.normalized_code_type, conditions.source_code_type) = ascvd_codes.code_system\n            and coalesce(conditions.normalized_code, conditions.source_code) = ascvd_codes.code\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_procedure\n\n)\n\n, ascvd_procedures as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date as evidence_date\n    from procedures\n         inner join ascvd_codes\n             on procedures.code = ascvd_codes.code\n             and procedures.code_type = ascvd_codes.code_system\n\n)\n\n, historical_ascvd as (\n\n    select\n          ascvd_conditions.patient_id\n        , ascvd_conditions.evidence_date\n    from ascvd_conditions\n\n    union all\n\n    select\n          ascvd_procedures.patient_id\n        , ascvd_procedures.evidence_date\n    from ascvd_procedures\n\n)\n\n, patients_with_ascvd as (\n\n    select\n        distinct\n          historical_ascvd.patient_id\n        , pp.performance_period_begin\n        , pp.performance_period_end\n        , pp.measure_id\n        , pp.measure_name\n        , pp.measure_version\n    from historical_ascvd\n    inner join dev_thuxuan.quality_measures._int_cqm438__performance_period pp\n    on evidence_date <= pp.performance_period_end\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from patients_with_ascvd\n\n)\n\nselect \n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_cqm438_denominator_criteria1"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:57.616142Z", "completed_at": "2024-10-01T16:34:57.630107Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:57.631218Z", "completed_at": "2024-10-01T16:34:59.478606Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.0238006114959717, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f912-0001-987f0111b62a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_exclude_colectomy_cancer", "compiled": true, "compiled_code": "\n\n/*\nDENOMINATOR EXCLUSIONS:\nPatients with a diagnosis or past history of total colectomy or colorectal cancer: G9711\n*/\n\n\nwith exclusion_codes as (\n\n    select\n          code\n        , case code_system\n            when 'SNOMEDCT' then 'snomed-ct'\n            when 'ICD9CM' then 'icd-9-cm'\n            when 'ICD10CM' then 'icd-10-cm'\n            when 'CPT' then 'hcpcs'\n            when 'ICD10PCS' then 'icd-10-pcs'\n          else lower(code_system) \n          end as code_system\n        , concept_name\n    From dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in  (\n          'malignant neoplasm of colon'\n        , 'total colectomy'\n    )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_condition\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from dev_thuxuan.quality_measures._stg_medical_claim\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_observation\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_procedure\n\n)\n\n, condition_exclusions as (\n\n    select\n          conditions.patient_id\n        , conditions.claim_id\n        , conditions.recorded_date\n        , exclusion_codes.concept_name as concept_name\n    from conditions\n         inner join exclusion_codes\n            on conditions.code = exclusion_codes.code\n            and conditions.code_type = exclusion_codes.code_system\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n        , exclusion_codes.concept_name as concept_name\n    from medical_claim\n         inner join exclusion_codes\n            on medical_claim.hcpcs_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'hcpcs'\n\n)\n\n, observation_exclusions as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , exclusion_codes.concept_name as concept_name\n    from observations\n         inner join exclusion_codes\n             on observations.code = exclusion_codes.code\n             and observations.code_type = exclusion_codes.code_system\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name as concept_name\n    from procedures\n         inner join exclusion_codes\n             on procedures.code = exclusion_codes.code\n             and procedures.code_type = exclusion_codes.code_system\n\n)\n\n, patients_with_exclusions as(\n    select patient_id\n        , recorded_date as exclusion_date\n        , concept_name as exclusion_reason\n    from condition_exclusions\n\n    union all\n\n    select patient_id\n        , coalesce(claim_end_date, claim_start_date) as exclusion_date\n        , concept_name as exclusion_reason\n    from med_claim_exclusions\n\n    union all\n\n    select patient_id\n        , observation_date as exclusion_date\n        , concept_name as exclusion_reason\n    from observation_exclusions\n\n    union all\n\n    select patient_id\n        , procedure_date as exclusion_date\n        , concept_name as exclusion_reason\n    from procedure_exclusions\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , 'measure specific exclusion for historical record of colectomy cancer' as exclusion_type\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom patients_with_exclusions", "relation_name": "dev_thuxuan.quality_measures._int_nqf0034_exclude_colectomy_cancer"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:57.252617Z", "completed_at": "2024-10-01T16:34:57.270622Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:57.271623Z", "completed_at": "2024-10-01T16:34:59.481119Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.3883910179138184, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d62e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm438_denominator_criteria2", "compiled": true, "compiled_code": "\n\nwith cholesterol_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in (\n              'ldl cholesterol'\n            , 'familial hypercholesterolemia'\n        )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , encounter_id\n        , recorded_date\n        , source_code\n        , source_code_type\n        , normalized_code\n        , normalized_code_type\n    from dev_thuxuan.quality_measures._stg_condition\n\n)\n\n, cholesterol_conditions as (\n\n    select\n          conditions.patient_id\n        , conditions.recorded_date as evidence_date\n    from conditions\n    inner join cholesterol_codes\n        on coalesce(conditions.normalized_code_type, conditions.source_code_type) = cholesterol_codes.code_system\n            and coalesce(conditions.normalized_code, conditions.source_code) = cholesterol_codes.code\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_procedure\n\n)\n\n, cholesterol_procedures as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date as evidence_date\n    from procedures\n         inner join cholesterol_codes\n             on procedures.code = cholesterol_codes.code\n             and procedures.code_type = cholesterol_codes.code_system\n\n)\n\n, labs as (\n\n    select\n          patient_id\n        , result\n        , result_date\n        , collection_date\n        , source_code_type\n        , source_code\n        , normalized_code_type\n        , normalized_code\n    from dev_thuxuan.quality_measures._stg_lab_result\n\n)\n\n, cholesterol_tests_with_result as (\n\n    select\n      labs.patient_id\n    , labs.result as evidence_value\n    , coalesce(collection_date, result_date) as evidence_date\n    , cholesterol_codes.concept_name\n    , row_number() over(partition by labs.patient_id order by\n                          labs.result desc\n                        , result_date desc) as rn\n    from labs\n    inner join cholesterol_codes\n      on coalesce(labs.normalized_code, labs.source_code) = cholesterol_codes.code\n        and coalesce(labs.normalized_code_type, labs.source_code_type) = cholesterol_codes.code_system\n   \n        where regexp_like(result, '^[+-]?([0-9]*[.])?[0-9]+$')\n    \n\n)\n\n, cholesterol_labs as (\n\n    select\n          patient_id\n        , evidence_date\n    from cholesterol_tests_with_result\n    where rn= 1\n        and cast(evidence_value as numeric(28,6)) >= 190\n\n)\n\n, all_patients_with_cholesterol as (\n\n    select\n          cholesterol_conditions.patient_id\n        , cholesterol_conditions.evidence_date\n    from cholesterol_conditions\n\n    union all\n\n    select\n          cholesterol_procedures.patient_id\n        , cholesterol_procedures.evidence_date\n    from cholesterol_procedures\n\n    union all\n\n    select\n          cholesterol_labs.patient_id\n        , cholesterol_labs.evidence_date\n    from cholesterol_labs\n\n)\n\n, patients_with_cholesterol as (\n\n    select\n        distinct\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from all_patients_with_cholesterol\n    inner join dev_thuxuan.quality_measures._int_cqm438__performance_period pp\n    on evidence_date <= pp.performance_period_end\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from patients_with_cholesterol\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_cqm438_denominator_criteria2"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:58.035814Z", "completed_at": "2024-10-01T16:34:58.049308Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:58.050266Z", "completed_at": "2024-10-01T16:34:59.483223Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.6101691722869873, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f8ce-0001-987f0111d632"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_shared_exclusions_frailty", "compiled": true, "compiled_code": "\n\nwith patients as (\n\n    select\n          patient_id\n    from dev_thuxuan.quality_measures._stg_patient\n\n)\n\n, exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'frailty device'\n        , 'frailty diagnosis'\n        , 'frailty encounter'\n        , 'frailty symptom'\n    )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , recorded_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_condition\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from dev_thuxuan.quality_measures._stg_medical_claim\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_observation\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_procedure\n\n)\n\n, condition_exclusions as (\n\n    select\n          conditions.patient_id\n        , conditions.recorded_date\n        , exclusion_codes.concept_name\n    from conditions\n         inner join exclusion_codes\n             on conditions.code = exclusion_codes.code\n             and conditions.code_type = exclusion_codes.code_system\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n        , exclusion_codes.concept_name\n    from medical_claim\n         inner join exclusion_codes\n            on medical_claim.hcpcs_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'hcpcs'\n\n)\n\n, observation_exclusions as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , exclusion_codes.concept_name\n    from observations\n         inner join exclusion_codes\n             on observations.code = exclusion_codes.code\n             and observations.code_type = exclusion_codes.code_system\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name\n    from procedures\n         inner join exclusion_codes\n             on procedures.code = exclusion_codes.code\n             and procedures.code_type = exclusion_codes.code_system\n\n)\n\n, patients_with_frailty as (\n\n    select\n          patients.patient_id\n        , condition_exclusions.recorded_date as exclusion_date\n        , condition_exclusions.concept_name as exclusion_reason\n    from patients\n         inner join condition_exclusions\n            on patients.patient_id = condition_exclusions.patient_id\n\n    union all\n\n    select\n          patients.patient_id\n        , coalesce(\n              med_claim_exclusions.claim_start_date\n            , med_claim_exclusions.claim_end_date\n          ) as exclusion_date\n        , med_claim_exclusions.concept_name as exclusion_reason\n    from patients\n         inner join med_claim_exclusions\n            on patients.patient_id = med_claim_exclusions.patient_id\n\n    union all\n\n    select\n          patients.patient_id\n        , observation_exclusions.observation_date as exclusion_date\n        , observation_exclusions.concept_name as exclusion_reason\n    from patients\n         inner join observation_exclusions\n            on patients.patient_id = observation_exclusions.patient_id\n\n    union all\n\n    select\n          patients.patient_id\n        , procedure_exclusions.procedure_date as exclusion_date\n        , procedure_exclusions.concept_name as exclusion_reason\n    from patients\n         inner join procedure_exclusions\n            on patients.patient_id = procedure_exclusions.patient_id\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom patients_with_frailty", "relation_name": "dev_thuxuan.quality_measures._int_shared_exclusions_frailty"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:58.985829Z", "completed_at": "2024-10-01T16:34:58.990881Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:58.991840Z", "completed_at": "2024-10-01T16:34:59.679083Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.8484172821044922, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112fb6"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_claim_id.84015aec48", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect claim_id\nfrom dev_thuxuan.chronic_conditions._int_cms_chronic_condition_all\nwhere claim_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:58.677375Z", "completed_at": "2024-10-01T16:34:58.685899Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:58.686978Z", "completed_at": "2024-10-01T16:35:00.535952Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.0960135459899902, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76702-010a-f6d9-0001-987f01112fb2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_shared_exclusions_hospice_palliative", "compiled": true, "compiled_code": "\n\n/*\nDENOMINATOR EXCLUSIONS:\nPatient was provided hospice services any time during the measurement period: G9687\n*/\n\n\nwith exclusion_codes as (\n\n    select\n          code\n        , case code_system\n            when 'SNOMEDCT' then 'snomed-ct'\n            when 'ICD9CM' then 'icd-9-cm'\n            when 'ICD10CM' then 'icd-10-cm'\n            when 'CPT' then 'hcpcs'\n            when 'ICD10PCS' then 'icd-10-pcs'\n          else lower(code_system) end as code_system\n        , concept_name\n    From dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in  (\n            'hospice encounter'\n          , 'hospice care ambulatory'\n          , 'hospice diagnosis'\n          , 'palliative care encounter'\n          , 'palliative care diagnosis'\n          , 'palliative care intervention'\n    )\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_condition \n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from dev_thuxuan.quality_measures._stg_medical_claim\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_observation\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_procedure\n\n)\n\n, condition_exclusions as (\n\n    select\n          conditions.patient_id\n        , conditions.claim_id\n        , conditions.recorded_date\n        , exclusion_codes.concept_name as concept_name\n    from conditions\n         inner join exclusion_codes\n            on conditions.code = exclusion_codes.code\n            and conditions.code_type = exclusion_codes.code_system\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n        , exclusion_codes.concept_name as concept_name\n    from medical_claim\n         inner join exclusion_codes\n            on medical_claim.hcpcs_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'hcpcs'\n\n)\n\n, observation_exclusions as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , exclusion_codes.concept_name as concept_name\n    from observations\n    inner join exclusion_codes\n        on observations.code = exclusion_codes.code\n        and observations.code_type = exclusion_codes.code_system\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name as concept_name\n    from procedures\n         inner join exclusion_codes\n             on procedures.code = exclusion_codes.code\n             and procedures.code_type = exclusion_codes.code_system\n\n)\n\n, patients_with_exclusions as(\n    \n    select patient_id\n        , recorded_date as exclusion_date\n        , concept_name as exclusion_reason\n    from condition_exclusions\n\n    union all\n\n    select patient_id\n        , coalesce(claim_end_date, claim_start_date) as exclusion_date\n        , concept_name as exclusion_reason\n    from med_claim_exclusions\n\n    union all\n\n    select patient_id\n        , observation_date as exclusion_date\n        , concept_name as exclusion_reason\n    from observation_exclusions\n\n    union all\n\n    select patient_id\n        , procedure_date as exclusion_date\n        , concept_name as exclusion_reason\n    from procedure_exclusions\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , 'hospice_palliative' as exclusion_type\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom patients_with_exclusions", "relation_name": "dev_thuxuan.quality_measures._int_shared_exclusions_hospice_palliative"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:59.652471Z", "completed_at": "2024-10-01T16:34:59.665045Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:59.674048Z", "completed_at": "2024-10-01T16:35:00.699475Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.2811744213104248, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f7c5-0001-987f0110be1a"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_condition.bb780b4840", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect condition\nfrom dev_thuxuan.chronic_conditions._int_cms_chronic_condition_all\nwhere condition is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:59.659472Z", "completed_at": "2024-10-01T16:34:59.674048Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:59.679083Z", "completed_at": "2024-10-01T16:35:00.706850Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.280177116394043, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d636"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_patient_id.95fc066008", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom dev_thuxuan.chronic_conditions._int_cms_chronic_condition_all\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:59.837333Z", "completed_at": "2024-10-01T16:34:59.845255Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:59.846331Z", "completed_at": "2024-10-01T16:35:01.111731Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.441887617111206, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f01112fbe"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.dbt_utils_unique_combination_of_columns_financial_pmpm__pmpm_prep_patient_id__year_month___quote_column_plan_.be60091e23", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        patient_id, year_month, plan\n    from dev_thuxuan.financial_pmpm.pmpm_prep\n    group by patient_id, year_month, plan\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:34:59.665045Z", "completed_at": "2024-10-01T16:34:59.683113Z"}, {"name": "execute", "started_at": "2024-10-01T16:34:59.686094Z", "completed_at": "2024-10-01T16:35:02.118828Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.6041812896728516, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f01112fba"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_hcc_mapping", "compiled": true, "compiled_code": "\n/*\nSteps for staging the medical claim data:\n    1) Filter to risk-adjustable claims per claim type for the collection year.\n    2) Gather diagnosis codes from Condition for the eligible claims.\n    3) Map and filter diagnosis codes to HCCs for each CMS model version\n    4) Union results from each CMS model version\n       (note: some payment years may not have results for v28)\n*/\n\nwith conditions as (\n\n    select\n          patient_id\n        , condition_code\n        , payment_year\n    from dev_thuxuan.cms_hcc._int_eligible_conditions\n\n)\n\n, seed_hcc_mapping as (\n\n    select\n          payment_year\n        , diagnosis_code\n        , cms_hcc_v24\n        , cms_hcc_v24_flag\n        , cms_hcc_v28\n        , cms_hcc_v28_flag\n    from dev_thuxuan.cms_hcc._value_set_icd_10_cm_mappings\n\n)\n\n/* casting hcc_code to avoid formatting changes during union */\n, v24_mapped as (\n\n    select distinct\n          conditions.patient_id\n        , conditions.condition_code\n        , conditions.payment_year\n        , 'CMS-HCC-V24' as model_version\n        , cast(seed_hcc_mapping.cms_hcc_v24 as TEXT) as hcc_code\n    from conditions\n        inner join seed_hcc_mapping\n            on conditions.condition_code = seed_hcc_mapping.diagnosis_code\n            and conditions.payment_year = seed_hcc_mapping.payment_year\n    where cms_hcc_v24_flag = 'Yes'\n\n)\n\n, v28_mapped as (\n\n    select distinct\n          conditions.patient_id\n        , conditions.condition_code\n        , conditions.payment_year\n        , 'CMS-HCC-V28' as model_version\n        , cast(seed_hcc_mapping.cms_hcc_v28 as TEXT) as hcc_code\n    from conditions\n        inner join seed_hcc_mapping\n            on conditions.condition_code = seed_hcc_mapping.diagnosis_code\n            and conditions.payment_year = seed_hcc_mapping.payment_year\n    where cms_hcc_v28_flag = 'Yes'\n\n)\n\n, unioned as (\n\n    select * from v24_mapped\n    union all\n    select * from v28_mapped\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(condition_code as TEXT) as condition_code\n        , cast(hcc_code as TEXT) as hcc_code\n        , cast(model_version as TEXT) as model_version\n        , cast(payment_year as integer) as payment_year\n    from unioned\n\n)\n\nselect\n      patient_id\n    , condition_code\n    , hcc_code\n    , model_version\n    , payment_year\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.cms_hcc._int_hcc_mapping"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:00.960283Z", "completed_at": "2024-10-01T16:35:00.978441Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:00.978441Z", "completed_at": "2024-10-01T16:35:02.895966Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.079127550125122, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f01112fc2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.mart_review__number_of_conditions", "compiled": true, "compiled_code": "\n\nwith xwalk as (\n    select distinct patient_id, data_source\n    from dev_thuxuan.core.patient\n),\ncte as (\n    select l.patient_id,\n           x.data_source,\n           count(*) as numofconditions\n    from dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long l\n    left join xwalk x on l.patient_id = x.patient_id\n    group by l.patient_id, x.data_source\n)\nselect p.patient_id,\n       p.data_source,\n        p.patient_id || '|' || p.data_source as patient_source_key,\n       coalesce(cte.numofconditions, 0) as numofconditions\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.patient p\nleft join cte on p.patient_id = cte.patient_id and p.data_source = cte.data_source", "relation_name": "dev_thuxuan.data_quality.mart_review__number_of_conditions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:00.969807Z", "completed_at": "2024-10-01T16:35:00.986138Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:00.987055Z", "completed_at": "2024-10-01T16:35:02.967627Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.140390157699585, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b632"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.mart_review__tuva_chronic_conditions", "compiled": true, "compiled_code": "\n\nwith cte as (\n    select distinct\n        patient_id\n    from dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\n)\n\n, patientxwalk as (\n    select distinct\n        patient_id\n      , data_source\n    from dev_thuxuan.core.patient\n)\n\n, result as (\n    select\n        l.patient_id\n      , p.data_source\n      , l.condition\n    from dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long as l\n    inner join patientxwalk as p\n      on l.patient_id = p.patient_id\n\n    union all\n\n    select\n        p.patient_id\n      , p.data_source\n      , 'No Chronic Conditions' as condition\n    from dev_thuxuan.core.patient as p\n    left join cte\n      on p.patient_id = cte.patient_id\n    where cte.patient_id is null\n)\n\nselect *\n   , patient_id || '|' || data_source as patient_source_key\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom result", "relation_name": "dev_thuxuan.data_quality.mart_review__tuva_chronic_conditions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:00.778618Z", "completed_at": "2024-10-01T16:35:00.929640Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:00.931648Z", "completed_at": "2024-10-01T16:35:03.129497Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.5131170749664307, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b62e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_wide", "compiled": true, "compiled_code": "\n\nwith patients as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\n),\n\nobesity as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Obesity'\n),\n\n\nosteoarthritis as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Osteoarthritis'\n),\n\ncopd as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Chronic Obstructive Pulmonary Disease'\n),\n\nanxiety_disorders as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Anxiety Disorders'\n),\n\nckd as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Chronic Kidney Disease'\n),\n\nt2d as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Type 2 Diabetes Mellitus'\n),\n\ncll as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Chronic Lymphocytic Leukemia'\n),\n\ndysplipidemias as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Dyslipidemias'\n),\n\nhypertension as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Hypertension'\n),\n\natherosclerosis as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Atherosclerosis'\n),\n\ndementia as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Dementia'\n),\n\nrheumatoid_arthritis as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Rheumatoid Arthritis'\n),\n\nceliac as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Celiac Disease'\n),\n\nhip_fracture as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Hip Fracture'\n),\n\nimmunodeficiencies_and_white_blood_cell_disorders as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Specified Immunodeficiencies and White Blood Cell Disorders  (HCC v28 concept #115)'\n),\n\nasthma as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Asthma'\n),\n\nt1d as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Type 1 Diabetes Mellitus'\n),\n\nulcerative_colitis as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Ulcerative colitis'\n),\n\nchrohns as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Crohns Disease'\n),\n\nholicobacter as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Helicobacter pylori Infection'\n),\n\nbipolar as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Bipolar Affective Disorder'\n),\n\nheart_failure as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Heart Failure'\n),\n\ntabacco as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Tobacco Use'\n),\n\nlyme as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Lyme Disease'\n),\n\nbreast_cancer as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Breast Cancer'\n),\n\nosteoporosis as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Osteoporosis'\n),\n\npulmonary_embolism as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Pulmonary Embolism, Thrombotic or Unspecified'\n),\n\nschizophrenia as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Schizophrenia'\n),\n\natrial_fibrillation as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Atrial Fibrillation'\n),\n\ncolorectal_cancer as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Colorectal Cancer'\n),\n\ndepression as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Major Depressive Disorder'\n),\n\ndeep_vein_thrombosis as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Deep Vein Thrombosis of Extremities or Central Veins'\n),\n\nalzheimer as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Alzheimer Disease'\n),\n\nstroke as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Stroke'\n),\n\nmyocardial_infraction as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Myocardial Infarction'\n),\n\nopiod_use_disorder as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Opioid Use Disorder'\n),\n\nlung_cancer as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Lung cancer, primary or unspecified'\n),\n\nherpes as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Herpes Simplex Infection'\n),\n\nrickettsiosis as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Rickettsiosis'\n),\n\nms as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Multiple Sclerosis'\n),\n\nalchohol as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Alcohol Use Disorder'\n),\n\nadhd as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Attention Deficit-Hyperactivity Disorder'\n),\n\nhiv as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'HIV/AIDS  (HCC v28 concept #1)'\n),\n\nptsd as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Post-Traumatic Stress Disorder'\n),\n\nlupus as (\nselect distinct patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Systemic Lupus Erythematosus'\n)\n\n\n\n\nselect\n  patient_id,\n  case when patient_id in (select * from obesity) then 1\n       else 0\n  end as obesity,\n  case when patient_id in (select * from osteoarthritis) then 1\n       else 0\n  end as osteoarthritis,\n  case when patient_id in (select * from copd) then 1\n       else 0\n  end as copd,\n  case when patient_id in (select * from anxiety_disorders) then 1\n       else 0\n  end as anxiety_disorders,\n  case when patient_id in (select * from ckd) then 1\n       else 0\n  end as ckd,\n  case when patient_id in (select * from t2d) then 1\n       else 0\n  end as t2d,\n  case when patient_id in (select * from cll) then 1\n       else 0\n  end as cll,\n  case when patient_id in (select * from dysplipidemias) then 1\n       else 0\n  end as dysplipidemias,\n  case when patient_id in (select * from hypertension) then 1\n       else 0\n  end as hypertension,\n  case when patient_id in (select * from atherosclerosis) then 1\n       else 0\n  end as atherosclerosis,\n  case when patient_id in (select * from dementia) then 1\n       else 0\n  end as dementia,\n  case when patient_id in (select * from rheumatoid_arthritis) then 1\n       else 0\n  end as rheumatoid_arthritis,\n  case when patient_id in (select * from celiac) then 1\n       else 0\n  end as celiac,\n  case when patient_id in (select * from hip_fracture) then 1\n       else 0\n  end as hip_fracture,\n  case when patient_id in (select * from immunodeficiencies_and_white_blood_cell_disorders) then 1\n       else 0\n  end as immunodeficiencies_and_white_blood_cell_disorders,\n  case when patient_id in (select * from asthma) then 1\n       else 0\n  end asthma,\n  case when patient_id in (select * from t1d) then 1\n       else 0\n  end as t1d,\n  case when patient_id in (select * from ulcerative_colitis) then 1\n       else 0\n  end as ulcerative_colitis,\n  case when patient_id in (select * from chrohns) then 1\n       else 0\n  end as chrohns,\n  case when patient_id in (select * from holicobacter) then 1\n       else 0\n  end as holicobacter,\n  case when patient_id in (select * from bipolar) then 1\n       else 0\n  end as bipolar,\n  case when patient_id in (select * from heart_failure) then 1\n       else 0\n  end as heart_failure,\n  case when patient_id in (select * from tabacco) then 1\n       else 0\n  end as tabacco,\n  case when patient_id in (select * from lyme) then 1\n       else 0\n  end as lyme,\n  case when patient_id in (select * from breast_cancer) then 1\n       else 0\n  end as breast_cancer,\n  case when patient_id in (select * from osteoporosis) then 1\n       else 0\n  end as osteoporosis,\n  case when patient_id in (select * from pulmonary_embolism) then 1\n       else 0\n  end as pulmonary_embolism,\n  case when patient_id in (select * from schizophrenia) then 1\n       else 0\n  end as schizophrenia,\n  case when patient_id in (select * from atrial_fibrillation) then 1\n       else 0\n  end as atrial_fibrillation,\n  case when patient_id in (select * from colorectal_cancer) then 1\n       else 0\n  end as colorectal_cancer,\n  case when patient_id in (select * from depression) then 1\n       else 0\n  end as depression,\n  case when patient_id in (select * from deep_vein_thrombosis) then 1\n       else 0\n  end as deep_vein_thrombosis,\n  case when patient_id in (select * from alzheimer) then 1\n       else 0\n  end as alzheimer,\n  case when patient_id in (select * from stroke) then 1\n       else 0\n  end as stroke,\n  case when patient_id in (select * from myocardial_infraction) then 1\n       else 0\n  end as myocardial_infraction,\n  case when patient_id in (select * from opiod_use_disorder) then 1\n       else 0\n  end as opiod_use_disorder,\n  case when patient_id in (select * from lung_cancer) then 1\n       else 0\n  end as lung_cancer,\n  case when patient_id in (select * from herpes) then 1\n       else 0\n  end as herpes,\n  case when patient_id in (select * from rickettsiosis) then 1\n       else 0\n  end as rickettsiosis,\n  case when patient_id in (select * from ms) then 1\n       else 0\n  end as ms,\n  case when patient_id in (select * from alchohol) then 1\n       else 0\n  end as alchohol,\n  case when patient_id in (select * from adhd) then 1\n       else 0\n  end as adhd,\n  case when patient_id in (select * from hiv) then 1\n       else 0\n  end as hiv,\n  case when patient_id in (select * from ptsd) then 1\n       else 0\n  end as ptsd,\n  case when patient_id in (select * from lupus) then 1\n       else 0\n  end as lupus,\n  '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\n\nfrom patients", "relation_name": "dev_thuxuan.chronic_conditions.tuva_chronic_conditions_wide"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:01.285658Z", "completed_at": "2024-10-01T16:35:01.310275Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:01.310275Z", "completed_at": "2024-10-01T16:35:03.250399Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.1014466285705566, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b636"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__int_patient_hcc_history", "compiled": true, "compiled_code": "\n\nwith all_conditions as (\n\n    select\n          patient_id\n        , data_source\n        , recorded_date\n        , condition_type\n        , icd_10_cm_code\n        , hcc_code\n        , hcc_description\n    from dev_thuxuan.hcc_suspecting._int_all_conditions\n    where hcc_code is not null\n\n)\n\n, hcc_grouped as (\n\n    select\n          patient_id\n        , data_source\n        , hcc_code\n        , hcc_description\n        , min(recorded_date) as first_recorded\n        , max(recorded_date) as last_recorded\n    from all_conditions\n    where hcc_code is not null\n    group by\n          patient_id\n        , hcc_code\n        , hcc_description\n        , data_source\n\n)\n\n, hcc_billed as (\n\n    select\n          patient_id\n        , data_source\n        , hcc_code\n        , hcc_description\n        , max(recorded_date) as last_billed\n    from all_conditions\n    where hcc_code is not null\n    and lower(condition_type) <> 'problem'\n    group by\n          patient_id\n        , hcc_code\n        , hcc_description\n        , data_source\n\n)\n\n, add_flag as (\n\n    select\n          hcc_grouped.patient_id\n        , hcc_grouped.data_source\n        , hcc_grouped.hcc_code\n        , hcc_grouped.hcc_description\n        , hcc_grouped.first_recorded\n        , hcc_grouped.last_recorded\n        , hcc_billed.last_billed\n        , case\n            when date_part('year', hcc_billed.last_billed) = date_part('year', convert_timezone('UTC', current_timestamp()))\n            then 1\n            else 0\n          end as current_year_billed\n\n    from hcc_grouped\n         left join hcc_billed\n         on hcc_grouped.patient_id = hcc_billed.patient_id\n         and hcc_grouped.hcc_code = hcc_billed.hcc_code\n         and hcc_grouped.data_source = hcc_billed.data_source\n\n)\n\n, all_conditions_with_flag as (\n\n    select distinct\n          all_conditions.patient_id\n        , all_conditions.data_source\n        , all_conditions.recorded_date\n        , all_conditions.condition_type\n        , all_conditions.icd_10_cm_code\n        , all_conditions.hcc_code\n        , all_conditions.hcc_description\n        , add_flag.first_recorded\n        , add_flag.last_recorded\n        , add_flag.last_billed\n        , add_flag.current_year_billed\n        , cast('Prior coding history' as TEXT) as reason\n        , icd_10_cm_code || case when last_billed is not null then ' last billed on ' || last_billed when last_billed is null and last_recorded is not null then ' last recorded on ' || last_recorded else ' (missing recorded and billing dates) ' end as contributing_factor\n        , coalesce(last_billed, last_recorded) as condition_date\n    from all_conditions\n         left join add_flag\n            on all_conditions.patient_id = add_flag.patient_id\n            and all_conditions.hcc_code = add_flag.hcc_code\n            and all_conditions.data_source = add_flag.data_source\n\n)\n\n, add_standard_fields as (\n\n    select distinct\n          patient_id\n        , data_source\n        , recorded_date\n        , condition_type\n        , icd_10_cm_code\n        , hcc_code\n        , hcc_description\n        , first_recorded\n        , last_recorded\n        , last_billed\n        , current_year_billed\n        , 'Prior coding history' as reason\n        , icd_10_cm_code || case when last_billed is not null then ' last billed on ' || last_billed when last_billed is null and last_recorded is not null then ' last recorded on ' || last_recorded else ' (missing recorded and billing dates) ' end as contributing_factor\n        , coalesce(last_billed, last_recorded) as suspect_date\n    from all_conditions_with_flag\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(data_source as TEXT) as data_source\n        , cast(recorded_date as date) as recorded_date\n        , cast(condition_type as TEXT) as condition_type\n        , cast(icd_10_cm_code as TEXT) as icd_10_cm_code\n        , cast(hcc_code as TEXT) as hcc_code\n        , cast(hcc_description as TEXT) as hcc_description\n        , cast(first_recorded as date) as first_recorded\n        , cast(last_recorded as date) as last_recorded\n        , cast(last_billed as date) as last_billed\n        \n            , cast(current_year_billed as boolean) as current_year_billed\n        \n        , cast(reason as TEXT) as reason\n        , cast(contributing_factor as TEXT) as contributing_factor\n        , cast(suspect_date as date) as suspect_date\n    from add_standard_fields\n\n)\n\nselect\n      patient_id\n    , data_source\n    , recorded_date\n    , condition_type\n    , icd_10_cm_code\n    , hcc_code\n    , hcc_description\n    , first_recorded\n    , last_recorded\n    , last_billed\n    , current_year_billed\n    , reason\n    , contributing_factor\n    , suspect_date\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.hcc_suspecting._int_patient_hcc_history"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:02.269798Z", "completed_at": "2024-10-01T16:35:02.285558Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:02.286500Z", "completed_at": "2024-10-01T16:35:03.475148Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3263936042785645, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b63a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_shared_exclusion_union", "compiled": true, "compiled_code": "\n\n-- Missing Age Exclusion\nselect \n    denom.encounter_id\n  , denom.data_source\n  , 'missing age' as exclusion_reason\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_inpatient_encounter as denom\ninner join dev_thuxuan.ahrq_measures._int_pqi_shared_exclusions_missing_age as age\n  on denom.patient_id = age.patient_id\n  and denom.data_source = age.data_source\n\nunion all\n\n-- Missing Gender Exclusion\nselect \n    denom.encounter_id\n  , denom.data_source\n  , 'missing gender' as exclusion_reason\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_inpatient_encounter as denom\ninner join dev_thuxuan.ahrq_measures._int_pqi_shared_exclusion_missing_gender as gender\n  on denom.patient_id = gender.patient_id\n  and denom.data_source = gender.data_source\n\nunion all\n\n-- Missing Dates Exclusion\nselect \n    denom.encounter_id\n  , denom.data_source\n  , 'missing dates' as exclusion_reason\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_inpatient_encounter as denom\ninner join dev_thuxuan.ahrq_measures._int_pqi_shared_exclusion_missing_dates as dates\n  on denom.encounter_id = dates.encounter_id\n  and denom.data_source = dates.data_source\n\nunion all\n\n-- Missing Primary Diagnosis Exclusion\nselect \n    denom.encounter_id\n  , denom.data_source\n  , 'missing primary diagnosis' as exclusion_reason\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_inpatient_encounter as denom\ninner join dev_thuxuan.ahrq_measures._int_pqi_shared_exclusion_missing_primary_dx as dx\n  on denom.encounter_id = dx.encounter_id\n  and denom.data_source = dx.data_source\n\nunion all\n\n-- Transfer Exclusion\nselect \n    denom.encounter_id\n  , denom.data_source\n  , 'transfer' as exclusion_reason\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_inpatient_encounter as denom\ninner join dev_thuxuan.ahrq_measures._int_pqi_shared_exclusion_transfer as tx\n  on denom.encounter_id = tx.encounter_id\n  and denom.data_source = tx.data_source\n\nunion all\n\n-- Ungroupable DRG Exclusion\nselect \n    denom.encounter_id\n  , denom.data_source\n  , 'ungroupable DRG' as exclusion_reason\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_inpatient_encounter as denom\ninner join dev_thuxuan.ahrq_measures._int_pqi_shared_exclusion_ungroupable_drg as drg\n  on denom.encounter_id = drg.encounter_id\n  and denom.data_source = drg.data_source", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_shared_exclusion_union"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:03.041394Z", "completed_at": "2024-10-01T16:35:03.053595Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:03.053595Z", "completed_at": "2024-10-01T16:35:04.631366Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.7229409217834473, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f7c5-0001-987f0110be1e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cbe0055_denominator", "compiled": true, "compiled_code": "\n\nwith visit_codes as (\n\n    select\n          code\n        , code_system\n    from dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'office visit'\n        , 'home healthcare services'\n        , 'preventive care services established office visit, 18 and up'        \n        , 'preventive care services initial office visit, 18 and up'\n        , 'annual wellness visit'\n        , 'telephone visits'\n        , 'outpatient'\n        , 'observation'\n        , 'diabetes visit'\n        , 'ophthalmological services'\n        , 'diabetic retinopathy'\n    )\n\n)\n\n, visits_encounters as (\n\n    select patient_id\n         , coalesce(encounter.encounter_start_date,encounter.encounter_end_date) as min_date\n         , coalesce(encounter.encounter_end_date,encounter.encounter_start_date) as max_date\n    from dev_thuxuan.quality_measures._stg_encounter encounter\n    inner join dev_thuxuan.quality_measures._int_cbe0055__performance_period as pp\n        on coalesce(encounter.encounter_end_date,encounter.encounter_start_date) >= pp.performance_period_begin\n        and  coalesce(encounter.encounter_start_date,encounter.encounter_end_date) <= pp.performance_period_end\n    where lower(encounter_type) in (\n          'home health'\n        , 'office visit'\n        , 'outpatient'\n        , 'outpatient rehabilitation'\n        , 'telehealth'\n     )\n\n)\n\n, procedure_encounters as (\n\n    select \n          patient_id\n        , procedure_date as min_date\n        , procedure_date as max_date\n        from dev_thuxuan.quality_measures._stg_procedure procs\n    inner join dev_thuxuan.quality_measures._int_cbe0055__performance_period  as pp\n        on procedure_date between pp.performance_period_begin and  pp.performance_period_end\n    inner join visit_codes\n            on coalesce(procs.normalized_code,procs.source_code) = visit_codes.code\n\n)\n\n, claims_encounters as (\n    \n    select patient_id\n    , coalesce(claim_start_date,claim_end_date) as min_date\n    , coalesce(claim_end_date,claim_start_date) as max_date\n    from dev_thuxuan.quality_measures._stg_medical_claim medical_claim\n    inner join dev_thuxuan.quality_measures._int_cbe0055__performance_period  as pp on\n        coalesce(claim_end_date,claim_start_date)  >=  pp.performance_period_begin\n         and coalesce(claim_start_date,claim_end_date) <=  pp.performance_period_end\n    inner join  visit_codes\n        on medical_claim.hcpcs_code= visit_codes.code\n\n)\n\n, all_encounters as (\n\n    select *, 'v' as visit_enc,cast(null as TEXT) as proc_enc, cast(null as TEXT) as claim_enc\n    from visits_encounters\n\n    union all\n\n    select *, cast(null as TEXT) as visit_enc, 'p' as proc_enc, cast(null as TEXT) as claim_enc\n    from procedure_encounters\n\n    union all\n    \n    select *, cast(null as TEXT) as visit_enc,cast(null as TEXT) as proc_enc, 'c' as claim_enc\n    from claims_encounters\n\n)\n\n, encounters_by_patient as (\n\n    select patient_id,min(min_date) min_date, max(max_date) max_date,\n        concat(concat(\n            coalesce(min(visit_enc),'')\n            ,coalesce(min(proc_enc),''))\n            ,coalesce(min(claim_enc),'')\n            ) as qualifying_types\n    from all_encounters\n    group by patient_id\n\n)\n\n, diabetics_codes as (\n\n    select\n          code\n        , code_system\n    from dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'diabetes'\n        )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , encounter_id\n        , recorded_date\n        , source_code\n        , source_code_type\n        , normalized_code\n        , normalized_code_type\n    from dev_thuxuan.quality_measures._stg_condition\n\n)\n\n, diabetic_conditions as (\n\n    select\n          conditions.patient_id\n        , conditions.claim_id\n        , conditions.encounter_id\n        , conditions.recorded_date\n        , conditions.source_code\n        , conditions.source_code_type\n    from conditions\n    inner join diabetics_codes\n        on coalesce(conditions.normalized_code_type, conditions.source_code_type) = diabetics_codes.code_system\n            and coalesce(conditions.normalized_code, conditions.source_code) = diabetics_codes.code\n\n)\n\n, patients_with_age as (\n\n    select\n          p.patient_id\n        , min_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.min_date\n        ) / 8760.0)  as min_age\n        , max_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.max_date\n        ) / 8760.0) as max_age\n        , qualifying_types\n    from dev_thuxuan.quality_measures._stg_patient p\n    inner join encounters_by_patient e\n        on p.patient_id = e.patient_id\n    where p.death_date is null\n\n)\n\n, qualifying_patients as (\n\n    select\n        distinct\n          diabetic_conditions.patient_id\n        , patients_with_age.max_age as age\n        , pp.performance_period_begin\n        , pp.performance_period_end\n        , pp.measure_id\n        , pp.measure_name\n        , pp.measure_version\n        , 1 as denominator_flag\n    from diabetic_conditions\n    left join patients_with_age\n        on diabetic_conditions.patient_id = patients_with_age.patient_id\n    cross join dev_thuxuan.quality_measures._int_cbe0055__performance_period pp\n    where max_age >= 18 and min_age <=  75\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(age as integer) as age\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(denominator_flag as integer) as denominator_flag\n    from qualifying_patients\n\n)\n\nselect \n      patient_id\n    , age\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , denominator_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_cbe0055_denominator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:03.114725Z", "completed_at": "2024-10-01T16:35:03.131501Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:03.131501Z", "completed_at": "2024-10-01T16:35:04.779539Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.8076863288879395, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b63e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cbe0101_denominator", "compiled": true, "compiled_code": "\n\nwith visit_codes as (\n\n    select\n          code\n        , code_system\n    from dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'annual wellness visit'\n        , 'audiology visit'\n        , 'home healthcare services'\n        , 'nursing facility visit'\n        , 'occupational therapy evaluation'\n        , 'office visit'\n        , 'physical therapy evaluation'\n        , 'online assessments'\n        , 'telephone visits'  \n        , 'care services in long term residential facility'\n        , 'discharge services nursing facility'\n        , 'encounter inpatient'\n        , 'ophthalmological services'\n        , 'preventive care services established office visit, 18 and up'\n        , 'preventive care services individual counseling'\n        , 'preventive care services initial office visit, 18 and up'\n    )\n\n)\n\n, procedures as (\n\n    select\n        patient_id\n      , procedure_date\n      , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_procedure\n\n)\n\n, medical_claim as (\n    \n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n    from dev_thuxuan.quality_measures._stg_medical_claim\n\n)\n\n, visits_encounters as (\n\n    select patient_id\n         , coalesce(encounter.encounter_start_date,encounter.encounter_end_date) as min_date\n         , coalesce(encounter.encounter_end_date,encounter.encounter_start_date) as max_date\n    from dev_thuxuan.quality_measures._stg_encounter encounter\n    inner join dev_thuxuan.quality_measures._int_cbe0101__performance_period as pp\n        on coalesce(encounter.encounter_end_date,encounter.encounter_start_date) >= pp.performance_period_begin\n            and  coalesce(encounter.encounter_start_date,encounter.encounter_end_date) <= pp.performance_period_end\n    where lower(encounter_type) in (\n          'home health'\n        , 'office visit'\n        , 'outpatient'\n        , 'outpatient rehabilitation'\n        , 'telehealth'\n    )\n\n)\n\n, procedure_encounters as (\n\n    select \n          patient_id\n        , procedure_date as min_date\n        , procedure_date as max_date\n    from procedures\n    inner join dev_thuxuan.quality_measures._int_cbe0101__performance_period  as pp\n        on procedure_date between pp.performance_period_begin and  pp.performance_period_end\n    inner join visit_codes\n        on procedures.code = visit_codes.code\n\n)\n\n, claims_encounters as (\n    \n    select \n          patient_id\n        , coalesce(claim_start_date,claim_end_date) as min_date\n        , coalesce(claim_end_date,claim_start_date) as max_date\n    from medical_claim\n    inner join dev_thuxuan.quality_measures._int_cbe0101__performance_period  as pp \n        on coalesce(claim_end_date,claim_start_date)  >=  pp.performance_period_begin\n            and coalesce(claim_start_date,claim_end_date) <=  pp.performance_period_end\n    inner join visit_codes\n        on medical_claim.hcpcs_code = visit_codes.code\n\n)\n\n, all_encounters as (\n\n    select *, 'v' as visit_enc, cast(null as TEXT) as proc_enc, cast(null as TEXT) as claim_enc\n    from visits_encounters\n\n    union all\n\n    select *, cast(null as TEXT) as visit_enc, 'p' as proc_enc, cast(null as TEXT) as claim_enc\n    from procedure_encounters\n\n    union all\n    \n    select *, cast(null as TEXT) as visit_enc, cast(null as TEXT) as proc_enc, 'c' as claim_enc\n    from claims_encounters\n\n)\n\n, encounters_by_patient as (\n\n    select patient_id, min(min_date) min_date, max(max_date) max_date,\n        concat(concat(\n              coalesce(min(visit_enc),'')\n            , coalesce(min(proc_enc),''))\n            , coalesce(min(claim_enc),'')\n            ) as qualifying_types\n    from all_encounters\n    group by patient_id\n\n)\n\n, patients_with_age as (\n\n    select\n          p.patient_id\n        , min_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.max_date\n        ) / 8760.0) as age\n        , max_date\n        , qualifying_types\n    from dev_thuxuan.quality_measures._stg_patient p\n    inner join encounters_by_patient e\n        on p.patient_id = e.patient_id\n    where p.death_date is null\n\n)\n\n, falls_screening_code as (\n\n    select\n          code\n        , code_system\n    from dev_thuxuan.quality_measures._value_set_codes\n    where code = '1100F'\n    /* \n        Patient screened for future fall risk; documentation of two or more falls in the past year \n        or any fall with injury in the past year\n    */\n)\n\n, qualifying_procedures as (\n\n    select\n          patient_id\n        , procedure_date as evidence_date\n    from procedures\n    inner join falls_screening_code\n        on procedures.code = falls_screening_code.code\n            and procedures.code_type = falls_screening_code.code_system\n            \n)\n\n, qualifying_claims as (\n\n    select\n          patient_id\n        , coalesce(claim_end_date, claim_start_date) as evidence_date\n    from medical_claim\n    inner join falls_screening_code\n        on medical_claim.hcpcs_code = falls_screening_code.code\n            and lower(falls_screening_code.code_system) = 'hcpcs'\n\n)\n\n, qualifying_cares as (\n\n    select\n          patient_id\n        , evidence_date\n    from qualifying_procedures\n\n    union all\n\n    select\n          patient_id\n        , evidence_date\n    from qualifying_claims\n\n)\n\n, qualifying_cares_past_year as (\n\n    select\n          patient_id\n        , evidence_date\n        , pp.performance_period_begin\n        , pp.performance_period_end\n        , pp.measure_id\n        , pp.measure_name\n        , pp.measure_version\n    from qualifying_cares\n    inner join dev_thuxuan.quality_measures._int_cbe0101__performance_period pp\n        on evidence_date between pp.performance_period_begin and pp.performance_period_end \n    /*  \n        code 1100F is reported if there are two or more falls in the last year itself,\n        so if it's reported in performance year, it indicates the falls in the last year\n    */\n\n)\n\n, qualifying_patients as (\n\n    select\n          qualifying_cares_past_year.patient_id\n        , patients_with_age.age\n        , max_date as encounter_date\n        , qualifying_cares_past_year.performance_period_begin\n        , qualifying_cares_past_year.performance_period_end\n        , qualifying_cares_past_year.measure_id\n        , qualifying_cares_past_year.measure_name\n        , qualifying_cares_past_year.measure_version\n        , 1 as denominator_flag\n    from qualifying_cares_past_year\n    left join patients_with_age\n        on qualifying_cares_past_year.patient_id = patients_with_age.patient_id\n    where age >= 65\n\n)\n\n\n, add_data_types as (\n\n    select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(age as integer) as age\n        , cast(encounter_date as date) as encounter_date\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(denominator_flag as integer) as denominator_flag\n    from qualifying_patients\n\n)\n\nselect \n      patient_id\n    , age\n    , encounter_date\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , denominator_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_cbe0101_denominator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:03.928552Z", "completed_at": "2024-10-01T16:35:03.956377Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:03.956993Z", "completed_at": "2024-10-01T16:35:05.842013Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.1078715324401855, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d63a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm236_denominator", "compiled": true, "compiled_code": "\n\nwith visit_codes as (\n\n    select\n          code\n        , code_system\n    from dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'office visit'\n        , 'home healthcare services'\n        , 'preventive care services established office visit, 18 and up'\n        , 'preventive care services initial office visit, 18 and up'\n        , 'annual wellness visit'\n        , 'telephone visits'\n        , 'emergency department evaluation and management visit'\n    )\n\n)\n\n, visits_encounters as (\n\n    select \n           patient_id\n         , coalesce(encounter.encounter_start_date,encounter.encounter_end_date) as min_date\n         , coalesce(encounter.encounter_end_date,encounter.encounter_start_date) as max_date\n    from dev_thuxuan.quality_measures._stg_encounter encounter\n    inner join dev_thuxuan.quality_measures._int_cqm236__performance_period as pp\n        on coalesce(encounter.encounter_end_date,encounter.encounter_start_date) >= pp.performance_period_begin\n        and  coalesce(encounter.encounter_start_date,encounter.encounter_end_date) <= pp.performance_period_end\n    where lower(encounter_type) in (\n          'home health'\n        , 'outpatient'\n        , 'nonacute inpatient'\n        , 'encounter inpatient'\n        , 'acute_inpatient'\n        , 'emergency_department'\n    )\n\n)\n\n, procedure_encounters as (\n\n    select \n          patient_id\n        , procedure_date as min_date\n        , procedure_date as max_date\n        from dev_thuxuan.quality_measures._stg_procedure procs\n    inner join dev_thuxuan.quality_measures._int_cqm236__performance_period  as pp\n        on procedure_date between pp.performance_period_begin and  pp.performance_period_end\n    inner join visit_codes\n            on coalesce(procs.normalized_code,procs.source_code) = visit_codes.code\n\n)\n\n, claims_encounters as (\n\n    select \n          patient_id\n        , coalesce(claim_start_date,claim_end_date) as min_date\n        , coalesce(claim_end_date,claim_start_date) as max_date\n    from dev_thuxuan.quality_measures._stg_medical_claim medical_claim\n    inner join dev_thuxuan.quality_measures._int_cqm236__performance_period  as pp on\n        coalesce(claim_end_date,claim_start_date)  >=  pp.performance_period_begin\n         and coalesce(claim_start_date,claim_end_date) <=  pp.performance_period_end\n    inner join visit_codes\n        on medical_claim.hcpcs_code= visit_codes.code\n\n)\n\n, all_encounters as (\n\n    select *, 'v' as visit_enc,cast(null as TEXT) as proc_enc, cast(null as TEXT) as claim_enc\n    from visits_encounters\n    union all\n    select *, cast(null as TEXT) as visit_enc, 'p' as proc_enc, cast(null as TEXT) as claim_enc\n    from procedure_encounters\n    union all\n    select *, cast(null as TEXT) as visit_enc,cast(null as TEXT) as proc_enc, 'c' as claim_enc\n    from claims_encounters\n\n)\n\n, encounters_by_patient as (\n\n    select\n          patient_id\n        , min(min_date) min_date\n        , max(max_date) max_date\n        , concat(concat(\n            coalesce(min(visit_enc),'')\n            ,coalesce(min(proc_enc),''))\n            ,coalesce(min(claim_enc),'')\n            ) as qualifying_types\n    from all_encounters\n    group by patient_id\n\n)\n\n, hypertension_codes as (\n\n    select\n          code\n        , code_system\n    from dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'essential hypertension'\n    )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , encounter_id\n        , recorded_date\n        , source_code\n        , source_code_type\n        , normalized_code\n        , normalized_code_type\n    from dev_thuxuan.quality_measures._stg_condition\n\n)\n\n, hypertension_conditions as (\n\n    select\n          conditions.patient_id\n        , conditions.claim_id\n        , conditions.encounter_id\n        , conditions.recorded_date\n        , conditions.source_code\n        , conditions.source_code_type\n    from conditions\n    inner join hypertension_codes\n        on coalesce(conditions.normalized_code_type, conditions.source_code_type) = hypertension_codes.code_system\n            and coalesce(conditions.normalized_code, conditions.source_code) = hypertension_codes.code\n\n)\n\n, patients_with_age as (\n    \n    select\n          p.patient_id\n        , min_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.min_date\n        ) / 8760.0)  as min_age\n        , max_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.max_date\n        ) / 8760.0) as max_age\n        , qualifying_types\n    from dev_thuxuan.quality_measures._stg_patient p\n    inner join encounters_by_patient e\n        on p.patient_id = e.patient_id\n    where p.death_date is null\n\n)\n\n-- Patients 18-85 years of age who had a visit and diagnosis of essential hypertension starting before and continuing into, or starting during the first six months of the measurement period.\n, qualifying_patients as (\n\n    select\n        distinct\n          hypertension_conditions.patient_id\n        , hypertension_conditions.recorded_date\n        , patients_with_age.max_age as age\n        , pp.performance_period_begin\n        , pp.performance_period_end\n        , pp.measure_id\n        , pp.measure_name\n        , pp.measure_version\n        , 1 as denominator_flag\n    from hypertension_conditions\n    left join patients_with_age\n        on hypertension_conditions.patient_id = patients_with_age.patient_id\n    cross join dev_thuxuan.quality_measures._int_cqm236__performance_period pp\n    where max_age >= 18 and min_age <=  85\n        and hypertension_conditions.recorded_date between\n            \n\n    dateadd(\n        month,\n        -12,\n        performance_period_begin\n        )\n\n\n            and \n            \n\n    dateadd(\n        month,\n        6,\n        performance_period_begin\n        )\n\n\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(age as integer) as age\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(denominator_flag as integer) as denominator_flag\n    from qualifying_patients\n\n)\n\nselect \n      patient_id\n    , age\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , denominator_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_cqm236_denominator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:03.940602Z", "completed_at": "2024-10-01T16:35:03.961083Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:03.962001Z", "completed_at": "2024-10-01T16:35:05.861128Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.095933675765991, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d63e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm48_denominator", "compiled": true, "compiled_code": "\n\nwith visit_codes as (\n\n    select\n          code\n        , code_system\n    from dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'occupational therapy evaluation'\n        , 'office visit'\n        , 'outpatient'\n        , 'physical therapy evaluation'\n    )\n\n)\n\n, procedures as (\n\n    select\n        patient_id\n      , procedure_date\n      , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_procedure\n\n)\n\n, medical_claim as (\n    \n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n    from dev_thuxuan.quality_measures._stg_medical_claim\n\n)\n\n, visits_encounters as (\n\n    select patient_id\n         , coalesce(encounter.encounter_start_date,encounter.encounter_end_date) as min_date\n         , coalesce(encounter.encounter_end_date,encounter.encounter_start_date) as max_date\n    from dev_thuxuan.quality_measures._stg_encounter encounter\n    inner join dev_thuxuan.quality_measures._int_cqm48__performance_period as pp\n        on coalesce(encounter.encounter_end_date,encounter.encounter_start_date) >= pp.performance_period_begin\n            and  coalesce(encounter.encounter_start_date,encounter.encounter_end_date) <= pp.performance_period_end\n    where lower(encounter_type) in (\n          'home health'\n        , 'office visit'\n        , 'outpatient'\n        , 'outpatient rehabilitation'\n        , 'telehealth'\n    )\n\n)\n\n, procedure_encounters as (\n\n    select \n          patient_id\n        , procedure_date as min_date\n        , procedure_date as max_date\n    from procedures\n    inner join dev_thuxuan.quality_measures._int_cqm48__performance_period  as pp\n        on procedure_date between pp.performance_period_begin and  pp.performance_period_end\n    inner join visit_codes\n        on procedures.code = visit_codes.code\n            and procedures.code_type = visit_codes.code_system\n\n)\n\n, claims_encounters as (\n    \n    select \n          patient_id\n        , coalesce(claim_start_date,claim_end_date) as min_date\n        , coalesce(claim_end_date,claim_start_date) as max_date\n    from medical_claim\n    inner join dev_thuxuan.quality_measures._int_cqm48__performance_period  as pp \n        on coalesce(claim_end_date,claim_start_date)  >=  pp.performance_period_begin\n            and coalesce(claim_start_date,claim_end_date) <=  pp.performance_period_end\n    inner join visit_codes\n        on medical_claim.hcpcs_code = visit_codes.code\n            and visit_codes.code_system = 'hcpcs'\n\n)\n\n, all_encounters as (\n\n    select *, 'v' as visit_enc, cast(null as TEXT) as proc_enc, cast(null as TEXT) as claim_enc\n    from visits_encounters\n\n    union all\n\n    select *, cast(null as TEXT) as visit_enc, 'p' as proc_enc, cast(null as TEXT) as claim_enc\n    from procedure_encounters\n\n    union all\n    \n    select *, cast(null as TEXT) as visit_enc, cast(null as TEXT) as proc_enc, 'c' as claim_enc\n    from claims_encounters\n\n)\n\n, encounters_by_patient as (\n\n    select patient_id, min(min_date) min_date, max(max_date) max_date,\n        concat(concat(\n              coalesce(min(visit_enc),'')\n            , coalesce(min(proc_enc),''))\n            , coalesce(min(claim_enc),'')\n            ) as qualifying_types\n    from all_encounters\n    group by patient_id\n\n)\n\n, patients_with_age as (\n\n    select\n          p.patient_id\n        , min_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.max_date\n        ) / 8760.0) as age\n        , max_date\n        , qualifying_types\n    from dev_thuxuan.quality_measures._stg_patient p\n    inner join encounters_by_patient e\n        on p.patient_id = e.patient_id\n    where p.sex = 'female'\n        and p.death_date is null\n\n)\n\n, qualifying_patients as (\n\n    select\n        distinct\n          patients_with_age.patient_id\n        , patients_with_age.age\n        , patients_with_age.max_date as encounter_date\n        , pp.performance_period_begin\n        , pp.performance_period_end\n        , pp.measure_id\n        , pp.measure_name\n        , pp.measure_version\n        , 1 as denominator_flag\n    from patients_with_age\n    cross join dev_thuxuan.quality_measures._int_cqm48__performance_period pp\n    where age >= 65\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(age as integer) as age\n        , cast(encounter_date as date) as encounter_date\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(denominator_flag as integer) as denominator_flag\n    from qualifying_patients\n\n)\n\nselect \n      patient_id\n    , age\n    , encounter_date\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , denominator_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_cqm48_denominator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:03.913015Z", "completed_at": "2024-10-01T16:35:03.948524Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:03.951444Z", "completed_at": "2024-10-01T16:35:05.857125Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.1129872798919678, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b642"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm130_denominator", "compiled": true, "compiled_code": "\n\nwith visit_codes as (\n\n    select\n          code\n        , code_system\n    from dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in (\n            'encounter to document medications'\n    )\n\n)\n\n, visits_encounters as (\n\n    select \n          patient_id\n        , coalesce(encounter.encounter_start_date,encounter.encounter_end_date) as procedure_encounter_date -- alias only to enable union later\n        , coalesce(encounter.encounter_end_date,encounter.encounter_start_date) as claims_encounter_date -- alias only to enable union later\n    from dev_thuxuan.quality_measures._stg_encounter encounter\n    inner join dev_thuxuan.quality_measures._int_cqm130__performance_period as pp\n        on coalesce(encounter.encounter_end_date,encounter.encounter_start_date) >= pp.performance_period_begin\n            and coalesce(encounter.encounter_start_date,encounter.encounter_end_date) <= pp.performance_period_end\n    where lower(encounter_type) in (\n          'home health'\n        , 'office visit'\n        , 'outpatient'\n        , 'outpatient rehabilitation'\n        , 'telehealth'\n    )\n\n)\n\n, procedure_encounters as (\n\n    select \n          patient_id\n        , procedure_date as procedure_encounter_date\n        , try_cast( null as date ) as claims_encounter_date\n    from dev_thuxuan.quality_measures._stg_procedure procs\n    inner join dev_thuxuan.quality_measures._int_cqm130__performance_period as pp\n        on procedure_date between pp.performance_period_begin and pp.performance_period_end\n    inner join visit_codes\n        on coalesce(procs.normalized_code,procs.source_code) = visit_codes.code\n\n)\n\n, claims_encounters as (\n    \n    select \n          patient_id\n        , try_cast( null as date ) as procedure_encounter_date\n        , coalesce(claim_end_date,claim_start_date) as claims_encounter_date\n    from dev_thuxuan.quality_measures._stg_medical_claim medical_claim\n    inner join dev_thuxuan.quality_measures._int_cqm130__performance_period as pp \n        on coalesce(claim_end_date,claim_start_date)  >=  pp.performance_period_begin\n            and coalesce(claim_start_date,claim_end_date) <=  pp.performance_period_end\n    inner join visit_codes\n        on medical_claim.hcpcs_code = visit_codes.code\n\n)\n\n, all_encounters as (\n\n    select *, 'v' as visit_enc, cast(null as TEXT) as proc_enc, cast(null as TEXT) as claim_enc\n    from visits_encounters\n\n    union all\n\n    select *, cast(null as TEXT) as visit_enc, 'p' as proc_enc, cast(null as TEXT) as claim_enc\n    from procedure_encounters\n\n    union all\n    \n    select *, cast(null as TEXT) as visit_enc, cast(null as TEXT) as proc_enc, 'c' as claim_enc\n    from claims_encounters\n\n)\n\n, multiple_encounters_by_patient as (\n\n    select\n          patient_id\n        , procedure_encounter_date\n        , claims_encounter_date\n        , case when procedure_encounter_date >= claims_encounter_date\n                then procedure_encounter_date\n            else claims_encounter_date\n          end as max_encounter_date\n        , coalesce(min(visit_enc), '') || coalesce(min(proc_enc), '') || coalesce(min(claim_enc), '') as qualifying_types\n    from all_encounters\n    group by patient_id, procedure_encounter_date, claims_encounter_date\n\n)\n\n, max_encounter_dates_by_patient as (\n\n\tselect\n\t\t  patient_id\n\t\t, max(max_encounter_date) as max_encounter_date\n\tfrom multiple_encounters_by_patient\n\tgroup by patient_id\n\n)\n\n, latest_patient_encounters as (\n\t\n\tselect\n\t\t  max_encounter_dates_by_patient.patient_id\n\t\t, max_encounter_dates_by_patient.max_encounter_date\n\t\t, procedure_encounter_date\n\t\t, claims_encounter_date\n\tfrom max_encounter_dates_by_patient\n\tinner join multiple_encounters_by_patient\n\t\ton max_encounter_dates_by_patient.patient_id = multiple_encounters_by_patient.patient_id\n\n)\n\n, patients_with_age as (\n\n    select\n          p.patient_id\n        , procedure_encounter_date\n        , claims_encounter_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.max_encounter_date\n        ) / 8760.0) as max_age\n    from dev_thuxuan.quality_measures._stg_patient p\n    inner join latest_patient_encounters e\n        on p.patient_id = e.patient_id\n    where p.death_date is null\n\n)\n\n, qualifying_patients as (\n\n    select\n        distinct\n          patients_with_age.patient_id\n        , patients_with_age.max_age as age\n        , patients_with_age.procedure_encounter_date\n        , patients_with_age.claims_encounter_date\n        , pp.performance_period_begin\n        , pp.performance_period_end\n        , pp.measure_id\n        , pp.measure_name\n        , pp.measure_version\n        , 1 as denominator_flag\n    from patients_with_age\n    cross join dev_thuxuan.quality_measures._int_cqm130__performance_period pp\n    where max_age >= 18\n    \n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(age as integer) as age\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(procedure_encounter_date as date) as procedure_encounter_date\n        , cast(claims_encounter_date as date) as claims_encounter_date\n        , cast(denominator_flag as integer) as denominator_flag\n    from qualifying_patients\n\n)\n\nselect \n      patient_id\n    , age\n    , procedure_encounter_date\n    , claims_encounter_date\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , denominator_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_cqm130_denominator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:04.786582Z", "completed_at": "2024-10-01T16:35:04.798361Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:04.799320Z", "completed_at": "2024-10-01T16:35:06.250412Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.607628583908081, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d642"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_denominator", "compiled": true, "compiled_code": "\n\n/*\nDENOMINATOR:\nPatients 45-75 years of age with a visit during the measurement period\nDENOMINATOR NOTE: To assess the age for exclusions, the patient\u2019s age on the date of the encounter\nshould be used\n*Signifies that this CPT Category I code is a non-covered service under the Medicare Part B Physician Fee\nSchedule (PFS). These non-covered services should be counted in the denominator population for MIPS\nCQMs.\nDenominator Criteria (Eligible Cases):\nPatients 45 to 75 years of age on date of encounter\nAND\nPatient encounter during the performance period (CPT or HCPCS): 99202, 99203, 99204, 99205,\n99212, 99213, 99214, 99215, 99341, 99342, 99344, 99345, 99347, 99348, 99349, 99350, 99386*, 99387*,\n99396*, 99397*, G0438, G0439\n*/\n\nwith visit_codes as (\n\n    select\n          code\n        , code_system\n    from dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'office visit'\n        , 'home healthcare services'\n        , 'preventive care services established office visit, 18 and up'\n        , 'preventive care services initial office visit, 18 and up'\n        , 'annual wellness visit'\n        , 'telephone visits'\n        , 'online assessments'\n    )\n\n)\n\n, visits_encounters as (\n\n    select \n          patient_id\n        , coalesce(encounter.encounter_start_date,encounter.encounter_end_date) as min_date\n        , coalesce(encounter.encounter_end_date,encounter.encounter_start_date) as max_date\n    from dev_thuxuan.quality_measures._stg_encounter encounter\n    inner join dev_thuxuan.quality_measures._int_nqf0034__performance_period as pp\n        on coalesce(encounter.encounter_end_date,encounter.encounter_start_date) >= pp.performance_period_begin\n        and  coalesce(encounter.encounter_start_date,encounter.encounter_end_date) <= pp.performance_period_end\n    where encounter_type in (\n          'home health'\n        , 'office visit'\n        , 'outpatient'\n        , 'outpatient rehabilitation'\n        , 'telehealth'\n    )\n\n)\n\n, procedure_encounters as (\n\n    select \n          patient_id\n        , procedure_date as min_date\n        , procedure_date as max_date\n        from dev_thuxuan.quality_measures._stg_procedure procs\n    inner join dev_thuxuan.quality_measures._int_nqf0034__performance_period  as pp\n        on procedure_date between pp.performance_period_begin and  pp.performance_period_end\n    inner join visit_codes\n            on coalesce(procs.normalized_code,procs.source_code) = visit_codes.code\n\n)\n\n, claims_encounters as (\n\n    select patient_id\n    , coalesce(claim_start_date,claim_end_date) as min_date\n    , coalesce(claim_end_date,claim_start_date) as max_date\n    from dev_thuxuan.quality_measures._stg_medical_claim medical_claim\n    inner join dev_thuxuan.quality_measures._int_nqf0034__performance_period  as pp on\n        coalesce(claim_end_date,claim_start_date)  >=  pp.performance_period_begin\n         and coalesce(claim_start_date,claim_end_date) <=  pp.performance_period_end\n    inner join visit_codes\n        on medical_claim.hcpcs_code= visit_codes.code\n\n)\n\n, all_encounters as (\n\n    select *, 'v' as visit_enc,cast(null as TEXT) as proc_enc, cast(null as TEXT) as claim_enc\n    from visits_encounters\n    union all\n    select *, cast(null as TEXT) as visit_enc, 'p' as proc_enc, cast(null as TEXT) as claim_enc\n    from procedure_encounters\n    union all\n    select *, cast(null as TEXT) as visit_enc,cast(null as TEXT) as proc_enc, 'c' as claim_enc\n    from claims_encounters\n\n)\n\n, encounters_by_patient as (\n\n    select patient_id, min(min_date) min_date, max(max_date) max_date,\n        concat(concat(\n            coalesce(min(visit_enc),'')\n            ,coalesce(min(proc_enc),''))\n            ,coalesce(min(claim_enc),'')\n            ) as qualifying_types\n    from all_encounters\n    group by patient_id\n\n)\n\n, patients_with_age as (\n\n    select\n          p.patient_id\n        , min_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.min_date\n        ) / 8766.0)  as min_age\n        , max_date\n        ,floor(datediff(\n        hour,\n        birth_date,\n        e.max_date\n        ) / 8766.0) as max_age\n        , qualifying_types\n    from dev_thuxuan.quality_measures._stg_patient p\n    inner join encounters_by_patient e\n        on p.patient_id = e.patient_id\n    where p.death_date is null -- ensures deceased patients are not included\n\n)\n\nselect \n      patient_id\n    , min_age\n    , max_age\n    , qualifying_types\nfrom patients_with_age\nwhere max_age >= 45 and min_age <=  75", "relation_name": "dev_thuxuan.quality_measures._int_nqf0034_denominator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:04.927465Z", "completed_at": "2024-10-01T16:35:04.941099Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:04.941099Z", "completed_at": "2024-10-01T16:35:06.696111Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.9148690700531006, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d646"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0041_denominator", "compiled": true, "compiled_code": "\n\nwith visit_codes as (\n\n    select\n          code\n        , code_system\n    from dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'annual wellness visit'\n        , 'discharge services nursing facility'\n        , 'hemodialysis'\n        , 'home healthcare services'\n        , 'nursing facility visit'\n        , 'office visit'\n        , 'outpatient consultation'\n        , 'peritoneal dialysis'\n        , 'preventive care services established office visit, 18 and up'\n        , 'preventive care services group counseling'\n        , 'preventive care services individual counseling'\n        , 'preventive care services initial office visit, 18 and up'\n        , 'preventive care services, initial office visit, 0 to 17'\n        , 'preventive care, established office visit, 0 to 17'\n        , 'online assessments'\n        , 'patient provider interaction'\n        , 'telephone visits'\n    )\n\n)\n\n, visits_encounters as (\n\n    select patient_id\n         , coalesce(encounter.encounter_start_date,encounter.encounter_end_date) as min_date\n         , coalesce(encounter.encounter_end_date,encounter.encounter_start_date) as max_date\n    from dev_thuxuan.quality_measures._stg_encounter encounter\n    inner join dev_thuxuan.quality_measures._int_nqf0041__performance_period as pp\n        on coalesce(encounter.encounter_end_date,encounter.encounter_start_date) >= pp.performance_period_begin\n        and  coalesce(encounter.encounter_start_date,encounter.encounter_end_date) <= pp.performance_period_end\n    where lower(encounter_type) in (\n          'home health'\n        , 'office visit'\n        , 'outpatient'\n        , 'outpatient rehabilitation'\n        , 'telehealth'\n     )\n\n)\n\n, procedure_encounters as (\n\n    select \n          patient_id\n        , procedure_date as min_date\n        , procedure_date as max_date\n    from dev_thuxuan.quality_measures._stg_procedure procedures\n    inner join dev_thuxuan.quality_measures._int_nqf0041__performance_period  as pp\n        on procedure_date between pp.performance_period_begin and  pp.performance_period_end\n    inner join visit_codes\n        on coalesce(procedures.normalized_code,procedures.source_code) = visit_codes.code\n\n)\n\n, claims_encounters as (\n    \n    select \n          patient_id\n        , coalesce(claim_start_date,claim_end_date) as min_date\n        , coalesce(claim_end_date,claim_start_date) as max_date\n    from dev_thuxuan.quality_measures._stg_medical_claim medical_claim\n    inner join dev_thuxuan.quality_measures._int_nqf0041__performance_period  as pp on\n        coalesce(claim_end_date,claim_start_date)  >=  pp.performance_period_begin\n         and coalesce(claim_start_date,claim_end_date) <=  pp.performance_period_end\n    inner join visit_codes\n        on medical_claim.hcpcs_code = visit_codes.code\n\n)\n\n, all_encounters as (\n\n    select *, 'v' as visit_enc, cast(null as TEXT) as proc_enc, cast(null as TEXT) as claim_enc\n    from visits_encounters\n\n    union all\n\n    select *, cast(null as TEXT) as visit_enc, 'p' as proc_enc, cast(null as TEXT) as claim_enc\n    from procedure_encounters\n\n    union all\n    \n    select *, cast(null as TEXT) as visit_enc, cast(null as TEXT) as proc_enc, 'c' as claim_enc\n    from claims_encounters\n\n)\n\n, encounters_by_patient as (\n\n    select patient_id, min(min_date) min_date, max(max_date) max_date,\n        concat(concat(\n              coalesce(min(visit_enc),'')\n            , coalesce(min(proc_enc),''))\n            , coalesce(min(claim_enc),'')\n            ) as qualifying_types\n    from all_encounters\n    group by patient_id\n\n)\n\n, patients_with_age as (\n\n    select\n          p.patient_id\n        , min_date\n        , (datediff(\n        hour,\n        birth_date,\n        e.max_date\n        ) / 8760.0) as age_in_decimal_point\n        , max_date\n        , qualifying_types\n    from dev_thuxuan.quality_measures._stg_patient p\n    inner join encounters_by_patient e\n        on p.patient_id = e.patient_id\n    where p.death_date is null\n\n)\n\n, qualifying_patients as (\n\n    select\n        distinct\n          patients_with_age.patient_id\n        , patients_with_age.age_in_decimal_point as age\n        , pp.performance_period_begin\n        , pp.performance_period_end\n        , pp.measure_id\n        , pp.measure_name\n        , pp.measure_version\n        , 1 as denominator_flag\n    from patients_with_age\n    cross join dev_thuxuan.quality_measures._int_nqf0041__performance_period pp\n    where age_in_decimal_point >= 0.5 --filters patients aged 6 months or older\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , round(cast(age as numeric(28,6)), 1) as age -- ensures age is seen in one decimal point\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(denominator_flag as integer) as denominator_flag\n    from qualifying_patients\n\n)\n\nselect \n      patient_id\n    , age\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , denominator_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_nqf0041_denominator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:06.045029Z", "completed_at": "2024-10-01T16:35:06.071319Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:06.072830Z", "completed_at": "2024-10-01T16:35:07.840223Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.014392852783203, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f7c5-0001-987f0110be22"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0059_denominator", "compiled": true, "compiled_code": "\n\nwith visit_codes as (\n\n    select\n          code\n        , code_system\n    from dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'office visit'\n        , 'home healthcare services'\n        , 'preventive care services established office visit, 18 and up'\n        , 'preventive care services initial office visit, 18 and up'\n        , 'annual wellness visit'\n        , 'telephone visits'\n        , 'nutrition services'\n    )\n\n)\n\n, visits_encounters as (\n\n    select patient_id\n         , coalesce(encounter.encounter_start_date,encounter.encounter_end_date) as min_date\n         , coalesce(encounter.encounter_end_date,encounter.encounter_start_date) as max_date\n    from dev_thuxuan.quality_measures._stg_encounter encounter\n    inner join dev_thuxuan.quality_measures._int_nqf0059__performance_period as pp\n        on coalesce(encounter.encounter_end_date,encounter.encounter_start_date) >= pp.performance_period_begin\n        and  coalesce(encounter.encounter_start_date,encounter.encounter_end_date) <= pp.performance_period_end\n    where lower(encounter_type) in (\n          'home health'\n        , 'office visit'\n        , 'outpatient'\n        , 'outpatient rehabilitation'\n        , 'telehealth'\n    )\n\n)\n\n, procedure_encounters as (\n\n    select \n          patient_id\n        , procedure_date as min_date\n        , procedure_date as max_date\n        from dev_thuxuan.quality_measures._stg_procedure procs\n    inner join dev_thuxuan.quality_measures._int_nqf0059__performance_period  as pp\n        on procedure_date between pp.performance_period_begin and  pp.performance_period_end\n    inner join  visit_codes\n            on coalesce(procs.normalized_code,procs.source_code) = visit_codes.code\n\n)\n\n, claims_encounters as (\n\n    select \n          patient_id\n        , coalesce(claim_start_date,claim_end_date) as min_date\n        , coalesce(claim_end_date,claim_start_date) as max_date\n    from dev_thuxuan.quality_measures._stg_medical_claim medical_claim\n    inner join dev_thuxuan.quality_measures._int_nqf0059__performance_period  as pp on\n        coalesce(claim_end_date,claim_start_date)  >=  pp.performance_period_begin\n         and coalesce(claim_start_date,claim_end_date) <=  pp.performance_period_end\n    inner join  visit_codes\n        on medical_claim.hcpcs_code= visit_codes.code\n\n)\n\n, all_encounters as (\n    select *, 'v' as visit_enc,cast(null as TEXT) as proc_enc, cast(null as TEXT) as claim_enc\n    from visits_encounters\n    union all\n    select *, cast(null as TEXT) as visit_enc, 'p' as proc_enc, cast(null as TEXT) as claim_enc\n    from procedure_encounters\n    union all\n    select *, cast(null as TEXT) as visit_enc,cast(null as TEXT) as proc_enc, 'c' as claim_enc\n    from claims_encounters\n)\n\n, encounters_by_patient as (\n    select patient_id,min(min_date) min_date, max(max_date) max_date,\n        concat(concat(\n            coalesce(min(visit_enc),'')\n            ,coalesce(min(proc_enc),''))\n            ,coalesce(min(claim_enc),'')\n            ) as qualifying_types\n    from all_encounters\n    group by patient_id\n)\n\n, diabetics_codes as (\n\n    select\n          code\n        , code_system\n    from dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'diabetes'\n        , 'hba1c laboratory test'\n    )\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , recorded_date\n        , source_code\n        , source_code_type\n        , normalized_code\n        , normalized_code_type\n    from dev_thuxuan.quality_measures._stg_condition\n\n)\n\n, diabetic_conditions as (\n\n    select\n          conditions.patient_id\n        , conditions.recorded_date\n    from conditions\n    inner join diabetics_codes\n        on coalesce(conditions.normalized_code_type, conditions.source_code_type) = diabetics_codes.code_system\n            and coalesce(conditions.normalized_code, conditions.source_code) = diabetics_codes.code\n\n)\n\n, patients_with_age as (\n    select\n          p.patient_id\n        , min_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.min_date\n        ) / 8760.0)  as min_age\n        , max_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.max_date\n        ) / 8760.0) as max_age\n        , qualifying_types\n    from dev_thuxuan.quality_measures._stg_patient p\n    inner join encounters_by_patient e\n        on p.patient_id = e.patient_id\n    where p.death_date is null\n\n)\n\n, qualifying_patients as (\n\n    select\n        distinct\n          diabetic_conditions.patient_id\n        , patients_with_age.max_age as age\n        , pp.performance_period_begin\n        , pp.performance_period_end\n        , pp.measure_id\n        , pp.measure_name\n        , pp.measure_version\n        , 1 as denominator_flag\n    from diabetic_conditions\n    left join patients_with_age\n        on diabetic_conditions.patient_id = patients_with_age.patient_id\n    cross join dev_thuxuan.quality_measures._int_nqf0059__performance_period pp\n    where max_age >= 18 and min_age <=  75\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(age as integer) as age\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(denominator_flag as integer) as denominator_flag\n    from qualifying_patients\n\n)\n\nselect \n      patient_id\n    , age\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , denominator_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_nqf0059_denominator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:06.056036Z", "completed_at": "2024-10-01T16:35:06.072239Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:06.083870Z", "completed_at": "2024-10-01T16:35:07.984950Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.142477512359619, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f7c5-0001-987f0110be26"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0097_denominator", "compiled": true, "compiled_code": "\n\nwith visit_codes as (\n\n    select\n          concept_name\n        , code\n        , code_system\n    from dev_thuxuan.quality_measures._value_set_codes\n\n)\n\n, valid_concepts as (\n\n    select\n        concept_name\n    from dev_thuxuan.quality_measures._value_set_concepts\n    where concept_name in (\n          'annual wellness visit'\n        , 'care services in long term residential facility'\n        , 'encounter to document medications'\n        , 'home healthcare services'\n        , 'office visit'\n        , 'outpatient'\n        , 'psychoanalysis'\n    )\n\n)\n\n, valid_visit_codes as (\n\n    select\n          visit_codes.concept_name\n        , visit_codes.code\n        , visit_codes.code_system\n    from visit_codes\n    inner join valid_concepts\n        on visit_codes.concept_name = valid_concepts.concept_name\n\n)\n\n, visits_encounters as (\n\n    select patient_id\n         , length_of_stay\n         , encounter.encounter_end_date\n         , coalesce(encounter.encounter_start_date,encounter.encounter_end_date) as min_date\n         , coalesce(encounter.encounter_end_date,encounter.encounter_start_date) as max_date\n    from dev_thuxuan.quality_measures._stg_encounter encounter\n    inner join dev_thuxuan.quality_measures._int_nqf0097__performance_period as pp\n        on coalesce(encounter.encounter_end_date,encounter.encounter_start_date) >= pp.performance_period_begin\n            and coalesce(encounter.encounter_start_date,encounter.encounter_end_date) <= pp.performance_period_end\n    -- all encounter types considered; inpatient encounters are filtered by length of stay being more than 0 days\n\n)\n\n, procedure_encounters as (\n\n    select \n          patient_id\n        , procedure_date as min_date\n        , procedure_date as max_date\n        from dev_thuxuan.quality_measures._stg_procedure procs\n\n    inner join dev_thuxuan.quality_measures._int_nqf0097__performance_period  as pp\n        on procedure_date between pp.performance_period_begin and  pp.performance_period_end\n    inner join valid_visit_codes\n            on coalesce(procs.normalized_code,procs.source_code) = valid_visit_codes.code\n\n)\n\n, claims_encounters as (\n    \n    select patient_id\n    , coalesce(claim_start_date,claim_end_date) as min_date\n    , coalesce(claim_end_date,claim_start_date) as max_date\n    from dev_thuxuan.quality_measures._stg_medical_claim medical_claim\n    inner join dev_thuxuan.quality_measures._int_nqf0097__performance_period  as pp on\n        coalesce(claim_end_date,claim_start_date)  >=  pp.performance_period_begin\n         and coalesce(claim_start_date,claim_end_date) <=  pp.performance_period_end\n    inner join  valid_visit_codes\n        on medical_claim.hcpcs_code= valid_visit_codes.code\n\n)\n\n, all_encounters as (\n\n    select\n          patient_id\n        , min_date\n        , max_date\n        , 'v' as visit_enc\n        , cast(null as TEXT) as proc_enc\n        , cast(null as TEXT) as claim_enc\n    from visits_encounters\n\n    union all\n\n    select\n          patient_id\n        , min_date\n        , max_date\n        , cast(null as TEXT) as visit_enc\n        , 'p' as proc_enc\n        , cast(null as TEXT) as claim_enc\n    from procedure_encounters\n\n    union all\n    \n    select\n          patient_id\n        , min_date\n        , max_date\n        , cast(null as TEXT) as visit_enc\n        , cast(null as TEXT) as proc_enc\n        , 'c' as claim_enc\n    from claims_encounters\n\n)\n\n, encounters_by_patient as (\n\n    select patient_id,min(min_date) min_date, max(max_date) max_date,\n        concat(concat(\n            coalesce(min(visit_enc),'')\n            ,coalesce(min(proc_enc),''))\n            ,coalesce(min(claim_enc),'')\n            ) as qualifying_types\n    from all_encounters\n    group by patient_id\n\n)\n\n, patients_with_age as (\n\n    select\n          p.patient_id\n        , min_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.min_date\n        ) / 8760.0)  as min_age\n        , max_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.max_date\n        ) / 8760.0) as max_age\n        , qualifying_types\n    from dev_thuxuan.quality_measures._stg_patient p\n    inner join encounters_by_patient e\n        on p.patient_id = e.patient_id\n    where p.death_date is null\n\n)\n\n, qualifying_patients as (\n\n    select\n        distinct\n          patients_with_age.patient_id\n        , patients_with_age.max_age as age\n        , pp.performance_period_begin\n        , pp.performance_period_end\n        , pp.measure_id\n        , pp.measure_name\n        , pp.measure_version\n        , visits_encounters.encounter_end_date as discharge_date\n        , 1 as denominator_flag\n    from patients_with_age\n    cross join dev_thuxuan.quality_measures._int_nqf0097__performance_period pp\n    inner join visits_encounters\n        on patients_with_age.patient_id = visits_encounters.patient_id\n    where max_age >= 18\n        and visits_encounters.length_of_stay > 0 --ensures inpatient\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(age as integer) as age\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(discharge_date as date) as discharge_date\n        , cast(denominator_flag as integer) as denominator_flag\n    from qualifying_patients\n\n)\n\nselect \n      patient_id\n    , age\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , discharge_date\n    , denominator_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_nqf0097_denominator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:06.848955Z", "completed_at": "2024-10-01T16:35:06.861940Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:06.862937Z", "completed_at": "2024-10-01T16:35:08.221423Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.5374126434326172, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f01112fc6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ed_classification__int_filter_encounter_with_classification", "compiled": true, "compiled_code": "/*\nFilter conditions to those that were classified and pick the classification\nwith the greatest probability (that's the greatest logic). This logic removes\nany rows that were not classified.\n*/\n\n\nselect\n   a.*\n   , case greatest(edcnnpa, edcnpa, epct, noner, injury, psych, alcohol, drug)\n          when edcnnpa then 'edcnnpa'\n          when edcnpa then 'edcnpa'\n          when epct then 'epct'\n          when noner then 'noner'\n          when injury then 'injury'\n          when psych then 'psych'\n          when alcohol then 'alcohol'\n          when drug then 'drug'\n          else 'unclassified'\n   end as classification\nfrom dev_thuxuan.ed_classification._int_by_provider_parent_organization a\nwhere ed_classification_capture = 1", "relation_name": "dev_thuxuan.ed_classification._int_filter_encounter_with_classification"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:06.401167Z", "completed_at": "2024-10-01T16:35:06.412781Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:06.412781Z", "completed_at": "2024-10-01T16:35:08.517463Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.271857500076294, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d64e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_denominator", "compiled": true, "compiled_code": "\n\nwith performance_period as (\n\n    select\n          measure_id\n        , measure_name\n        , measure_version\n        , performance_period_end\n        , performance_period_begin\n        , performance_period_lookback\n    from dev_thuxuan.quality_measures._int_nqf2372__performance_period\n\n)\n\n, patient as (\n\n    select\n          patient_id\n        , sex\n        , birth_date\n        , death_date\n    from dev_thuxuan.quality_measures._stg_patient\n\n)\n\n, encounters as (\n\n    select\n          patient_id\n        , encounter_type\n        , encounter_start_date\n    from dev_thuxuan.quality_measures._stg_encounter\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n    from dev_thuxuan.quality_measures._stg_medical_claim\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_procedure\n\n)\n\n, visit_codes as (\n\n    select\n          code\n        , code_system\n    from dev_thuxuan.quality_measures._value_set_codes\n    where concept_name in (\n          'Office Visit'\n        , 'Home Healthcare Services'\n        , 'Preventive Care Services Established Office Visit, 18 and Up'\n        , 'Preventive Care Services Initial Office Visit, 18 and Up'\n        , 'Annual Wellness Visit'\n        , 'Telephone Visits'\n        , 'Online Assessments'\n    )\n\n)\n\n, patient_with_age as (\n\n    select\n          patient.patient_id\n        , patient.sex\n        , patient.birth_date\n        , patient.death_date\n        , performance_period.measure_id\n        , performance_period.measure_name\n        , performance_period.measure_version\n        , performance_period.performance_period_begin\n        , performance_period.performance_period_end\n        , performance_period.performance_period_lookback\n        , floor(datediff(\n        hour,\n        patient.birth_date,\n        performance_period.performance_period_begin\n        ) / 8760.0) as age  -- 365*24 hours in a year\n    from patient\n         cross join performance_period\n\n)\n\n/*\n    Filter patient to living women 51 - 74 years of age\n    at the beginning of the measurement period\n*/\n, patient_filtered as (\n\n    select\n          patient_id\n        , age\n        , measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n        , performance_period_lookback\n        , 1 as denominator_flag\n    from patient_with_age\n    where lower(sex) = 'female'\n        and age between 51 and 74\n        and death_date is null\n\n)\n\n/*\n    Filter to qualifying visit types by claim procedures\n*/\n, visit_claims as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n    from medical_claim\n         inner join visit_codes\n            on medical_claim.hcpcs_code = visit_codes.code\n    where visit_codes.code_system = 'hcpcs'\n\n)\n\n/*\n    Filter encounters to qualifying visit type\n*/\n, visit_encounters as (\n\n    select\n          patient_id\n        , encounter_start_date\n    from encounters\n    where lower(encounter_type) in (\n          'home health'\n        , 'office visit'\n        , 'outpatient'\n        , 'outpatient rehabilitation'\n        , 'telehealth'\n        )\n\n)\n\n/*\n    Filter to qualifying visit types by procedure\n*/\n, visit_procedures as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n    from procedures\n         inner join visit_codes\n             on procedures.code = visit_codes.code\n             and procedures.code_type = visit_codes.code_system\n\n)\n\n/*\n    Filter to final eligible population/denominator before exclusions\n    with a qualifying visit during the measurement period\n*/\n, eligible_population as (\n\n    select\n          patient_filtered.patient_id\n        , patient_filtered.age\n        , patient_filtered.measure_id\n        , patient_filtered.measure_name\n        , patient_filtered.measure_version\n        , patient_filtered.performance_period_begin\n        , patient_filtered.performance_period_end\n        , performance_period_lookback\n        , patient_filtered.denominator_flag\n    from patient_filtered\n         left join visit_claims\n            on patient_filtered.patient_id = visit_claims.patient_id\n         left join visit_procedures\n            on patient_filtered.patient_id = visit_procedures.patient_id\n         left join visit_encounters\n            on patient_filtered.patient_id = visit_encounters.patient_id\n    where (\n        visit_claims.claim_start_date\n            between patient_filtered.performance_period_begin\n            and patient_filtered.performance_period_end\n        or visit_claims.claim_end_date\n            between patient_filtered.performance_period_begin\n            and patient_filtered.performance_period_end\n        or visit_procedures.procedure_date\n            between patient_filtered.performance_period_begin\n            and patient_filtered.performance_period_end\n        or visit_encounters.encounter_start_date\n            between patient_filtered.performance_period_begin\n            and patient_filtered.performance_period_end\n    )\n\n)\n\n, add_data_types as (\n\n    select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(age as integer) as age\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(performance_period_lookback as date) as performance_period_lookback\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(denominator_flag as integer) as denominator_flag\n    from eligible_population\n\n)\n\n select distinct\n      patient_id\n    , age\n    , performance_period_begin\n    , performance_period_end\n    , performance_period_lookback\n    , measure_id\n    , measure_name\n    , measure_version\n    , denominator_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_nqf2372_denominator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:06.033941Z", "completed_at": "2024-10-01T16:35:06.055043Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:06.067241Z", "completed_at": "2024-10-01T16:35:08.571014Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.6811251640319824, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d64a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0053_denominator", "compiled": true, "compiled_code": "\n\nwith visit_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_thuxuan.quality_measures._value_set_codes as value_sets\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_procedure\n\n)\n\n, visits_encounters as (\n\n    select \n           patient_id\n         , coalesce(encounter.encounter_start_date,encounter.encounter_end_date) as min_date\n         , coalesce(encounter.encounter_end_date,encounter.encounter_start_date) as max_date\n         , encounter_type\n    from dev_thuxuan.quality_measures._stg_encounter as encounter\n    inner join dev_thuxuan.quality_measures._int_nqf0053__performance_period as pp\n        on coalesce(encounter.encounter_end_date,encounter.encounter_start_date) >= pp.performance_period_begin\n        and  coalesce(encounter.encounter_start_date,encounter.encounter_end_date) <= pp.performance_period_end\n\n)\n\n, procedure_encounters as (\n\n    select \n          patient_id\n        , procedure_date as min_date\n        , procedure_date as max_date\n        from dev_thuxuan.quality_measures._stg_procedure procs\n    inner join dev_thuxuan.quality_measures._int_nqf0053__performance_period  as pp\n        on procedure_date between pp.performance_period_begin and  pp.performance_period_end\n    inner join  visit_codes\n            on coalesce(procs.normalized_code,procs.source_code) = visit_codes.code\n\n)\n\n, claims_encounters as (\n\n    select \n          patient_id\n        , coalesce(claim_start_date,claim_end_date) as min_date\n        , coalesce(claim_end_date,claim_start_date) as max_date\n        , place_of_service_code\n    from dev_thuxuan.quality_measures._stg_medical_claim medical_claim\n    inner join dev_thuxuan.quality_measures._int_nqf0053__performance_period  as pp on\n        coalesce(claim_end_date,claim_start_date)  >=  pp.performance_period_begin\n         and coalesce(claim_start_date,claim_end_date) <=  pp.performance_period_end\n    inner join  visit_codes\n        on medical_claim.hcpcs_code= visit_codes.code\n\n)\n\n, all_encounters as (\n\n    select\n          patient_id\n        , min_date\n        , max_date\n        , 'v' as visit_enc,cast(null as TEXT) as proc_enc, cast(null as TEXT) as claim_enc\n    from visits_encounters\n    union all\n    select\n          patient_id\n        , min_date\n        , max_date\n        , cast(null as TEXT) as visit_enc, 'p' as proc_enc, cast(null as TEXT) as claim_enc\n    from procedure_encounters\n    union all\n    select\n          patient_id\n        , min_date\n        , max_date\n        , cast(null as TEXT) as visit_enc,cast(null as TEXT) as proc_enc, 'c' as claim_enc\n    from claims_encounters\n\n)\n\n, encounters_by_patient as (\n\n    select\n          patient_id\n        , min(min_date) min_date\n        , max(max_date) max_date\n        , concat(concat(\n            coalesce(min(visit_enc),'')\n            ,coalesce(min(proc_enc),''))\n            ,coalesce(min(claim_enc),'')\n            ) as qualifying_types\n    from all_encounters\n    group by patient_id\n\n)\n\n, bone_fracture_codes as (\n\n    select\n          code\n        , code_system\n    from dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) = 'fracture diagnoses'\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , encounter_id\n        , recorded_date\n        , source_code\n        , source_code_type\n        , normalized_code\n        , normalized_code_type\n    from dev_thuxuan.quality_measures._stg_condition\n\n)\n\n, bone_fracture_conditions as (\n\n    select\n          conditions.patient_id\n        , conditions.claim_id\n        , conditions.encounter_id\n        , conditions.recorded_date\n        , conditions.source_code\n        , conditions.source_code_type\n    from conditions\n    inner join bone_fracture_codes\n        on coalesce(conditions.normalized_code_type, conditions.source_code_type) = bone_fracture_codes.code_system\n            and coalesce(conditions.normalized_code, conditions.source_code) = bone_fracture_codes.code\n\n)\n\n, patients_with_age as (\n\n    select\n          patient.patient_id\n        , patient.sex\n        , min_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.min_date\n        ) / 8760.0)  as min_age\n        , max_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.max_date\n        ) / 8760.0) as max_age\n        , qualifying_types\n    from dev_thuxuan.quality_measures._stg_patient patient\n    inner join encounters_by_patient e\n        on patient.patient_id = e.patient_id\n    where patient.death_date is null\n\n)\n\n, qualifying_patients_w_fractures as (\n\n    select\n        distinct\n          bone_fracture_conditions.patient_id\n        , bone_fracture_conditions.recorded_date\n        , patients_with_age.max_age as age\n        , pp.performance_period_begin\n        , pp.performance_period_end\n        , pp.measure_id\n        , pp.measure_name\n        , pp.measure_version\n        , 1 as denominator_flag\n    from bone_fracture_conditions\n    left join patients_with_age\n        on bone_fracture_conditions.patient_id = patients_with_age.patient_id\n    cross join dev_thuxuan.quality_measures._int_nqf0053__performance_period pp\n    where max_age >= 50 and min_age <=  85\n        and bone_fracture_conditions.recorded_date between\n            \n\n    dateadd(\n        month,\n        -6,\n        performance_period_begin\n        )\n\n\n            and\n                pp.lookback_period_june\n        and lower(patients_with_age.sex) = 'female'\n\n)\n\n, fracture_procedures as (\n\n    select\n        procedures.*\n    from procedures\n    inner join visit_codes\n        on procedures.code = visit_codes.code\n            and procedures.code_type = visit_codes.code_system\n    inner join dev_thuxuan.quality_measures._int_nqf0053__performance_period as pp\n        on procedures.procedure_date \n            between pp.performance_period_begin and pp.performance_period_end\n    where lower(visit_codes.concept_name) = 'fracture procedures'\n\n)\n\n, qualifying_patients_w_encounter as (\n\n    select\n        qualifying_patients_w_fractures.*\n    from qualifying_patients_w_fractures\n    inner join visits_encounters\n        on qualifying_patients_w_fractures.patient_id = visits_encounters.patient_id\n    where \n        lower(visits_encounters.encounter_type) in (\n              'acute inpatient'\n            , 'annual wellness visit'\n            , 'emergency department visit'\n            , 'emergency department'\n            , 'home healthcare services'\n            , 'office visit'\n            , 'preventive care services established office visit, 18 and up'\n            , 'preventive care services initial office visit, 18 and up'\n            , 'emergency department evaluation and management visit'\n            , 'outpatient'\n        )\n)\n\n, qualifying_patients_w_procedure as (\n\n    select\n        qualifying_patients_w_fractures.*\n    from qualifying_patients_w_fractures\n    inner join fracture_procedures\n        on qualifying_patients_w_fractures.patient_id = fracture_procedures.patient_id\n\n)\n\n, qualifying_patients as (\n\n    select\n        distinct\n        qualifying_patients_w_encounter.*\n    from qualifying_patients_w_encounter\n    left join qualifying_patients_w_procedure\n        on qualifying_patients_w_encounter.patient_id = qualifying_patients_w_procedure.patient_id\n    left join claims_encounters\n        on qualifying_patients_w_encounter.patient_id = claims_encounters.patient_id\n    where (cast(claims_encounters.place_of_service_code as TEXT) not in ('21')\n        or claims_encounters.patient_id is null)\n\n    union all\n\n    select\n        distinct\n        qualifying_patients_w_procedure.*\n    from qualifying_patients_w_procedure\n    left join qualifying_patients_w_encounter\n        on qualifying_patients_w_encounter.patient_id = qualifying_patients_w_procedure.patient_id\n    where qualifying_patients_w_encounter.patient_id is null\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(recorded_date as date) as recorded_date\n        , cast(age as integer) as age\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(denominator_flag as integer) as denominator_flag\n    from qualifying_patients\n\n)\n\nselect \n      patient_id\n    , recorded_date  \n    , age\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , denominator_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_nqf0053_denominator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:08.053347Z", "completed_at": "2024-10-01T16:35:08.060346Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:08.060346Z", "completed_at": "2024-10-01T16:35:09.077111Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.16386079788208, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b646"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.readmissions__encounter_overlap", "compiled": true, "compiled_code": "\n\n-- Here we give a list of all pairs of encounters\n-- that have some date overlap.\n\n\nwith encounters_with_row_num as (\nselect\n    encounter_id,\n    patient_id,\n    admit_date,\n    discharge_date,\n    row_number() over (\n        partition by patient_id order by encounter_id\n\t) as row_num\nfrom dev_thuxuan.readmissions._int_encounter\n),\n\n\ncartesian as (\nselect\n    aa.encounter_id as encounter_id_A,\n    bb.encounter_id as encounter_id_B,\n    aa.patient_id,\n    aa.admit_date as Ai,\n    aa.discharge_date as Af,\n    bb.admit_date as Bi,\n    bb.discharge_date as Bf,\n    case\n        when (aa.admit_date between bb.admit_date and bb.discharge_date) or (aa.discharge_date between bb.admit_date and bb.discharge_date) or\n             (bb.admit_date between aa.admit_date and aa.discharge_date) or (bb.discharge_date between aa.admit_date and aa.discharge_date)\n        then 1\n        else 0\n    end as overlap\n    from encounters_with_row_num aa\n    left join encounters_with_row_num bb\n    on aa.patient_id = bb.patient_id and aa.row_num < bb.row_num\n),\n\n\noverlapping_pairs\nas\n(\n    select\n        patient_id,\n        encounter_id_A,\n\tencounter_id_B\n    from cartesian\n    where overlap = 1\n)\n\n\n\nselect *, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom overlapping_pairs", "relation_name": "dev_thuxuan.readmissions._int_encounter_overlap"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:08.192629Z", "completed_at": "2024-10-01T16:35:08.198584Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:08.198584Z", "completed_at": "2024-10-01T16:35:09.373090Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.3076961040496826, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f7c5-0001-987f0110be2a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.readmissions__encounter_with_ccs", "compiled": true, "compiled_code": "\n\n-- Here we add a CCS diagnosis category to\n-- every encounter that we can add a CCS diagnosis category to.\n-- The CCS diagnosis category is found using\n-- the encounter's primary diagnosis code.\n\n\nselect\n    aa.encounter_id,\n    aa.patient_id,\n    aa.admit_date,\n    aa.discharge_date,\n    aa.discharge_disposition_code,\n    aa.facility_id,\n    aa.ms_drg_code,\n    aa.paid_amount,\n    aa.primary_diagnosis_code,\n\n    case\n      when bb.icd_10_cm is not null then 1\n      else 0\n    end as valid_primary_diagnosis_code_flag,\n\n    cc.ccs_diagnosis_category,\n\n    '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\n\nfrom\n    dev_thuxuan.readmissions._int_encounter aa\n    left join dev_thuxuan.terminology.icd_10_cm bb\n    on aa.primary_diagnosis_code = bb.icd_10_cm\n    left join dev_thuxuan.readmissions._value_set_icd_10_cm_to_ccs cc\n    on aa.primary_diagnosis_code = cc.icd_10_cm", "relation_name": "dev_thuxuan.readmissions._int_encounter_with_ccs"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:08.391345Z", "completed_at": "2024-10-01T16:35:08.397449Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:08.397449Z", "completed_at": "2024-10-01T16:35:09.518833Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.3535659313201904, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f7c5-0001-987f0110be2e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.readmissions__index_discharge_requirement", "compiled": true, "compiled_code": "\n\n-- Here we list encounter_ids that meet\n-- the discharge_disposition_code requirements to be an\n-- index admission:\n--    *** Must NOT be discharged to another acute care hospital\n--    *** Must NOT have left against medical advice\n--    *** Patient must be alive at discharge\n\n\n\nwith all_invalid_discharges as (\nselect encounter_id\nfrom dev_thuxuan.readmissions._int_encounter\nwhere discharge_disposition_code in (\n     '02' -- Patient discharged/transferred to other short term general hospital for inpatient care.\n    ,'07' -- Patient left against medical advice\n    ,'20' -- Patient died\n    )\n)\n\n-- All discharges that meet the discharge_disposition_code\n-- requirements to be an index admission\nselect a.encounter_id, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.readmissions._int_encounter a\nleft join all_invalid_discharges b\n    on a.encounter_id = b.encounter_id\nwhere b.encounter_id is null", "relation_name": "dev_thuxuan.readmissions._int_index_discharge_requirement"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:08.677032Z", "completed_at": "2024-10-01T16:35:08.684542Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:08.685542Z", "completed_at": "2024-10-01T16:35:09.864985Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.3450376987457275, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f01112fca"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.readmissions__index_time_requirement", "compiled": true, "compiled_code": "\n\n-- Here we list encounter_ids that meet\n-- the time requirement to be an index admission:\n-- The discharge date must be at least 30 days\n-- earlier than the last discharge date available\n-- in the dataset.\n\n\nwith cte as (\n  select max(discharge_date) max_discharge\n  from dev_thuxuan.readmissions._int_encounter\n)\n\nselect encounter_id\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.readmissions._int_encounter\ncross join cte\nwhere discharge_date <= \n\n    dateadd(\n        day,\n        -30,\n        cte.max_discharge\n        )\n\n", "relation_name": "dev_thuxuan.readmissions._int_index_time_requirement"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:08.718112Z", "completed_at": "2024-10-01T16:35:08.730631Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:08.731632Z", "completed_at": "2024-10-01T16:35:10.665224Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.074495315551758, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d652"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm438_denominator", "compiled": true, "compiled_code": "\n\nwith patients_with_ascvd as (\n\n    select \n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , 1 as criteria\n    from dev_thuxuan.quality_measures._int_cqm438_denominator_criteria1\n\n)\n\n, patients_with_cholesterol as (\n\n    select \n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , 2 as criteria\n    from dev_thuxuan.quality_measures._int_cqm438_denominator_criteria2\n\n)\n\n, patients_with_diabetes as (\n\n    select \n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , 3 as criteria\n    from dev_thuxuan.quality_measures._int_cqm438_denominator_criteria3\n\n)\n\n, visit_codes as (\n\n    select\n          code\n        , code_system\n    from dev_thuxuan.quality_measures._value_set_codes \n    where lower(concept_name) in (\n          'annual wellness visit'\n        , 'office visit'\n        , 'outpatient consultation'\n        , 'preventive care services established office visit, 18 and up'\n        , 'preventive care services individual counseling'\n        , 'preventive care services initial office visit, 18 and up'\n        , 'outpatient encounters for preventive care'\n    )\n\n)\n\n, visits_encounters as (\n\n    select patient_id\n         , coalesce(encounter.encounter_start_date,encounter.encounter_end_date) as min_date\n         , coalesce(encounter.encounter_end_date,encounter.encounter_start_date) as max_date\n    from dev_thuxuan.quality_measures._stg_encounter encounter\n    inner join dev_thuxuan.quality_measures._int_cqm438__performance_period as pp\n        on coalesce(encounter.encounter_end_date,encounter.encounter_start_date) >= pp.performance_period_begin\n        and  coalesce(encounter.encounter_start_date,encounter.encounter_end_date) <= pp.performance_period_end\n    where lower(encounter_type) in (\n          'home health'\n        , 'office visit'\n        , 'outpatient'\n        , 'outpatient rehabilitation'\n        , 'telehealth'\n    )\n\n)\n\n, procedure_encounters as (\n\n    select \n          patient_id\n        , procedure_date as min_date\n        , procedure_date as max_date\n    from dev_thuxuan.quality_measures._stg_procedure procedures\n    inner join dev_thuxuan.quality_measures._int_cqm438__performance_period  as pp\n        on procedure_date between pp.performance_period_begin and  pp.performance_period_end\n    inner join visit_codes\n        on coalesce(procedures.normalized_code,procedures.source_code) = visit_codes.code\n\n)\n\n, claims_encounters as (\n    \n    select patient_id\n    , coalesce(claim_start_date,claim_end_date) as min_date\n    , coalesce(claim_end_date,claim_start_date) as max_date\n    from dev_thuxuan.quality_measures._stg_medical_claim medical_claim\n    inner join dev_thuxuan.quality_measures._int_cqm438__performance_period  as pp on\n        coalesce(claim_end_date,claim_start_date)  >=  pp.performance_period_begin\n         and coalesce(claim_start_date,claim_end_date) <=  pp.performance_period_end\n    inner join visit_codes\n        on medical_claim.hcpcs_code= visit_codes.code\n\n)\n\n, all_encounters as (\n\n    select *, 'v' as visit_enc,cast(null as TEXT) as proc_enc, cast(null as TEXT) as claim_enc\n    from visits_encounters\n\n    union all\n\n    select *, cast(null as TEXT) as visit_enc, 'p' as proc_enc, cast(null as TEXT) as claim_enc\n    from procedure_encounters\n\n    union all\n    \n    select *, cast(null as TEXT) as visit_enc, cast(null as TEXT) as proc_enc, 'c' as claim_enc\n    from claims_encounters\n\n)\n\n, encounters_by_patient as (\n\n    select patient_id,min(min_date) min_date, max(max_date) max_date,\n        concat(concat(\n            coalesce(min(visit_enc),'')\n            ,coalesce(min(proc_enc),''))\n            ,coalesce(min(claim_enc),'')\n            ) as qualifying_types\n    from all_encounters\n    group by patient_id\n\n)\n\n, patients_with_age as (\n\n    select\n          p.patient_id\n        , floor(datediff(\n        hour,\n        birth_date,\n        performance_period_begin\n        ) / 8760.0)  as age\n    from dev_thuxuan.quality_measures._stg_patient p\n    inner join encounters_by_patient e\n        on p.patient_id = e.patient_id\n            and p.death_date is null\n    cross join dev_thuxuan.quality_measures._int_cqm438__performance_period\n\n)\n\n, qualifying_patients_from_criteria1 as (\n\n    select\n        distinct\n          patients_with_ascvd.patient_id\n        , patients_with_age.age as age\n        , patients_with_ascvd.performance_period_begin\n        , patients_with_ascvd.performance_period_end\n        , patients_with_ascvd.measure_id\n        , patients_with_ascvd.measure_name\n        , patients_with_ascvd.measure_version\n        , 1 as denominator_flag\n    from patients_with_ascvd\n    left join patients_with_age\n    on patients_with_ascvd.patient_id = patients_with_age.patient_id\n    where age is not null\n\n)\n\n, qualifying_patients_from_criteria2 as (\n\n    select\n        distinct\n          patients_with_cholesterol.patient_id\n        , patients_with_age.age as age\n        , patients_with_cholesterol.performance_period_begin\n        , patients_with_cholesterol.performance_period_end\n        , patients_with_cholesterol.measure_id\n        , patients_with_cholesterol.measure_name\n        , patients_with_cholesterol.measure_version\n        , 1 as denominator_flag\n    from patients_with_cholesterol\n    left join patients_with_age\n    on patients_with_cholesterol.patient_id = patients_with_age.patient_id\n    where age between 20 and 75\n\n)\n\n, qualifying_patients_from_criteria3 as (\n\n    select\n        distinct\n          patients_with_diabetes.patient_id\n        , patients_with_age.age as age\n        , patients_with_diabetes.performance_period_begin\n        , patients_with_diabetes.performance_period_end\n        , patients_with_diabetes.measure_id\n        , patients_with_diabetes.measure_name\n        , patients_with_diabetes.measure_version\n        , 1 as denominator_flag\n    from patients_with_diabetes\n    left join patients_with_age\n    on patients_with_diabetes.patient_id = patients_with_age.patient_id\n    where age between 40 and 75\n\n)\n\n, final_denominator as (\n    \n    select\n          patient_id\n        , age\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from qualifying_patients_from_criteria1\n\n    union all\n\n    select\n          patient_id\n        , age\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from qualifying_patients_from_criteria2\n    \n    union all\n\n    select\n          patient_id\n        , age\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from qualifying_patients_from_criteria3\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(age as integer) as age\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(denominator_flag as integer) as denominator_flag\n    from final_denominator\n\n)\n\nselect \n      patient_id\n    , age\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , denominator_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_cqm438_denominator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:09.224143Z", "completed_at": "2024-10-01T16:35:09.240210Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:09.241221Z", "completed_at": "2024-10-01T16:35:11.030409Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.9357728958129883, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d656"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_shared_exclusions_advanced_illness", "compiled": true, "compiled_code": "\n\nwith patients_with_frailty as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_thuxuan.quality_measures._int_shared_exclusions_frailty\n\n)\n\n, exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'advanced illness'\n        , 'acute inpatient'\n        , 'encounter inpatient'\n        , 'outpatient'\n        , 'observation'\n        , 'emergency department visit'\n        , 'nonacute inpatient'\n    )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_condition\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from dev_thuxuan.quality_measures._stg_medical_claim\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_procedure\n\n)\n\n, condition_exclusions as (\n\n    select\n          conditions.patient_id\n        , conditions.claim_id\n        , conditions.recorded_date\n        , exclusion_codes.concept_name\n    from conditions\n         inner join exclusion_codes\n            on conditions.code = exclusion_codes.code\n            and conditions.code_type = exclusion_codes.code_system\n    where lower(exclusion_codes.concept_name) = 'advanced illness'\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n        , exclusion_codes.concept_name\n    from medical_claim\n         inner join exclusion_codes\n            on medical_claim.hcpcs_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'hcpcs'\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name\n    from procedures\n         inner join exclusion_codes\n             on procedures.code = exclusion_codes.code\n             and procedures.code_type = exclusion_codes.code_system\n\n)\n\n, acute_inpatient as (\n\n    select distinct\n          patients_with_frailty.patient_id\n        , coalesce(\n              med_claim_exclusions.claim_start_date\n            , med_claim_exclusions.claim_end_date\n          ) as exclusion_date\n        , patients_with_frailty.exclusion_reason || ' with ' || med_claim_exclusions.concept_name || ' and ' || condition_exclusions.concept_name as exclusion_reason\n        , med_claim_exclusions.claim_start_date\n        , med_claim_exclusions.claim_end_date\n        , cast(null as date) as procedure_date\n    from patients_with_frailty\n         inner join med_claim_exclusions\n            on patients_with_frailty.patient_id = med_claim_exclusions.patient_id\n         inner join condition_exclusions\n            on med_claim_exclusions.claim_id = condition_exclusions.claim_id\n    where lower(med_claim_exclusions.concept_name) = 'acute inpatient'\n\n    union all\n\n    select distinct\n          patients_with_frailty.patient_id\n        , procedure_exclusions.procedure_date as exclusion_date\n        , patients_with_frailty.exclusion_reason || ' with ' || procedure_exclusions.concept_name || ' and ' || condition_exclusions.concept_name as exclusion_reason\n        , cast(null as date) as claim_start_date\n        , cast(null as date) as claim_end_date\n        , procedure_exclusions.procedure_date\n    from patients_with_frailty\n         inner join procedure_exclusions\n         on patients_with_frailty.patient_id = procedure_exclusions.patient_id\n         inner join condition_exclusions\n         on procedure_exclusions.patient_id = condition_exclusions.patient_id\n         and procedure_exclusions.procedure_date = condition_exclusions.recorded_date\n    where lower(procedure_exclusions.concept_name) = 'acute inpatient'\n\n)\n\n, nonacute_outpatient as (\n\n    select distinct\n          patients_with_frailty.patient_id\n        , coalesce(\n              med_claim_exclusions.claim_start_date\n            , med_claim_exclusions.claim_end_date\n          ) as exclusion_date\n        , patients_with_frailty.exclusion_reason || ' with ' || med_claim_exclusions.concept_name || ' and ' || condition_exclusions.concept_name as exclusion_reason\n        , med_claim_exclusions.claim_start_date\n        , med_claim_exclusions.claim_end_date\n        , cast(null as date) as procedure_date\n    from patients_with_frailty\n         inner join med_claim_exclusions\n            on patients_with_frailty.patient_id = med_claim_exclusions.patient_id\n         inner join condition_exclusions\n            on med_claim_exclusions.claim_id = condition_exclusions.claim_id\n    where lower(med_claim_exclusions.concept_name) in (\n              'encounter inpatient'\n            , 'outpatient'\n            , 'observation'\n            , 'emergency department visit'\n            , 'nonacute inpatient'\n        )\n\n    union all\n\n    select distinct\n          patients_with_frailty.patient_id\n        , procedure_exclusions.procedure_date as exclusion_date\n        , patients_with_frailty.exclusion_reason || ' with ' || procedure_exclusions.concept_name || ' and ' || condition_exclusions.concept_name as exclusion_reason\n        , cast(null as date) as claim_start_date\n        , cast(null as date) as claim_end_date\n        , procedure_exclusions.procedure_date\n    from patients_with_frailty\n         inner join procedure_exclusions\n         on patients_with_frailty.patient_id = procedure_exclusions.patient_id\n         inner join condition_exclusions\n         on procedure_exclusions.patient_id = condition_exclusions.patient_id\n         and procedure_exclusions.procedure_date = condition_exclusions.recorded_date\n    where lower(procedure_exclusions.concept_name) in (\n          'encounter inpatient'\n        , 'outpatient'\n        , 'observation'\n        , 'emergency department visit'\n        , 'nonacute inpatient'\n    )\n\n)\n\n, exclusions_unioned as (\n\n    select\n          acute_inpatient.patient_id\n        , acute_inpatient.exclusion_date\n        , acute_inpatient.exclusion_reason\n        , acute_inpatient.claim_start_date\n        , acute_inpatient.claim_end_date\n        , acute_inpatient.procedure_date\n        , 'acute_inpatient' as patient_type\n    from acute_inpatient\n\n    union all\n\n    select\n          nonacute_outpatient.patient_id\n        , nonacute_outpatient.exclusion_date\n        , nonacute_outpatient.exclusion_reason\n        , nonacute_outpatient.claim_start_date\n        , nonacute_outpatient.claim_end_date\n        , nonacute_outpatient.procedure_date\n        , 'nonacute_outpatient' as patient_type\n    from nonacute_outpatient\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , 'advanced_illness' as exclusion_type\n    , claim_start_date\n    , claim_end_date\n    , procedure_date\n    , patient_type\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom exclusions_unioned", "relation_name": "dev_thuxuan.quality_measures._int_shared_exclusions_advanced_illness"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:09.506245Z", "completed_at": "2024-10-01T16:35:09.520886Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:09.521800Z", "completed_at": "2024-10-01T16:35:11.032409Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.6585431098937988, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b64a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_shared_exclusions_dementia", "compiled": true, "compiled_code": "\n\nwith patients_with_frailty as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_thuxuan.quality_measures._int_shared_exclusions_frailty\n\n)\n\n, exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in (\n        'dementia medications'\n    )\n\n)\n\n, medications as (\n\n    select\n          patient_id\n        , dispensing_date\n        , source_code_type\n        , source_code\n        , ndc_code\n        , rxnorm_code\n    from dev_thuxuan.quality_measures._stg_medication\n\n)\n\n, pharmacy_claim as (\n\n    select\n          patient_id\n        , dispensing_date\n        , ndc_code\n        , paid_date\n    from dev_thuxuan.quality_measures._stg_pharmacy_claim\n\n)\n\n, medication_exclusions as (\n\n    select\n          medications.patient_id\n        , medications.dispensing_date\n        , exclusion_codes.concept_name\n    from medications\n         inner join exclusion_codes\n            on medications.ndc_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'ndc'\n\n    union all\n\n    select\n          medications.patient_id\n        , medications.dispensing_date\n        , exclusion_codes.concept_name\n    from medications\n         inner join exclusion_codes\n            on medications.rxnorm_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'rxnorm'\n\n    union all\n\n    select\n          medications.patient_id\n        , medications.dispensing_date\n        , exclusion_codes.concept_name\n    from medications\n         inner join exclusion_codes\n            on medications.source_code = exclusion_codes.code\n            and medications.source_code_type = exclusion_codes.code_system\n\n)\n\n, pharmacy_claim_exclusions as (\n\n    select\n          pharmacy_claim.patient_id\n        , pharmacy_claim.dispensing_date\n        , pharmacy_claim.ndc_code\n        , pharmacy_claim.paid_date\n        , exclusion_codes.concept_name\n    from pharmacy_claim\n         inner join exclusion_codes\n            on pharmacy_claim.ndc_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'ndc'\n\n)\n\n, frailty_with_dementia as (\n\n    select\n          patients_with_frailty.patient_id\n        , patients_with_frailty.exclusion_date\n        , patients_with_frailty.exclusion_reason || ' with ' || pharmacy_claim_exclusions.concept_name as exclusion_reason\n        , pharmacy_claim_exclusions.dispensing_date\n        , pharmacy_claim_exclusions.paid_date\n    from patients_with_frailty\n         inner join pharmacy_claim_exclusions\n            on patients_with_frailty.patient_id = pharmacy_claim_exclusions.patient_id\n\n    union all\n\n    select\n          patients_with_frailty.patient_id\n        , medication_exclusions.dispensing_date as exclusion_date\n        , patients_with_frailty.exclusion_reason || ' with ' || medication_exclusions.concept_name as exclusion_reason\n        , medication_exclusions.dispensing_date\n        , null as paid_date\n    from patients_with_frailty\n         inner join medication_exclusions\n         on patients_with_frailty.patient_id = medication_exclusions.patient_id\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , 'dementia' as exclusion_type\n    , dispensing_date\n    , paid_date\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom frailty_with_dementia", "relation_name": "dev_thuxuan.quality_measures._int_shared_exclusions_dementia"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:09.751429Z", "completed_at": "2024-10-01T16:35:09.763986Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:09.765006Z", "completed_at": "2024-10-01T16:35:11.456355Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.8214731216430664, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f01112fce"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud", "compiled": true, "compiled_code": "with chronic_conditions as (\n\n    select * from dev_thuxuan.chronic_conditions._value_set_cms_chronic_conditions_hierarchy\n    where condition = 'Opioid Use Disorder (OUD)'\n\n)\n\n, patient_conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date as start_date\n        , normalized_code_type as code_type\n        , replace(normalized_code,'.','') as code\n        , data_source\n    from dev_thuxuan.test.cms_chronic_conditions__stg_core__condition\n\n)\n\n, patient_medications as (\n\n    select\n          patient_id\n        , claim_id\n        , paid_date as start_date\n        , replace(ndc_code,'.','') as code\n        , data_source\n    from dev_thuxuan.test.cms_chronic_conditions__stg_core__pharmacy_claim\n\n)\n\n, patient_procedures as (\n\n    select\n          patient_id\n        , claim_id\n        , procedure_date as start_date\n        , normalized_code_type as code_type\n        , replace(normalized_code,'.','') as code\n        , data_source\n    from dev_thuxuan.test.cms_chronic_conditions__stg_core__procedure\n\n)\n\n, inclusions_diagnosis as (\n\n    select\n          patient_conditions.patient_id\n        , patient_conditions.claim_id\n        , patient_conditions.start_date\n        , patient_conditions.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_conditions\n         inner join chronic_conditions\n             on patient_conditions.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n\n)\n\n, inclusions_procedure as (\n\n    select\n          patient_procedures.patient_id\n        , patient_procedures.claim_id\n        , patient_procedures.start_date\n        , patient_procedures.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_procedures\n         inner join chronic_conditions\n             on patient_procedures.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system in ('ICD-10-PCS', 'HCPCS')\n\n)\n\n/*\n    Exclusion logic: Naltrexone NDCs are excluded if there is evidence of an\n    alcohol or other drug use disorder where opioid DX is not present\n\n    This CTE excludes medication encounters with the exception codes for\n    Naltrexone. Those encounters will be evaluated separately.\n*/\n, inclusions_medication as (\n\n    select\n          patient_medications.patient_id\n        , patient_medications.claim_id\n        , patient_medications.start_date\n        , patient_medications.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_medications\n         inner join chronic_conditions\n             on patient_medications.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'NDC'\n    and chronic_conditions.code not in ('00056001122', '00056001130', '00056001170', '00056007950', '00056008050', '00185003901', '00185003930', '00406009201', '00406009203', '00406117001', '00406117003', '00555090201', '00555090202', '00904703604', '16729008101', '16729008110', '42291063230', '43063059115', '47335032683', '47335032688', '50090286600', '50436010501', '51224020630', '51224020650', '51285027501', '51285027502', '52152010502', '52152010504', '52152010530', '54868557400', '63459030042', '63629104601', '63629104701', '65694010003', '65694010010', '65757030001', '65757030202', '68084029111', '68084029121', '68094085362', '68115068030')\n\n)\n\n/*\n    Exclusion logic: Naltrexone NDCs are excluded if there is evidence of an\n    alcohol or other drug use disorder where opioid DX is not present\n\n    This CTE includes patients with evidence of the chronic conditions Alcohol\n    Use Disorders or Drug Use Disorders.\n*/\n, exclusions_other_chronic_conditions as (\n\n    select distinct patient_id\n    from dev_thuxuan.chronic_conditions._int_cms_chronic_condition_all\n    where condition in (\n          'Alcohol Use Disorders'\n        , 'Drug Use Disorders'\n    )\n\n)\n\n/*\n    Exclusion logic: Naltrexone NDCs are excluded if there is evidence of an\n    alcohol or other drug use disorder where opioid DX is not present\n\n    This CTE creates the exclusion list which consists of patients with\n    medication encounters for Naltrexone having Alcohol Use Disorder or Drug\n    Use Disorder and missing the Opioid Use Disorder diagnosis codes.\n*/\n, exclusions_medication as (\n    select distinct\n          patient_medications.patient_id\n    from patient_medications\n         inner join chronic_conditions\n             on patient_medications.code = chronic_conditions.code\n         inner join exclusions_other_chronic_conditions\n             on patient_medications.patient_id = exclusions_other_chronic_conditions.patient_id\n         left join inclusions_diagnosis\n             on patient_medications.patient_id = inclusions_diagnosis.patient_id\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'NDC'\n    and chronic_conditions.code in ('00056001122', '00056001130', '00056001170', '00056007950', '00056008050', '00185003901', '00185003930', '00406009201', '00406009203', '00406117001', '00406117003', '00555090201', '00555090202', '00904703604', '16729008101', '16729008110', '42291063230', '43063059115', '47335032683', '47335032688', '50090286600', '50436010501', '51224020630', '51224020650', '51285027501', '51285027502', '52152010502', '52152010504', '52152010530', '54868557400', '63459030042', '63629104601', '63629104701', '65694010003', '65694010010', '65757030001', '65757030202', '68084029111', '68084029121', '68094085362', '68115068030')\n    and inclusions_diagnosis.patient_id is null\n\n)\n\n\n, inclusions_unioned as (\n\n    select * from inclusions_diagnosis\n    union distinct\n    select * from inclusions_procedure\n    union distinct\n    select * from inclusions_medication\n\n)\n\n\nselect distinct\n      cast(inclusions_unioned.patient_id as TEXT) as patient_id\n    , cast(inclusions_unioned.claim_id as TEXT) as claim_id\n    , cast(inclusions_unioned.start_date as date) as start_date\n    , cast(inclusions_unioned.chronic_condition_type as TEXT) as chronic_condition_type\n    , cast(inclusions_unioned.condition_category as TEXT) as condition_category\n    , cast(inclusions_unioned.condition as TEXT) as condition\n    , cast(inclusions_unioned.data_source as TEXT) as data_source\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom inclusions_unioned\n     left join exclusions_medication\n         on inclusions_unioned.patient_id = exclusions_medication.patient_id\nwhere exclusions_medication.patient_id is null", "relation_name": "dev_thuxuan.chronic_conditions._int_cms_chronic_condition_oud"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:10.027117Z", "completed_at": "2024-10-01T16:35:10.035025Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:10.035025Z", "completed_at": "2024-10-01T16:35:11.485358Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.6436145305633545, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f7c5-0001-987f0110be32"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__pmpm_payer", "compiled": true, "compiled_code": "\n\nselect\n    year_month\n  , payer\n  , data_source\n  , count(1) as member_months\n  , sum(total_paid) / count(1) as total_paid\n  , sum(medical_paid) / count(1) as medical_paid\n  , sum(inpatient_paid) / count(1) as inpatient_paid\n  , sum(outpatient_paid) / count(1) as outpatient_paid\n  , sum(office_visit_paid) / count(1) as office_visit_paid\n  , sum(ancillary_paid) / count(1) as ancillary_paid\n  , sum(pharmacy_paid) / count(1) as pharmacy_paid\n  , sum(other_paid) / count(1) as other_paid\n  , sum(acute_inpatient_paid) / count(1) as acute_inpatient_paid\n  , sum(ambulance_paid) / count(1) as ambulance_paid\n  , sum(ambulatory_surgery_paid) / count(1) as ambulatory_surgery_paid\n  , sum(dialysis_paid) / count(1) as dialysis_paid\n  , sum(durable_medical_equipment_paid) / count(1) as durable_medical_equipment_paid\n  , sum(emergency_department_paid) / count(1) as emergency_department_paid\n  , sum(home_health_paid) / count(1) as home_health_paid\n  , sum(hospice_paid) / count(1) as hospice_paid\n  , sum(inpatient_psychiatric_paid) / count(1) as inpatient_psychiatric_paid\n  , sum(inpatient_rehabilitation_paid) / count(1) as inpatient_rehabilitation_paid\n  , sum(lab_paid) / count(1) as lab_paid\n  , sum(office_visit_paid_2) / count(1) as office_visit_paid_2\n  , sum(outpatient_hospital_or_clinic_paid) / count(1) as outpatient_hospital_or_clinic_paid\n  , sum(outpatient_psychiatric_paid) / count(1) as outpatient_psychiatric_paid\n  , sum(outpatient_rehabilitation_paid) / count(1) as outpatient_rehabilitation_paid\n  , sum(skilled_nursing_paid) / count(1) as skilled_nursing_paid\n  , sum(urgent_care_paid) / count(1) as urgent_care_paid\n  , sum(total_allowed) / count(1) as total_allowed\n  , sum(medical_allowed) / count(1) as medical_allowed\n  , sum(inpatient_allowed) / count(1) as inpatient_allowed\n  , sum(outpatient_allowed) / count(1) as outpatient_allowed\n  , sum(office_visit_allowed) / count(1) as office_visit_allowed\n  , sum(ancillary_allowed) / count(1) as ancillary_allowed\n  , sum(pharmacy_allowed) / count(1) as pharmacy_allowed\n  , sum(other_allowed) / count(1) as other_allowed\n  , sum(acute_inpatient_allowed) / count(1) as acute_inpatient_allowed\n  , sum(ambulance_allowed) / count(1) as ambulance_allowed\n  , sum(ambulatory_surgery_allowed) / count(1) as ambulatory_surgery_allowed\n  , sum(dialysis_allowed) / count(1) as dialysis_allowed\n  , sum(durable_medical_equipment_allowed) / count(1) as durable_medical_equipment_allowed\n  , sum(emergency_department_allowed) / count(1) as emergency_department_allowed\n  , sum(home_health_allowed) / count(1) as home_health_allowed\n  , sum(hospice_allowed) / count(1) as hospice_allowed\n  , sum(inpatient_psychiatric_allowed) / count(1) as inpatient_psychiatric_allowed\n  , sum(inpatient_rehabilitation_allowed) / count(1) as inpatient_rehabilitation_allowed\n  , sum(lab_allowed) / count(1) as lab_allowed\n  , sum(office_visit_allowed_2) / count(1) as office_visit_allowed_2\n  , sum(outpatient_hospital_or_clinic_allowed) / count(1) as outpatient_hospital_or_clinic_allowed\n  , sum(outpatient_psychiatric_allowed) / count(1) as outpatient_psychiatric_allowed\n  , sum(outpatient_rehabilitation_allowed) / count(1) as outpatient_rehabilitation_allowed\n  , sum(skilled_nursing_allowed) / count(1) as skilled_nursing_allowed\n  , sum(urgent_care_allowed) / count(1) as urgent_care_allowed\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.financial_pmpm.pmpm_prep a\ngroup by\n  year_month\n, payer\n, data_source", "relation_name": "dev_thuxuan.financial_pmpm.pmpm_payer"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:10.798644Z", "completed_at": "2024-10-01T16:35:10.805725Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:10.806728Z", "completed_at": "2024-10-01T16:35:12.317012Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.633803367614746, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f01112fd2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__pmpm_payer_plan", "compiled": true, "compiled_code": "\n\nselect\n    year_month\n  , payer\n  , plan\n  , data_source\n  , count(1) as member_months\n  , sum(total_paid) / count(1) as total_paid\n  , sum(medical_paid) / count(1) as medical_paid\n  , sum(inpatient_paid) / count(1) as inpatient_paid\n  , sum(outpatient_paid) / count(1) as outpatient_paid\n  , sum(office_visit_paid) / count(1) as office_visit_paid\n  , sum(ancillary_paid) / count(1) as ancillary_paid\n  , sum(pharmacy_paid) / count(1) as pharmacy_paid\n  , sum(other_paid) / count(1) as other_paid\n  , sum(acute_inpatient_paid) / count(1) as acute_inpatient_paid\n  , sum(ambulance_paid) / count(1) as ambulance_paid\n  , sum(ambulatory_surgery_paid) / count(1) as ambulatory_surgery_paid\n  , sum(dialysis_paid) / count(1) as dialysis_paid\n  , sum(durable_medical_equipment_paid) / count(1) as durable_medical_equipment_paid\n  , sum(emergency_department_paid) / count(1) as emergency_department_paid\n  , sum(home_health_paid) / count(1) as home_health_paid\n  , sum(hospice_paid) / count(1) as hospice_paid\n  , sum(inpatient_psychiatric_paid) / count(1) as inpatient_psychiatric_paid\n  , sum(inpatient_rehabilitation_paid) / count(1) as inpatient_rehabilitation_paid\n  , sum(lab_paid) / count(1) as lab_paid\n  , sum(office_visit_paid_2) / count(1) as office_visit_paid_2\n  , sum(outpatient_hospital_or_clinic_paid) / count(1) as outpatient_hospital_or_clinic_paid\n  , sum(outpatient_psychiatric_paid) / count(1) as outpatient_psychiatric_paid\n  , sum(outpatient_rehabilitation_paid) / count(1) as outpatient_rehabilitation_paid\n  , sum(skilled_nursing_paid) / count(1) as skilled_nursing_paid\n  , sum(urgent_care_paid) / count(1) as urgent_care_paid\n  , sum(total_allowed) / count(1) as total_allowed\n  , sum(medical_allowed) / count(1) as medical_allowed\n  , sum(inpatient_allowed) / count(1) as inpatient_allowed\n  , sum(outpatient_allowed) / count(1) as outpatient_allowed\n  , sum(office_visit_allowed) / count(1) as office_visit_allowed\n  , sum(ancillary_allowed) / count(1) as ancillary_allowed\n  , sum(pharmacy_allowed) / count(1) as pharmacy_allowed\n  , sum(other_allowed) / count(1) as other_allowed\n  , sum(acute_inpatient_allowed) / count(1) as acute_inpatient_allowed\n  , sum(ambulance_allowed) / count(1) as ambulance_allowed\n  , sum(ambulatory_surgery_allowed) / count(1) as ambulatory_surgery_allowed\n  , sum(dialysis_allowed) / count(1) as dialysis_allowed\n  , sum(durable_medical_equipment_allowed) / count(1) as durable_medical_equipment_allowed\n  , sum(emergency_department_allowed) / count(1) as emergency_department_allowed\n  , sum(home_health_allowed) / count(1) as home_health_allowed\n  , sum(hospice_allowed) / count(1) as hospice_allowed\n  , sum(inpatient_psychiatric_allowed) / count(1) as inpatient_psychiatric_allowed\n  , sum(inpatient_rehabilitation_allowed) / count(1) as inpatient_rehabilitation_allowed\n  , sum(lab_allowed) / count(1) as lab_allowed\n  , sum(office_visit_allowed_2) / count(1) as office_visit_allowed_2\n  , sum(outpatient_hospital_or_clinic_allowed) / count(1) as outpatient_hospital_or_clinic_allowed\n  , sum(outpatient_psychiatric_allowed) / count(1) as outpatient_psychiatric_allowed\n  , sum(outpatient_rehabilitation_allowed) / count(1) as outpatient_rehabilitation_allowed\n  , sum(skilled_nursing_allowed) / count(1) as skilled_nursing_allowed\n  , sum(urgent_care_allowed) / count(1) as urgent_care_allowed\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.financial_pmpm.pmpm_prep a\ngroup by\n    year_month\n  , payer\n  , plan\n  , data_source", "relation_name": "dev_thuxuan.financial_pmpm.pmpm_payer_plan"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:11.165865Z", "completed_at": "2024-10-01T16:35:11.173339Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:11.174331Z", "completed_at": "2024-10-01T16:35:12.454497Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.4226198196411133, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f01112fd6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.mart_review__member_months", "compiled": true, "compiled_code": "\n\nSELECT m.*,\n    COALESCE(p.total_paid, 0) AS total_paid,\n    COALESCE(p.medical_paid, 0) AS medical_paid,\n    COALESCE(p.pharmacy_paid, 0) AS pharmacy_paid,\n    m.patient_id || ' | ' || m.data_source AS patient_data_source_key,\n    m.patient_id || ' | ' || m.data_source || ' | ' || m.year_month AS member_month_key\nFROM dev_thuxuan.core.member_months m\nLEFT JOIN dev_thuxuan.financial_pmpm.pmpm_prep p ON m.patient_id = p.patient_id\n    AND m.data_source = p.data_source\n    AND m.year_month = p.year_month", "relation_name": "dev_thuxuan.data_quality.mart_review__member_months"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:11.577908Z", "completed_at": "2024-10-01T16:35:11.583962Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:11.584941Z", "completed_at": "2024-10-01T16:35:12.457592Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.0164966583251953, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d65a"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__tuva_chronic_conditions_wide_patient_id.705b1ca561", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_wide\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:11.676668Z", "completed_at": "2024-10-01T16:35:11.683205Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:11.683205Z", "completed_at": "2024-10-01T16:35:12.532358Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.9829623699188232, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b64e"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.unique_chronic_conditions__tuva_chronic_conditions_wide_patient_id.02386b9158", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    patient_id as unique_field,\n    count(*) as n_records\n\nfrom dev_thuxuan.chronic_conditions.tuva_chronic_conditions_wide\nwhere patient_id is not null\ngroup by patient_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:11.185671Z", "completed_at": "2024-10-01T16:35:11.193653Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:11.195158Z", "completed_at": "2024-10-01T16:35:12.766058Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.8000562191009521, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f01112fda"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_hcc_hierarchy", "compiled": true, "compiled_code": "\n/*\n    Staging HCCs that will be used in disease factor calculations.\n    Final output for each CMS model version includes:\n        - hccs without a hierarchy\n        - lower-level hccs with hierarchy where top-level hcc is missing\n        - top-level hccs from hierarchy\n*/\n\nwith hcc_mapping as (\n\n    select distinct\n          patient_id\n        , hcc_code\n        , model_version\n        , payment_year\n    from dev_thuxuan.cms_hcc._int_hcc_mapping\n\n)\n\n, seed_hcc_hierarchy as (\n\n    select\n          model_version\n        , hcc_code\n        , description\n        , hccs_to_exclude\n    from dev_thuxuan.cms_hcc._value_set_disease_hierarchy\n\n)\n\n/*\n    selecting hccs that do not have a hierarchy\n    all codes in this cte are included in final output\n*/\n, hccs_without_hierarchy as (\n\n    select distinct\n          hcc_mapping.patient_id\n        , hcc_mapping.model_version\n        , hcc_mapping.payment_year\n        , hcc_mapping.hcc_code\n    from hcc_mapping\n        left join seed_hcc_hierarchy as hcc_top_level\n            on hcc_mapping.hcc_code = hcc_top_level.hcc_code\n            and hcc_mapping.model_version = hcc_top_level.model_version\n        left join seed_hcc_hierarchy as hcc_exclusions\n            on hcc_mapping.hcc_code = hcc_exclusions.hccs_to_exclude\n            and hcc_mapping.model_version = hcc_exclusions.model_version\n    where hcc_top_level.hcc_code is null\n        and hcc_exclusions.hccs_to_exclude is null\n\n)\n\n/*\n    selecting hccs that have a hierarchy to be evaluated in the next cte\n*/\n, hccs_with_hierarchy as (\n\n    select\n          hcc_mapping.patient_id\n        , hcc_mapping.model_version\n        , hcc_mapping.payment_year\n        , hcc_mapping.hcc_code\n        , seed_hcc_hierarchy.hcc_code as top_level_hcc\n    from hcc_mapping\n        inner join seed_hcc_hierarchy\n            on hcc_mapping.hcc_code = seed_hcc_hierarchy.hccs_to_exclude\n            and hcc_mapping.model_version = seed_hcc_hierarchy.model_version\n\n)\n\n/*\n    applying hcc hierarchy and grouping by patient and hcc\n    to account for multiple hcc combinations\n    minimum HCC is included following CMS's severity logic\n*/\n, hierarchy_applied as (\n\n    select\n          hccs_with_hierarchy.patient_id\n        , hccs_with_hierarchy.model_version\n        , hccs_with_hierarchy.payment_year\n        , hccs_with_hierarchy.hcc_code\n        , min(hcc_mapping.hcc_code) as top_level_hcc\n    from hccs_with_hierarchy\n        left join hcc_mapping\n            on hcc_mapping.patient_id = hccs_with_hierarchy.patient_id\n            and hcc_mapping.hcc_code = hccs_with_hierarchy.top_level_hcc\n            and hcc_mapping.model_version = hccs_with_hierarchy.model_version\n    group by\n          hccs_with_hierarchy.patient_id\n        , hccs_with_hierarchy.model_version\n        , hccs_with_hierarchy.payment_year\n        , hccs_with_hierarchy.hcc_code\n\n)\n\n/*\n    selecting lower-level hccs in hierarchy\n    all codes in this cte are included in final output\n*/\n, lower_level_inclusions as (\n\n    select distinct\n          patient_id\n        , model_version\n        , payment_year\n        , case\n            when top_level_hcc is not null then top_level_hcc\n            else hcc_code\n          end as hcc_code\n    from hierarchy_applied\n\n)\n\n/*\n    selecting top-level hccs not in previous steps\n    all codes in this cte are included in final output\n*/\n, top_level_inclusions as (\n\n    select distinct\n          hcc_mapping.patient_id\n        , hcc_mapping.model_version\n        , hcc_mapping.payment_year\n        , hcc_mapping.hcc_code\n    from hcc_mapping\n        inner join seed_hcc_hierarchy\n            on hcc_mapping.hcc_code = seed_hcc_hierarchy.hcc_code\n            and hcc_mapping.model_version = seed_hcc_hierarchy.model_version\n        left join lower_level_inclusions\n            on hcc_mapping.patient_id = lower_level_inclusions.patient_id\n            and hcc_mapping.hcc_code = lower_level_inclusions.hcc_code\n            and hcc_mapping.model_version = lower_level_inclusions.model_version\n        left join hierarchy_applied\n            on hcc_mapping.patient_id = hierarchy_applied.patient_id\n            and hcc_mapping.hcc_code = hierarchy_applied.hcc_code\n            and hcc_mapping.model_version = hierarchy_applied.model_version\n    where lower_level_inclusions.hcc_code is null\n        and hierarchy_applied.top_level_hcc is null\n\n)\n\n, unioned as (\n\n    select * from hccs_without_hierarchy\n    union all\n    select * from lower_level_inclusions\n    union all\n    select * from top_level_inclusions\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(model_version as TEXT) as model_version\n        , cast(payment_year as integer) as payment_year\n        , cast(hcc_code as TEXT) as hcc_code\n    from unioned\n\n)\n\nselect\n      patient_id\n    , model_version\n    , payment_year\n    , hcc_code\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.cms_hcc._int_hcc_hierarchy"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:12.594405Z", "completed_at": "2024-10-01T16:35:12.607485Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:12.609426Z", "completed_at": "2024-10-01T16:35:14.386571Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.4607768058776855, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b652"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__int_lab_suspects", "compiled": true, "compiled_code": "\n\nwith egfr_labs as (\n\n    select\n          patient_id\n        , data_source\n        , code_type\n        , code\n        , result_date\n        , result\n    from dev_thuxuan.hcc_suspecting._int_prep_egfr_labs\n\n)\n\n, seed_hcc_descriptions as (\n\n    select distinct\n          hcc_code\n        , hcc_description\n    from dev_thuxuan.hcc_suspecting._value_set_hcc_descriptions\n\n)\n\n, billed_hccs as (\n\n    select distinct\n          patient_id\n        , data_source\n        , hcc_code\n        , current_year_billed\n    from dev_thuxuan.hcc_suspecting._int_patient_hcc_history\n\n)\n\n/* BEGIN CKD logic */\n\n/*\n    Find a patient\u2019s two most recent eGFR lab results that are spaced by at\n    least 90 days.\n*/\n, max_lab_date as (\n\n    select\n          patient_id\n        , data_source\n        , max(result_date) as max_result_date\n    from egfr_labs\n    group by\n          patient_id\n        , data_source\n\n)\n\n, lab_lookback as (\n\n    select\n          egfr_labs.patient_id\n        , egfr_labs.data_source\n        , max_lab_date.max_result_date\n        , max(egfr_labs.result_date) as lookback_result_date\n    from egfr_labs\n        left join max_lab_date\n        on egfr_labs.patient_id = max_lab_date.patient_id\n        and egfr_labs.data_source = max_lab_date.data_source\n    where egfr_labs.result_date <= \n\n    dateadd(\n        day,\n        -90,\n        max_result_date\n        )\n\n\n    group by\n          egfr_labs.patient_id\n        , egfr_labs.data_source\n        , max_lab_date.max_result_date\n\n)\n\n/*\n    Take the highest eGFR result that occurred between the date range.\n*/\n, eligible_labs as (\n\n    select\n          egfr_labs.patient_id\n        , egfr_labs.data_source\n        , egfr_labs.code_type\n        , egfr_labs.code\n        , egfr_labs.result_date\n        , egfr_labs.result\n        , row_number() over (\n            partition by\n                  egfr_labs.patient_id\n                , egfr_labs.data_source\n            order by egfr_labs.result desc\n        ) as row_num\n    from egfr_labs\n        inner join lab_lookback\n        on egfr_labs.patient_id = lab_lookback.patient_id\n        and egfr_labs.data_source = lab_lookback.data_source\n    where egfr_labs.result_date >= lab_lookback.lookback_result_date\n\n)\n\n/*\n    Assign a patient's kidney disease stage based on the highest eGFR based on\n    the following range:\n\n    CKD 3a: eGFR in the range (45-59)\n    CKD 3b: eGFR in the range (30-44)\n    CKD 4: eGFR in the range (15-29)\n    CKD 5: eGFR in the range (0-14)\n*/\n, ckd_suspects as (\n\n    select\n          patient_id\n        , data_source\n        , code_type\n        , code as lab_code\n        , result_date\n        , result\n        , case\n            when result between 0 and 14 then '326'\n            when result between 15 and 29 then '327'\n            when result between 30 and 44 then '328'\n            when result between 45 and 59 then '329'\n          end as hcc_code\n        , 'eGFR (' || code || ') result ' || result || ' on ' || result_date as contributing_factor\n    from eligible_labs\n    where row_num = 1\n\n)\n/* END CKD logic */\n\n, unioned as (\n\n    select * from ckd_suspects\n\n)\n\n, add_billed_flag as (\n\n    select\n          unioned.patient_id\n        , unioned.data_source\n        , unioned.result_date\n        , unioned.result\n        , unioned.lab_code\n        , unioned.hcc_code\n        , unioned.contributing_factor\n        , seed_hcc_descriptions.hcc_description\n        , billed_hccs.current_year_billed\n    from unioned\n        inner join seed_hcc_descriptions\n            on unioned.hcc_code = seed_hcc_descriptions.hcc_code\n        left join billed_hccs\n            on unioned.patient_id = billed_hccs.patient_id\n            and unioned.data_source = billed_hccs.data_source\n            and unioned.hcc_code = billed_hccs.hcc_code\n\n)\n\n, add_standard_fields as (\n\n    select\n          patient_id\n        , data_source\n        , result_date\n        , result\n        , lab_code\n        , hcc_code\n        , hcc_description\n        , contributing_factor\n        , current_year_billed\n        , cast('Lab result suspect' as TEXT) as reason\n        , result_date as suspect_date\n    from add_billed_flag\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(data_source as TEXT) as data_source\n        , cast(result_date as date) as result_date\n        , cast(result as numeric(28,6)) as result\n        , cast(lab_code as TEXT) as lab_code\n        , cast(hcc_code as TEXT) as hcc_code\n        , cast(hcc_description as TEXT) as hcc_description\n        \n            , cast(current_year_billed as boolean) as current_year_billed\n        \n        , cast(reason as TEXT) as reason\n        , cast(contributing_factor as TEXT) as contributing_factor\n        , cast(suspect_date as date) as suspect_date\n    from add_standard_fields\n\n)\n\nselect\n      patient_id\n    , data_source\n    , result_date\n    , result\n    , lab_code\n    , hcc_code\n    , hcc_description\n    , current_year_billed\n    , reason\n    , contributing_factor\n    , suspect_date\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.hcc_suspecting._int_lab_suspects"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:12.437520Z", "completed_at": "2024-10-01T16:35:12.455476Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:12.459513Z", "completed_at": "2024-10-01T16:35:14.655100Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.6997132301330566, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d65e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__int_comorbidity_suspects", "compiled": true, "compiled_code": "\n\nwith conditions as (\n\n    select\n          patient_id\n        , recorded_date\n        , condition_type\n        , code_type\n        , code\n        , data_source\n    from dev_thuxuan.hcc_suspecting._int_prep_conditions\n\n)\n\n, seed_clinical_concepts as (\n\n    select\n          concept_name\n        , code\n        , code_system\n    from dev_thuxuan.hcc_suspecting._value_set_clinical_concepts\n\n)\n\n, seed_hcc_descriptions as (\n\n    select distinct\n          hcc_code\n        , hcc_description\n    from dev_thuxuan.hcc_suspecting._value_set_hcc_descriptions\n\n)\n\n, billed_hccs as (\n\n    select distinct\n          patient_id\n        , data_source\n        , hcc_code\n        , current_year_billed\n    from dev_thuxuan.hcc_suspecting._int_patient_hcc_history\n\n)\n\n/* BEGIN HCC 37 logic */\n, ckd_stage_1_or_2 as (\n\n    select\n          conditions.patient_id\n        , conditions.recorded_date\n        , conditions.condition_type\n        , conditions.code_type\n        , conditions.code\n        , conditions.data_source\n        , seed_clinical_concepts.concept_name\n        , row_number() over (\n            partition by\n                  conditions.patient_id\n                , conditions.data_source\n            order by\n                  conditions.recorded_date desc\n                , conditions.code desc\n          ) as row_num\n    from conditions\n        inner join seed_clinical_concepts\n            on conditions.code_type = seed_clinical_concepts.code_system\n            and conditions.code = seed_clinical_concepts.code\n    where lower(seed_clinical_concepts.concept_name) in (\n          'chronic kidney disease, stage 1'\n        , 'chronic kidney disease, stage 2'\n    )\n\n)\n\n, ckd_stage_1_or_2_dedupe as (\n\n    select\n          patient_id\n        , recorded_date\n        , condition_type\n        , code_type\n        , code\n        , data_source\n        , concept_name\n    from ckd_stage_1_or_2\n    where row_num = 1\n\n)\n\n, diabetes as (\n\n    select\n          conditions.patient_id\n        , conditions.recorded_date\n        , conditions.condition_type\n        , conditions.code_type\n        , conditions.code\n        , conditions.data_source\n        , seed_clinical_concepts.concept_name\n        , row_number() over (\n            partition by\n                  conditions.patient_id\n                , conditions.data_source\n            order by\n                  conditions.recorded_date desc\n                , conditions.code desc\n          ) as row_num\n    from conditions\n        inner join seed_clinical_concepts\n            on conditions.code_type = seed_clinical_concepts.code_system\n            and conditions.code = seed_clinical_concepts.code\n    where lower(seed_clinical_concepts.concept_name) = 'diabetes'\n)\n\n, diabetes_dedupe as (\n\n    select\n          patient_id\n        , recorded_date\n        , condition_type\n        , code_type\n        , code\n        , data_source\n        , concept_name\n    from diabetes\n    where row_num = 1\n\n)\n\n, hcc_37_suspect as (\n\n    select\n          diabetes_dedupe.patient_id\n        , diabetes_dedupe.data_source\n        , seed_hcc_descriptions.hcc_code\n        , seed_hcc_descriptions.hcc_description\n        , diabetes_dedupe.concept_name as condition_1_concept_name\n        , diabetes_dedupe.code as condition_1_code\n        , diabetes_dedupe.recorded_date as condition_1_recorded_date\n        , ckd_stage_1_or_2_dedupe.concept_name as condition_2_concept_name\n        , ckd_stage_1_or_2_dedupe.code as condition_2_code\n        , ckd_stage_1_or_2_dedupe.recorded_date as condition_2_recorded_date\n    from diabetes_dedupe\n        inner join ckd_stage_1_or_2_dedupe\n            on diabetes_dedupe.patient_id = ckd_stage_1_or_2_dedupe.patient_id\n            and diabetes_dedupe.data_source = ckd_stage_1_or_2_dedupe.data_source\n            /* ensure conditions overlap in the same year */\n            and date_part('year', diabetes_dedupe.recorded_date) = date_part('year', ckd_stage_1_or_2_dedupe.recorded_date)\n        inner join seed_hcc_descriptions\n            on hcc_code = '37'\n\n)\n/* END HCC 37 logic */\n\n, unioned as (\n\n    select * from hcc_37_suspect\n\n)\n\n, add_billed_flag as (\n\n    select\n          unioned.patient_id\n        , unioned.data_source\n        , unioned.hcc_code\n        , unioned.hcc_description\n        , unioned.condition_1_concept_name\n        , unioned.condition_1_code\n        , unioned.condition_1_recorded_date\n        , unioned.condition_2_concept_name\n        , unioned.condition_2_code\n        , unioned.condition_2_recorded_date\n        , billed_hccs.current_year_billed\n    from unioned\n        left join billed_hccs\n            on unioned.patient_id = billed_hccs.patient_id\n            and unioned.data_source = billed_hccs.data_source\n            and unioned.hcc_code = billed_hccs.hcc_code\n\n)\n\n, add_standard_fields as (\n\n    select\n          patient_id\n        , data_source\n        , hcc_code\n        , hcc_description\n        , condition_1_concept_name\n        , condition_1_code\n        , condition_1_recorded_date\n        , condition_2_concept_name\n        , condition_2_code\n        , condition_2_recorded_date\n        , current_year_billed\n        , cast('Comorbidity suspect' as TEXT) as reason\n        , condition_1_concept_name || ' (' || condition_1_code || ') on ' || condition_1_recorded_date || ') and ' || condition_2_concept_name || ' (' || condition_2_code || ') on ' || condition_2_recorded_date as contributing_factor\n        , condition_1_recorded_date as suspect_date\n    from add_billed_flag\n\n)\n\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(data_source as TEXT) as data_source\n        , cast(hcc_code as TEXT) as hcc_code\n        , cast(hcc_description as TEXT) as hcc_description\n        , cast(condition_1_concept_name as TEXT) as condition_1_concept_name\n        , cast(condition_1_code as TEXT) as condition_1_code\n        , cast(condition_1_recorded_date as date) as condition_1_recorded_date\n        , cast(condition_2_concept_name as TEXT) as condition_2_concept_name\n        , cast(condition_2_code as TEXT) as condition_2_code\n        , cast(condition_2_recorded_date as date) as condition_2_recorded_date\n        \n            , cast(current_year_billed as boolean) as current_year_billed\n        \n        , cast(reason as TEXT) as reason\n        , cast(contributing_factor as TEXT) as contributing_factor\n        , cast(suspect_date as date) as suspect_date\n    from add_standard_fields\n\n)\n\nselect\n      patient_id\n    , data_source\n    , hcc_code\n    , hcc_description\n    , condition_1_concept_name\n    , condition_1_code\n    , condition_1_recorded_date\n    , condition_2_concept_name\n    , condition_2_code\n    , condition_2_recorded_date\n    , current_year_billed\n    , reason\n    , contributing_factor\n    , suspect_date\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.hcc_suspecting._int_comorbidity_suspects"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:12.993097Z", "completed_at": "2024-10-01T16:35:13.151282Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:13.152287Z", "completed_at": "2024-10-01T16:35:15.110748Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.249910593032837, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d662"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_01_exclusions", "compiled": true, "compiled_code": "\n\nselect\n    encounter_id\n  , data_source\n  , exclusion_reason\n  , row_number() over (\n      partition by encounter_id, data_source \n      order by exclusion_reason\n    ) as exclusion_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_shared_exclusion_union", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_01_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:12.621133Z", "completed_at": "2024-10-01T16:35:12.634846Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:12.636845Z", "completed_at": "2024-10-01T16:35:15.940808Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 3.5204806327819824, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f7c5-0001-987f0110be36"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__int_medication_suspects", "compiled": true, "compiled_code": "\n\nwith all_medications as (\n\n    select\n          patient_id\n        , dispensing_date\n        , drug_code\n        , code_system\n        , data_source\n    from dev_thuxuan.hcc_suspecting._int_all_medications\n\n)\n\n, seed_clinical_concepts as (\n\n    select\n          concept_name\n        , code\n        , code_system\n    from dev_thuxuan.hcc_suspecting._value_set_clinical_concepts\n\n)\n\n, seed_hcc_descriptions as (\n\n    select distinct\n          hcc_code\n        , hcc_description\n    from dev_thuxuan.hcc_suspecting._value_set_hcc_descriptions\n\n)\n\n, billed_hccs as (\n\n    select distinct\n          patient_id\n        , data_source\n        , hcc_code\n        , current_year_billed\n    from dev_thuxuan.hcc_suspecting._int_patient_hcc_history\n\n)\n\n/* BEGIN HCC 155 logic (Major Depression, Moderate or Severe, without Psychosis)\n\n   antidepressant medication taken within the past five years\n*/\n, hcc_155_suspect as (\n\n    select\n          all_medications.patient_id\n        , all_medications.dispensing_date\n        , all_medications.drug_code\n        , all_medications.code_system\n        , all_medications.data_source\n        , seed_clinical_concepts.concept_name\n        , seed_hcc_descriptions.hcc_code\n        , seed_hcc_descriptions.hcc_description\n    from all_medications\n        inner join seed_clinical_concepts\n            on all_medications.code_system = seed_clinical_concepts.code_system\n            and all_medications.drug_code = seed_clinical_concepts.code\n        inner join seed_hcc_descriptions\n            on hcc_code = '155'\n    where lower(seed_clinical_concepts.concept_name) = 'antidepressant medication'\n    and all_medications.dispensing_date >= \n\n    dateadd(\n        year,\n        -5,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n\n\n)\n/* END HCC 155 logic */\n\n, unioned as (\n\n    select * from hcc_155_suspect\n\n)\n\n, add_billed_flag as (\n\n    select\n          unioned.patient_id\n        , unioned.data_source\n        , unioned.hcc_code\n        , unioned.hcc_description\n        , unioned.concept_name\n        , unioned.dispensing_date\n        , unioned.drug_code\n        , billed_hccs.current_year_billed\n    from unioned\n        left join billed_hccs\n            on unioned.patient_id = billed_hccs.patient_id\n            and unioned.data_source = billed_hccs.data_source\n            and unioned.hcc_code = billed_hccs.hcc_code\n)\n\n, add_standard_fields as (\n\n    select\n          patient_id\n        , data_source\n        , hcc_code\n        , hcc_description\n        , dispensing_date\n        , drug_code\n        , current_year_billed\n        , cast('Medication suspect' as TEXT) as reason\n        , concept_name || drug_code || ') dispensed on ' || dispensing_date as contributing_factor\n        , dispensing_date as suspect_date\n    from add_billed_flag\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(data_source as TEXT) as data_source\n        , cast(hcc_code as TEXT) as hcc_code\n        , cast(hcc_description as TEXT) as hcc_description\n        , cast(dispensing_date as date) as dispensing_date\n        , cast(drug_code as TEXT) as drug_code\n        \n            , cast(current_year_billed as boolean) as current_year_billed\n        \n        , cast(reason as TEXT) as reason\n        , cast(contributing_factor as TEXT) as contributing_factor\n        , cast(suspect_date as date) as suspect_date\n    from add_standard_fields\n\n)\n\nselect\n      patient_id\n    , data_source\n    , hcc_code\n    , hcc_description\n    , dispensing_date\n    , drug_code\n    , current_year_billed\n    , reason\n    , contributing_factor\n    , suspect_date\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.hcc_suspecting._int_medication_suspects"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:12.663196Z", "completed_at": "2024-10-01T16:35:12.682327Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:12.683327Z", "completed_at": "2024-10-01T16:35:16.237398Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 3.6984283924102783, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f01112fde"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__int_observation_suspects", "compiled": true, "compiled_code": "\n\nwith conditions as (\n\n    select\n          patient_id\n        , recorded_date\n        , condition_type\n        , code_type\n        , code\n        , data_source\n    from dev_thuxuan.hcc_suspecting._int_prep_conditions\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , result\n        , code_type\n        , code\n        , data_source\n    from dev_thuxuan.hcc_suspecting._stg_observation\n\n)\n\n, numeric_observations as (\n\n    select\n          patient_id\n        , observation_date\n        \n        , CAST(result AS numeric(28,6)) AS result\n        \n        , code_type\n        , code\n        , data_source\n    from observations\n   \n        where regexp_like(result, '^[+-]?([0-9]*[.])?[0-9]+$')\n    \n\n)\n\n, seed_clinical_concepts as (\n\n    select\n          concept_name\n        , code\n        , code_system\n    from dev_thuxuan.hcc_suspecting._value_set_clinical_concepts\n\n)\n\n, seed_hcc_descriptions as (\n\n    select distinct\n          hcc_code\n        , hcc_description\n    from dev_thuxuan.hcc_suspecting._value_set_hcc_descriptions\n\n)\n\n, billed_hccs as (\n\n    select distinct\n          patient_id\n        , data_source\n        , hcc_code\n        , current_year_billed\n    from dev_thuxuan.hcc_suspecting._int_patient_hcc_history\n\n)\n\n, depression_assessment as (\n\n    select\n          numeric_observations.patient_id\n        , numeric_observations.observation_date\n        , numeric_observations.result\n        , numeric_observations.code_type\n        , numeric_observations.code\n        , numeric_observations.data_source\n        , seed_clinical_concepts.concept_name\n    from numeric_observations\n        inner join seed_clinical_concepts\n            on numeric_observations.code_type = seed_clinical_concepts.code_system\n            and numeric_observations.code = seed_clinical_concepts.code\n    where lower(seed_clinical_concepts.concept_name) = 'depression assessment (phq-9)'\n\n)\n\n, diabetes as (\n\n     select\n          conditions.patient_id\n        , conditions.recorded_date\n        , conditions.condition_type\n        , conditions.code_type\n        , conditions.code\n        , conditions.data_source\n        , seed_clinical_concepts.concept_name\n    from conditions\n        inner join seed_clinical_concepts\n            on conditions.code_type = seed_clinical_concepts.code_system\n            and conditions.code = seed_clinical_concepts.code\n    where lower(seed_clinical_concepts.concept_name) = 'diabetes'\n\n)\n\n, hypertension as (\n\n     select\n          conditions.patient_id\n        , conditions.recorded_date\n        , conditions.condition_type\n        , conditions.code_type\n        , conditions.code\n        , conditions.data_source\n        , seed_clinical_concepts.concept_name\n    from conditions\n        inner join seed_clinical_concepts\n            on conditions.code_type = seed_clinical_concepts.code_system\n            and conditions.code = seed_clinical_concepts.code\n    where lower(seed_clinical_concepts.concept_name) = 'essential hypertension'\n\n)\n\n, obstructive_sleep_apnea as (\n\n     select\n          conditions.patient_id\n        , conditions.recorded_date\n        , conditions.condition_type\n        , conditions.code_type\n        , conditions.code\n        , conditions.data_source\n        , seed_clinical_concepts.concept_name\n    from conditions\n        inner join seed_clinical_concepts\n            on conditions.code_type = seed_clinical_concepts.code_system\n            and conditions.code = seed_clinical_concepts.code\n    where lower(seed_clinical_concepts.concept_name) = 'obstructive sleep apnea'\n\n)\n\n/* BEGIN HCC 48 logic (Morbid Obesity) */\n, bmi_over_30_with_osa as (\n\n    select\n          numeric_observations.patient_id\n        , numeric_observations.data_source\n        , numeric_observations.observation_date\n        , numeric_observations.result as observation_result\n        , obstructive_sleep_apnea.code as condition_code\n        , obstructive_sleep_apnea.recorded_date as condition_date\n        , obstructive_sleep_apnea.concept_name as condition_concept_name\n        , seed_hcc_descriptions.hcc_code\n        , seed_hcc_descriptions.hcc_description\n    from numeric_observations\n        inner join seed_clinical_concepts\n            on numeric_observations.code_type = seed_clinical_concepts.code_system\n            and numeric_observations.code = seed_clinical_concepts.code\n        inner join obstructive_sleep_apnea\n            on numeric_observations.patient_id = obstructive_sleep_apnea.patient_id\n            /* ensure bmi and condition overlaps in the same year */\n            and date_part('year', numeric_observations.observation_date) = date_part('year', obstructive_sleep_apnea.recorded_date)\n        inner join seed_hcc_descriptions\n            on hcc_code = '48'\n    where lower(seed_clinical_concepts.concept_name) = 'bmi'\n    and result >= 30\n\n)\n\n, bmi_over_35_with_diabetes as (\n\n    select\n          numeric_observations.patient_id\n        , numeric_observations.data_source\n        , numeric_observations.observation_date\n        , numeric_observations.result as observation_result\n        , diabetes.code as condition_code\n        , diabetes.recorded_date as condition_date\n        , diabetes.concept_name as condition_concept_name\n        , seed_hcc_descriptions.hcc_code\n        , seed_hcc_descriptions.hcc_description\n    from numeric_observations\n        inner join seed_clinical_concepts\n            on numeric_observations.code_type = seed_clinical_concepts.code_system\n            and numeric_observations.code = seed_clinical_concepts.code\n        inner join diabetes\n            on numeric_observations.patient_id = diabetes.patient_id\n            /* ensure bmi and condition overlaps in the same year */\n            and date_part('year', numeric_observations.observation_date) = date_part('year', diabetes.recorded_date)\n        inner join seed_hcc_descriptions\n            on hcc_code = '48'\n    where lower(seed_clinical_concepts.concept_name) = 'bmi'\n    and result >= 35\n\n)\n\n, bmi_over_35_with_hypertension as (\n\n    select\n          numeric_observations.patient_id\n        , numeric_observations.data_source\n        , numeric_observations.observation_date\n        , numeric_observations.result as observation_result\n        , hypertension.code as condition_code\n        , hypertension.recorded_date as condition_date\n        , hypertension.concept_name as condition_concept_name\n        , seed_hcc_descriptions.hcc_code\n        , seed_hcc_descriptions.hcc_description\n    from numeric_observations\n        inner join seed_clinical_concepts\n            on numeric_observations.code_type = seed_clinical_concepts.code_system\n            and numeric_observations.code = seed_clinical_concepts.code\n        inner join hypertension\n            on numeric_observations.patient_id = hypertension.patient_id\n            /* ensure bmi and condition overlaps in the same year */\n            and date_part('year', numeric_observations.observation_date) = date_part('year', hypertension.recorded_date)\n        inner join seed_hcc_descriptions\n            on hcc_code = '48'\n    where lower(seed_clinical_concepts.concept_name) = 'bmi'\n    and result >= 35\n\n)\n\n, bmi_over_40 as (\n\n    select\n          numeric_observations.patient_id\n        , numeric_observations.data_source\n        , numeric_observations.observation_date\n        , numeric_observations.result as observation_result\n        , cast(null as TEXT) as condition_code\n        , cast(null as date) as condition_date\n        , cast(null as TEXT) as condition_concept_name\n        , seed_hcc_descriptions.hcc_code\n        , seed_hcc_descriptions.hcc_description\n    from numeric_observations\n        inner join seed_clinical_concepts\n            on numeric_observations.code_type = seed_clinical_concepts.code_system\n            and numeric_observations.code = seed_clinical_concepts.code\n        inner join seed_hcc_descriptions\n            on hcc_code = '48'\n    where lower(seed_clinical_concepts.concept_name) = 'bmi'\n    and result >= 40\n\n)\n\n, hcc_48_unioned as (\n\n    select * from bmi_over_30_with_osa\n    union all\n    select * from bmi_over_35_with_diabetes\n    union all\n    select * from bmi_over_35_with_hypertension\n    union all\n    select * from bmi_over_40\n\n)\n\n, hcc_48_suspect as (\n\n    select\n          patient_id\n        , data_source\n        , observation_date\n        , observation_result\n        , condition_code\n        , condition_date\n        , condition_concept_name\n        , hcc_code\n        , hcc_description\n        , 'BMI result ' || observation_result || case when condition_code is null then ''  else ' with ' || condition_concept_name || '(' || condition_code || ' on ' || condition_date || ')' end as contributing_factor\n    from hcc_48_unioned\n\n)\n/* END HCC 48 logic */\n\n/* BEGIN HCC 155 logic (Major Depression, Moderate or Severe, without Psychosis)\n\n   to determine a positive PHQ-9 assessment, we look at the past 3 screenings\n   for a patient and take the highest result\n*/\n, eligible_depression_assessments as (\n\n    select\n          depression_assessment.patient_id\n        , depression_assessment.observation_date\n        , depression_assessment.result\n        , depression_assessment.code_type\n        , depression_assessment.code\n        , depression_assessment.data_source\n        , depression_assessment.concept_name\n        , row_number() over (\n            partition by\n                  depression_assessment.patient_id\n                , depression_assessment.data_source\n            order by\n                case when depression_assessment.observation_date is null then 1 else 0 end,\n                depression_assessment.observation_date desc\n        ) assessment_order\n    from depression_assessment\n\n)\n\n, depression_assessments_ordered as (\n\n    select\n          patient_id\n        , observation_date\n        , code_type\n        , code\n        , data_source\n        , concept_name\n        , result\n        , row_number() over (\n            partition by\n                  patient_id\n                , data_source\n            --order by result desc nulls last\n            order by\n                case when result is null then 1 else 0 end,\n                result desc\n        ) as result_order --order the last three assessments by result value\n    from eligible_depression_assessments\n    where assessment_order <= 3\n\n)\n\n, hcc_155_suspect as (\n\n    select\n          depression_assessments_ordered.patient_id\n        , depression_assessments_ordered.data_source\n        , depression_assessments_ordered.observation_date\n        , depression_assessments_ordered.result as observation_result\n        , cast(null as TEXT) as condition_code\n        , cast(null as date) as condition_date\n        , depression_assessments_ordered.concept_name as condition_concept_name\n        , seed_hcc_descriptions.hcc_code\n        , seed_hcc_descriptions.hcc_description\n        , 'PHQ-9 result ' || depression_assessments_ordered.result || ' on ' || depression_assessments_ordered.observation_date as contributing_factor\n    from depression_assessments_ordered\n        inner join seed_hcc_descriptions\n            on hcc_code = '155'\n    where result_order = 1\n    and result >= 15\n\n)\n\n/* END HCC 155 logic */\n\n, unioned as (\n\n    select * from hcc_48_suspect\n    union all\n    select * from hcc_155_suspect\n\n)\n\n, add_billed_flag as (\n\n    select\n          unioned.patient_id\n        , unioned.data_source\n        , unioned.observation_date\n        , unioned.observation_result\n        , unioned.condition_code\n        , unioned.condition_date\n        , unioned.condition_concept_name\n        , unioned.hcc_code\n        , unioned.hcc_description\n        , unioned.contributing_factor\n        , billed_hccs.current_year_billed\n    from unioned\n        left join billed_hccs\n            on unioned.patient_id = billed_hccs.patient_id\n            and unioned.data_source = billed_hccs.data_source\n            and unioned.hcc_code = billed_hccs.hcc_code\n\n)\n\n, add_standard_fields as (\n\n    select\n          patient_id\n        , data_source\n        , observation_date\n        , observation_result\n        , condition_code\n        , condition_date\n        , condition_concept_name\n        , hcc_code\n        , hcc_description\n        , contributing_factor\n        , current_year_billed\n        , cast('Observation suspect' as TEXT) as reason\n        , observation_date as suspect_date\n    from add_billed_flag\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(data_source as TEXT) as data_source\n        , cast(observation_date as date) as observation_date\n        , cast(observation_result as TEXT) as observation_result\n        , cast(condition_code as TEXT) as condition_code\n        , cast(condition_date as date) as condition_date\n        , cast(condition_concept_name as TEXT) as condition_concept_name\n        , cast(hcc_code as TEXT) as hcc_code\n        , cast(hcc_description as TEXT) as hcc_description\n        \n            , cast(current_year_billed as boolean) as current_year_billed\n        \n        , cast(reason as TEXT) as reason\n        , cast(contributing_factor as TEXT) as contributing_factor\n        , cast(suspect_date as date) as suspect_date\n    from add_standard_fields\n\n)\n\nselect\n      patient_id\n    , data_source\n    , observation_date\n    , observation_result\n    , condition_code\n    , condition_date\n    , condition_concept_name\n    , hcc_code\n    , hcc_description\n    , current_year_billed\n    , reason\n    , contributing_factor\n    , suspect_date\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.hcc_suspecting._int_observation_suspects"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:15.142073Z", "completed_at": "2024-10-01T16:35:15.147599Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:15.148613Z", "completed_at": "2024-10-01T16:35:16.279923Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.2663896083831787, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f7c5-0001-987f0110be3e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_05_exclusions", "compiled": true, "compiled_code": "\n\nwith resp_an as (\n    select distinct\n        encounter_id\n      , data_source\n      , 'cystic fibrosis' as exclusion_reason\n    from dev_thuxuan.ahrq_measures._stg_pqi_condition as c\n    inner join dev_thuxuan.ahrq_measures._value_set_pqi as pqi\n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-cm'\n      and pqi.value_set_name = 'cystic_fibrosis_and_anomalies_of_the_respiratory_system'\n      and pqi_number = '05'\n    where c.encounter_id is not null\n),\n\nunion_cte as (\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from dev_thuxuan.ahrq_measures._int_pqi_shared_exclusion_union\n\n    union all\n\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from resp_an\n)\n\nselect\n    encounter_id\n  , data_source\n  , exclusion_reason\n  , row_number() over (\n      partition by encounter_id, data_source \n      order by exclusion_reason\n    ) as exclusion_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom union_cte", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_05_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:15.058450Z", "completed_at": "2024-10-01T16:35:15.063490Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:15.063490Z", "completed_at": "2024-10-01T16:35:16.325750Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3988769054412842, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f7c5-0001-987f0110be3a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_03_exclusions", "compiled": true, "compiled_code": "\n\nselect\n    encounter_id\n  , data_source\n  , exclusion_reason\n  , row_number() over (\n      partition by encounter_id, data_source \n      order by exclusion_reason\n    ) as exclusion_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_shared_exclusion_union", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_03_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:15.246516Z", "completed_at": "2024-10-01T16:35:15.254529Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:15.254529Z", "completed_at": "2024-10-01T16:35:16.441211Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.3440454006195068, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f7c5-0001-987f0110be42"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_07_exclusions", "compiled": true, "compiled_code": "\n\nwith cardiac as (\n    select distinct\n        encounter_id\n      , data_source\n      , 'cardiac procedure' as exclusion_reason\n    from dev_thuxuan.ahrq_measures._stg_pqi_procedure as c\n    inner join dev_thuxuan.ahrq_measures._value_set_pqi as pqi \n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-pcs'\n      and pqi.value_set_name = 'cardiac_procedure_codes'\n      and pqi_number = 'appendix_b'\n    where c.encounter_id is not null\n),\n\nckd as (\n    select distinct\n        encounter_id\n      , data_source\n    from dev_thuxuan.ahrq_measures._stg_pqi_condition as c\n    inner join dev_thuxuan.ahrq_measures._value_set_pqi as pqi \n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-cm'\n      and pqi.value_set_name = 'exclusion_kidney_disease_diagnosis_codes'\n      and pqi_number = '07'\n    where c.encounter_id is not null\n),\n\naccess as (\n    select distinct\n        encounter_id\n      , data_source\n    from dev_thuxuan.ahrq_measures._stg_pqi_procedure as c\n    inner join dev_thuxuan.ahrq_measures._value_set_pqi as pqi \n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-pcs'\n      and pqi.value_set_name = 'exclusion_dialysis_access_procedure_codes'\n      and pqi.pqi_number = '07'\n    where c.encounter_id is not null\n),\n\ncombine as (\n    select\n        c.encounter_id\n      , c.data_source\n      , 'ckd' as exclusion_reason\n    from dev_thuxuan.ahrq_measures._stg_pqi_condition as c\n    inner join ckd \n      on c.encounter_id = ckd.encounter_id\n      and c.data_source = ckd.data_source\n    inner join access as a \n      on c.encounter_id = a.encounter_id\n      and c.data_source = a.data_source\n),\n\nunion_cte as (\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from dev_thuxuan.ahrq_measures._int_pqi_shared_exclusion_union\n    \n    union all\n    \n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from cardiac\n    \n    union all\n    \n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from combine\n)\n\nselect\n    encounter_id\n  , data_source\n  , exclusion_reason\n  , row_number() over (\n      partition by encounter_id, data_source \n      order by exclusion_reason\n    ) as exclusion_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom union_cte", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_07_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:16.417943Z", "completed_at": "2024-10-01T16:35:16.422945Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:16.423944Z", "completed_at": "2024-10-01T16:35:17.673203Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.3987693786621094, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f7c5-0001-987f0110be4a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_12_exclusions", "compiled": true, "compiled_code": "\n\nwith kidney as (\n    select distinct\n        encounter_id\n      , data_source\n      , 'kidney' as exclusion_reason\n    from dev_thuxuan.ahrq_measures._stg_pqi_condition as c\n    inner join dev_thuxuan.ahrq_measures._value_set_pqi as pqi \n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-cm'\n      and pqi.value_set_name = 'kidney_or_urinary_tract_disorder_diagnosis_codes'\n      and pqi.pqi_number = '12'\n    where c.encounter_id is not null\n),\n\nimmune_dx as (\n    select distinct\n        encounter_id\n      , data_source\n      , 'immunocompromised diagnosis' as exclusion_reason\n    from dev_thuxuan.ahrq_measures._stg_pqi_condition as c\n    inner join dev_thuxuan.ahrq_measures._value_set_pqi as pqi \n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-cm'\n      and pqi.value_set_name = 'immunocompromised_state_diagnosis_codes'\n      and pqi.pqi_number = 'appendix_c'\n    where c.encounter_id is not null\n),\n\nimmune_px as (\n    select distinct\n        encounter_id\n      , data_source\n      , 'immunocompromised procedure' as exclusion_reason\n    from dev_thuxuan.ahrq_measures._stg_pqi_procedure as c\n    inner join dev_thuxuan.ahrq_measures._value_set_pqi as pqi \n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-pcs'\n      and pqi.value_set_name = 'immunocompromised_state_procedure_codes'\n      and pqi.pqi_number = 'appendix_c'\n    where c.encounter_id is not null\n),\n\nunion_cte as (\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from dev_thuxuan.ahrq_measures._int_pqi_shared_exclusion_union\n\n    union all\n\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from kidney\n\n    union all\n\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from immune_dx\n\n    union all\n\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from immune_px\n)\n\nselect\n    encounter_id\n  , data_source\n  , exclusion_reason\n  , row_number() over (\n      partition by encounter_id, data_source \n      order by exclusion_reason\n    ) as exclusion_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom union_cte", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_12_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:16.382807Z", "completed_at": "2024-10-01T16:35:16.393848Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:16.394915Z", "completed_at": "2024-10-01T16:35:17.658543Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.4358668327331543, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b656"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_08_exclusions", "compiled": true, "compiled_code": "\n\nwith cardiac as (\n    select distinct\n        encounter_id\n      , data_source\n      , 'cardiac procedure' as exclusion_reason\n    from dev_thuxuan.ahrq_measures._stg_pqi_procedure as c\n    inner join dev_thuxuan.ahrq_measures._value_set_pqi as pqi \n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-pcs'\n      and pqi.value_set_name = 'cardiac_procedure_codes'\n      and pqi.pqi_number = 'appendix_b'\n    where c.encounter_id is not null\n),\n\nunion_cte as (\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from dev_thuxuan.ahrq_measures._int_pqi_shared_exclusion_union\n\n    union all\n\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from cardiac\n)\n\nselect\n    encounter_id\n  , data_source\n  , exclusion_reason\n  , row_number() over (\n      partition by encounter_id, data_source \n      order by exclusion_reason\n    ) as exclusion_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom union_cte", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_08_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:16.462842Z", "completed_at": "2024-10-01T16:35:16.466863Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:16.467930Z", "completed_at": "2024-10-01T16:35:17.677756Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3558480739593506, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b65a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_14_exclusions", "compiled": true, "compiled_code": "\n\nselect\n    encounter_id\n  , data_source\n  , exclusion_reason\n  , row_number() over (\n      partition by encounter_id, data_source \n      order by exclusion_reason\n    ) as exclusion_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_shared_exclusion_union", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_14_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:16.388848Z", "completed_at": "2024-10-01T16:35:16.399850Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:16.399850Z", "completed_at": "2024-10-01T16:35:17.836794Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.5881741046905518, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f7c5-0001-987f0110be46"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_11_exclusions", "compiled": true, "compiled_code": "\n\nwith sickle_cell as (\n    select distinct\n        encounter_id\n      , data_source\n      , 'sickle cell' as exclusion_reason\n    from dev_thuxuan.ahrq_measures._stg_pqi_condition as c\n    inner join dev_thuxuan.ahrq_measures._value_set_pqi as pqi \n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-cm'\n      and pqi.value_set_name = 'sickle_cell_anemia_or_hb-s_disease_diagnosis_codes'\n      and pqi.pqi_number = '11'\n    where c.encounter_id is not null\n),\n\nimmune_dx as (\n    select distinct\n        encounter_id\n      , data_source\n      , 'immunocompromised diagnosis' as exclusion_reason\n    from dev_thuxuan.ahrq_measures._stg_pqi_condition as c\n    inner join dev_thuxuan.ahrq_measures._value_set_pqi as pqi \n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-cm'\n      and pqi.value_set_name = 'immunocompromised_state_diagnosis_codes'\n      and pqi.pqi_number = 'appendix_c'\n    where c.encounter_id is not null\n),\n\nimmune_px as (\n    select distinct\n        encounter_id\n      , data_source\n      , 'immunocompromised procedure' as exclusion_reason\n    from dev_thuxuan.ahrq_measures._stg_pqi_procedure as c\n    inner join dev_thuxuan.ahrq_measures._value_set_pqi as pqi \n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-pcs'\n      and pqi.value_set_name = 'immunocompromised_state_procedure_codes'\n      and pqi.pqi_number = 'appendix_c'\n    where c.encounter_id is not null\n),\n\nunion_cte as (\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from dev_thuxuan.ahrq_measures._int_pqi_shared_exclusion_union\n\n    union all\n\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from sickle_cell\n\n    union all\n\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from immune_dx\n\n    union all\n\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from immune_px\n)\n\nselect\n    encounter_id\n  , data_source\n  , exclusion_reason\n  , row_number() over (\n      partition by encounter_id, data_source \n      order by exclusion_reason\n    ) as exclusion_number\n, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom union_cte", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_11_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:16.596987Z", "completed_at": "2024-10-01T16:35:16.603494Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:16.604506Z", "completed_at": "2024-10-01T16:35:18.002039Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.5929770469665527, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b65e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_15_exclusions", "compiled": true, "compiled_code": "\n\nwith resp_an as (\n    select distinct\n        encounter_id\n      , data_source\n      , 'cystic fibrosis' as exclusion_reason\n    from dev_thuxuan.ahrq_measures._stg_pqi_condition as c\n    inner join dev_thuxuan.ahrq_measures._value_set_pqi as pqi \n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-cm'\n      and pqi.value_set_name = 'cystic_fibrosis_and_anomalies_of_the_respiratory_system_diagnosis_codes'\n      and pqi.pqi_number = '15'\n    where c.encounter_id is not null\n),\n\nunion_cte as (\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from dev_thuxuan.ahrq_measures._int_pqi_shared_exclusion_union\n\n    union all\n\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from resp_an\n)\n\nselect\n    encounter_id\n  , data_source\n  , exclusion_reason\n  , row_number() over (\n      partition by encounter_id, data_source \n      order by exclusion_reason\n    ) as exclusion_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom union_cte", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_15_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:17.842770Z", "completed_at": "2024-10-01T16:35:17.856965Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:17.864974Z", "completed_at": "2024-10-01T16:35:19.818403Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.103212356567383, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f01112fe2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_16_exclusions", "compiled": true, "compiled_code": "\n\nwith amputation as (\n    select distinct\n        encounter_id\n      , data_source\n      , 'amputation' as exclusion_reason\n    from dev_thuxuan.ahrq_measures._stg_pqi_condition as c\n    inner join dev_thuxuan.ahrq_measures._value_set_pqi as pqi \n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-cm'\n      and pqi.value_set_name = 'traumatic_amputation_of_the_lower_extremity_diagnosis_codes'\n      and pqi.pqi_number = '16'\n    where c.encounter_id is not null\n),\n\npregnancy as (\n    select distinct\n        encounter_id\n      , data_source\n      , 'pregnancy' as exclusion_reason\n    from dev_thuxuan.ahrq_measures._stg_pqi_condition as c\n    inner join dev_thuxuan.ahrq_measures._value_set_pqi as pqi \n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-cm'\n      and pqi.value_set_name = 'mdc_14_principal_diagnosis_codes'\n      and pqi.pqi_number = 'appendix_f'\n    where c.encounter_id is not null\n),\n\nunion_cte as (\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from dev_thuxuan.ahrq_measures._int_pqi_shared_exclusion_union\n\n    union all\n\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from amputation\n\n    union all\n\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from pregnancy\n)\n\nselect\n    encounter_id\n  , data_source\n  , exclusion_reason\n  , row_number() over (\n      partition by encounter_id, data_source \n      order by exclusion_reason\n    ) as exclusion_number\n   , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom union_cte", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_16_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:17.850334Z", "completed_at": "2024-10-01T16:35:17.869206Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:17.870212Z", "completed_at": "2024-10-01T16:35:19.894545Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.2613468170166016, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f01112fe6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cbe0055_numerator", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from dev_thuxuan.quality_measures._int_cbe0055_denominator\n\n)\n\n, retina_test_code as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in  (\n          'diabetic retinal eye exam met'\n        , 'retinal or dilated eye exam'\n    )\n\n)\n\n, procedures as (\n\n    select\n        patient_id\n      , procedure_date\n      , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_procedure\n\n)\n\n, qualifying_patients as (\n\n    select \n          procedures.patient_id\n        , procedures.procedure_date as evidence_date\n    from procedures\n    inner join dev_thuxuan.quality_measures._int_cbe0055__performance_period pp\n    on procedure_date between\n        performance_period_begin and performance_period_end\n    inner join retina_test_code\n        on procedures.code = retina_test_code.code\n            and procedures.code_type = retina_test_code.code_system\n\n)\n\n, qualifying_patients_with_denominator as (\n\n    select \n          qualifying_patients.patient_id\n        , qualifying_patients.evidence_date\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , cast('1' as integer) as numerator_flag\n    from qualifying_patients\n    inner join denominator\n    on qualifying_patients.patient_id = denominator.patient_id\n\n)\n\n, add_data_types as (\n\n     select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(evidence_date as date) as evidence_date\n        , cast(null as TEXT) as evidence_value\n        , cast(numerator_flag as integer) as numerator_flag\n    from qualifying_patients_with_denominator\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , evidence_date\n    , evidence_value\n    , numerator_flag\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_cbe0055_numerator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:17.857408Z", "completed_at": "2024-10-01T16:35:17.870212Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:17.876295Z", "completed_at": "2024-10-01T16:35:19.945587Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.257694959640503, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f7c5-0001-987f0110be4e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cbe0101_exclusions", "compiled": true, "compiled_code": "with denominator as (\n    \n    select\n        patient_id\n    from dev_thuxuan.quality_measures._int_cbe0101_denominator\n\n)\n\n, exclusion_code as (\n\n    select\n        code\n      , code_system\n    from dev_thuxuan.quality_measures._value_set_codes\n    where code = '0518F'\n    -- further 1P modifier are only excluded\n)\n\n, hospice_palliative as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_thuxuan.quality_measures._int_shared_exclusions_hospice_palliative\n    where exclusion_date between (\n\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_cbe0101__performance_period\n\n) and (\n\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_cbe0101__performance_period\n\n)\n\n)\n\n, valid_hospice as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from hospice_palliative\n    where lower(exclusion_reason) in (\n            'hospice encounter'\n          , 'hospice care ambulatory'\n          , 'hospice diagnosis'\n    )\n\n)\n\n, procedures as (\n\n    select\n        patient_id\n      , procedure_date\n      , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n        , modifier_1\n        , modifier_2\n        , modifier_3\n        , modifier_4\n        , modifier_5\n    from dev_thuxuan.quality_measures._stg_procedure\n\n)\n\n, exclusion_procedures as (\n\n    select\n          patient_id\n        , procedure_date as exclusion_date\n        , 'Limited Mobility' as exclusion_reason\n    from procedures\n    inner join exclusion_code\n        on procedures.code = exclusion_code.code\n            and procedures.code_type = exclusion_code.code_system\n    where '1P' in (modifier_1, modifier_2, modifier_3, modifier_4, modifier_5)\n            \n)\n\n, exclusion_claims as (\n\n    select\n          patient_id\n        , coalesce(claim_end_date, claim_start_date) as exclusion_date\n        , 'Limited mobility' as exclusion_reason\n    from dev_thuxuan.quality_measures._stg_medical_claim medical_claim\n    inner join exclusion_code\n        on medical_claim.hcpcs_code = exclusion_code.code\n            and lower(exclusion_code.code_system) = 'hcpcs'\n    where '1P' in (hcpcs_modifier_1, hcpcs_modifier_2, hcpcs_modifier_3, hcpcs_modifier_4, hcpcs_modifier_5)\n\n)\n\n, exclusion_patients as (\n\n    select\n        patient_id\n      , exclusion_date\n      , exclusion_reason\n    from valid_hospice\n\n    union all\n\n    select\n        patient_id\n      , exclusion_date\n      , exclusion_reason\n    from exclusion_procedures\n\n    union all\n\n    select\n        patient_id\n      , exclusion_date\n      , exclusion_reason\n    from exclusion_claims\n\n)\n\n, combined_exclusions as (\n\n    select\n        exclusion_patients.patient_id\n      , exclusion_patients.exclusion_date\n      , exclusion_patients.exclusion_reason\n    from exclusion_patients\n    inner join denominator\n      on exclusion_patients.patient_id = denominator.patient_id\n\n)\n\n, add_data_types as (\n\n    select\n        distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(1 as integer) as exclusion_flag\n    from combined_exclusions\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_cbe0101_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:17.981527Z", "completed_at": "2024-10-01T16:35:17.990528Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:17.991527Z", "completed_at": "2024-10-01T16:35:19.980436Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.1678781509399414, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b666"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cbe0101_numerator", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select \n          patient_id\n        , encounter_date\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from dev_thuxuan.quality_measures._int_cbe0101_denominator\n\n)\n\n, fallcare_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_thuxuan.quality_measures._value_set_codes\n    where code = '0518F' -- Falls plan of care documented\n\n)\n\n, procedures as (\n\n    select\n        patient_id\n      , procedure_date\n      , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_procedure\n\n)\n\n, qualifying_procedures as (\n\n    select\n          patient_id\n        , procedure_date as evidence_date\n    from procedures\n    inner join fallcare_codes\n        on procedures.code = fallcare_codes.code\n            and procedures.code_type = fallcare_codes.code_system\n            \n)\n\n, qualifying_claims as (\n\n    select\n          patient_id\n        , coalesce(claim_end_date, claim_start_date) as evidence_date\n    from dev_thuxuan.quality_measures._stg_medical_claim medical_claim\n    inner join fallcare_codes\n        on medical_claim.hcpcs_code = fallcare_codes.code\n            and lower(fallcare_codes.code_system) = 'hcpcs'\n\n)\n\n, qualifying_cares as (\n\n    select\n          patient_id\n        , evidence_date\n    from qualifying_procedures\n\n    union all\n\n    select\n          patient_id\n        , evidence_date\n    from qualifying_claims\n\n)\n\n, combined_qualifying_patients as (\n\n    select\n          qualifying_cares.patient_id\n        , qualifying_cares.evidence_date\n        , cast(null as TEXT) as evidence_value\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , 1 as numerator_flag\n    from qualifying_cares\n    inner join denominator\n        on qualifying_cares.patient_id = denominator.patient_id\n    where evidence_date between\n        \n\n    dateadd(\n        year,\n        -1,\n        denominator.encounter_date\n        )\n\n\n        and \n        denominator.encounter_date -- within last 12 months of falls screening visit\n\n)\n\n, add_data_types as (\n\n     select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(numerator_flag as integer) as numerator_flag\n    from combined_qualifying_patients\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , evidence_date\n    , evidence_value\n    , numerator_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_cbe0101_numerator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:18.198276Z", "completed_at": "2024-10-01T16:35:18.210789Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:18.212296Z", "completed_at": "2024-10-01T16:35:20.007720Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.953174352645874, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b662"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm236_exclude_procedures_observations", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , age\n        , performance_period_begin\n        , performance_period_end\n    from dev_thuxuan.quality_measures._int_cqm236_denominator\n\n)\n\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_condition\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_procedure\n\n)\n\n, exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'dialysis services'\n        , 'end stage renal disease'\n        , 'esrd monthly outpatient services'\n        , 'kidney transplant'\n        , 'kidney transplant recipient'\n        , 'pregnancy'\n    )\n\n)\n\n, condition_exclusions as (\n\n    select\n          conditions.patient_id\n        , conditions.claim_id\n        , conditions.recorded_date\n        , exclusion_codes.concept_name\n    from conditions\n         inner join exclusion_codes\n            on conditions.code = exclusion_codes.code\n            and conditions.code_type = exclusion_codes.code_system\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name\n    from procedures\n         inner join exclusion_codes\n             on procedures.code = exclusion_codes.code\n             and procedures.code_type = exclusion_codes.code_system\n\n)\n\n, exclusions_unioned as (\n\n    select\n          patient_id\n        , recorded_date as exclusion_date\n        , concept_name as exclusion_reason\n    from condition_exclusions\n\n    union all\n\n    select\n          patient_id\n        , procedure_date as exclusion_date\n        , concept_name as exclusion_reason\n    from procedure_exclusions\n\n)\n\n, excluded_patients as (\n\n    select\n          exclusions_unioned.patient_id\n        , exclusions_unioned.exclusion_date\n        , exclusions_unioned.exclusion_reason\n        , case\n            when exclusion_reason = 'pregnancy' then 1\n            else 0\n          end as is_pregnant\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.age\n    from exclusions_unioned\n    inner join denominator\n        on exclusions_unioned.patient_id = denominator.patient_id\n\n)\n\n, exclusions_filtered as (\n\n    select\n          patient_id\n        , age\n        , exclusion_date\n        , exclusion_reason\n    from excluded_patients\n    where is_pregnant = 1\n        and exclusion_date between performance_period_begin and performance_period_end\n    \n    union all\n\n    select\n          patient_id\n        , age\n        , exclusion_date\n        , exclusion_reason\n    from excluded_patients\n    where is_pregnant = 0\n        and exclusion_date between performance_period_begin and performance_period_end\n          or (exclusion_date between \n\n    dateadd(\n        year,\n        -1,\n        performance_period_begin\n        )\n\n\n            and performance_period_end)\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , age\n    , 'measure specific exclusion for observation procedure' as exclusion_type\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom\n    exclusions_filtered", "relation_name": "dev_thuxuan.quality_measures._int_cqm236_exclude_procedures_observations"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:20.110457Z", "completed_at": "2024-10-01T16:35:20.118140Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:20.119219Z", "completed_at": "2024-10-01T16:35:21.830306Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.856266736984253, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d66a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm48_exclusions", "compiled": true, "compiled_code": "with valid_hospice_exclusions as (\n\n  select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n  from dev_thuxuan.quality_measures._int_shared_exclusions_hospice_palliative\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_cqm48__performance_period\n) and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_cqm48__performance_period\n)\n    and lower(exclusion_reason) in (\n            'hospice encounter'\n    )\n\n)\n\n, combined_exclusions as (\n\n  select\n      valid_hospice_exclusions.patient_id\n    , valid_hospice_exclusions.exclusion_date\n    , valid_hospice_exclusions.exclusion_reason\n  from valid_hospice_exclusions\n  inner join dev_thuxuan.quality_measures._int_cqm48_denominator as denominator\n      on valid_hospice_exclusions.patient_id = denominator.patient_id\n\n)\n\n, add_data_types as (\n\n    select\n        distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(1 as integer) as exclusion_flag\n    from combined_exclusions\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_cqm48_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:20.125179Z", "completed_at": "2024-10-01T16:35:20.136769Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:20.137789Z", "completed_at": "2024-10-01T16:35:21.834317Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.8671932220458984, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b66a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm48_numerator", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select \n          patient_id\n        , encounter_date\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from dev_thuxuan.quality_measures._int_cqm48_denominator\n\n)\n\n, involuntary_urination_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in (\n            'presence or absence of urinary incontinence assessed'\n    )\n\n)\n\n, procedures as (\n\n    select\n        patient_id\n      , procedure_date\n      , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_procedure\n\n)\n\n, qualifying_procedures as (\n\n    select\n          patient_id\n        , procedure_date as evidence_date\n    from procedures\n    inner join involuntary_urination_codes\n        on procedures.code = involuntary_urination_codes.code\n            and procedures.code_type = involuntary_urination_codes.code_system\n            \n)\n\n, qualifying_claims as (\n\n    select\n          patient_id\n        , coalesce(claim_end_date, claim_start_date) as evidence_date\n    from dev_thuxuan.quality_measures._stg_medical_claim medical_claim\n    inner join involuntary_urination_codes\n        on medical_claim.hcpcs_code = involuntary_urination_codes.code\n            and lower(involuntary_urination_codes.code_system) = 'hcpcs'\n\n)\n\n, qualifying_cares as (\n\n    select\n          patient_id\n        , evidence_date\n    from qualifying_procedures\n\n    union all\n\n    select\n          patient_id\n        , evidence_date\n    from qualifying_claims\n\n)\n\n, combined_qualifying_patients as (\n\n    select\n          qualifying_cares.patient_id\n        , qualifying_cares.evidence_date\n        , cast(null as TEXT) as evidence_value\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , 1 as numerator_flag\n    from qualifying_cares\n    inner join denominator\n        on qualifying_cares.patient_id = denominator.patient_id\n    where evidence_date between\n        \n\n    dateadd(\n        year,\n        -1,\n        denominator.encounter_date\n        )\n\n\n        and \n        denominator.encounter_date -- within last 12 months of visit\n\n)\n\n, add_data_types as (\n\n     select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(numerator_flag as integer) as numerator_flag\n    from combined_qualifying_patients\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , evidence_date\n    , evidence_value\n    , numerator_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_cqm48_numerator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:19.948509Z", "completed_at": "2024-10-01T16:35:19.958513Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:19.959513Z", "completed_at": "2024-10-01T16:35:21.832408Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.0680861473083496, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d666"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm236_numerator", "compiled": true, "compiled_code": "\n\nwith controlled_bp_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'most recent systolic blood pressure < 140 mmhg'  --G8752 hcpcs\n        , 'most recent diastolic blood pressure < 90 mmhg'  --G8754 hcpcs\n    )\n    \n)\n\n, denominator as (\n\n    select\n          patient_id\n        , measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n    from dev_thuxuan.quality_measures._int_cqm236_denominator\n\n)\n\n, encounters as (\n\n    select\n          patient_id\n        , encounter_type\n        , encounter_start_date\n        , encounter_end_date\n    from dev_thuxuan.quality_measures._stg_encounter\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , normalized_code\n        , normalized_description\n        , result\n    from dev_thuxuan.quality_measures._stg_observation\n    where lower(normalized_description) in \n        (\n              'systolic blood pressure'\n            , 'diastolic blood pressure'\n        )\n        and normalized_code not in (\n              '99473' -- Self-measured blood pressure using a device validated for clinical accuracy; patient education/training and device calibration\n            , '99474' -- Separate self-measurements of two readings one minute apart, twice daily over a 30-day period (minimum of 12 readings), collection of data reported by the patient and/or caregiver to the physician or other qualified health care professional, with report of average systolic and diastolic pressures and subsequent communication of a treatment plan to the patient\n        )\n\n)\n\n, labs as (\n\n    select \n          patient_id\n        , result_date\n        , collection_date\n        , result\n        , normalized_code\n    from dev_thuxuan.quality_measures._stg_lab_result\n    where normalized_code in \n    ('8480-6' --systolic\n    ,'8462-4') --diastolic\n    and\n    normalized_code_type = 'loinc'\n\n)\n\n, all_procedures as (\n\n    select\n        patient_id\n      , procedure_date\n      , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_procedure\n\n)\n\n, all_medical_claims as (\n    \n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n    from dev_thuxuan.quality_measures._stg_medical_claim\n\n)\n\n, controlled_bp_procedures as (\n\n    select\n          all_procedures.patient_id\n        , all_procedures.procedure_date as evidence_date\n        , controlled_bp_codes.code\n    from all_procedures\n    inner join controlled_bp_codes\n        on all_procedures.code_type = controlled_bp_codes.code_system\n            and all_procedures.code = controlled_bp_codes.code\n\n)\n\n, controlled_bp_medical_claims as (\n\n    select\n          all_medical_claims.patient_id\n        , coalesce(all_medical_claims.claim_end_date, all_medical_claims.claim_start_date) as evidence_date\n        , controlled_bp_codes.code\n    from all_medical_claims\n    inner join controlled_bp_codes\n        on all_medical_claims.hcpcs_code = controlled_bp_codes.code\n            and controlled_bp_codes.code_system = 'hcpcs'\n\n)\n\n, controlled_bp_patients_proc_claims as (\n\n    select\n          patient_id\n        , evidence_date\n        , code\n    from controlled_bp_procedures\n\n    union all\n    \n    select\n          patient_id\n        , evidence_date\n        , code\n    from controlled_bp_medical_claims\n\n)\n\n, controlled_bp_within_range_proc_claims as (\n\n    select\n          controlled_bp_patients_proc_claims.patient_id\n        , controlled_bp_patients_proc_claims.evidence_date\n        , controlled_bp_patients_proc_claims.code\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n    from controlled_bp_patients_proc_claims\n    inner join denominator\n        on controlled_bp_patients_proc_claims.patient_id = denominator.patient_id\n            and controlled_bp_patients_proc_claims.evidence_date between\n                denominator.performance_period_begin and denominator.performance_period_end\n\n)\n\n, procedure_claims_w_encounters as (\n\n    select\n          controlled_bp_within_range_proc_claims.patient_id\n        , controlled_bp_within_range_proc_claims.evidence_date\n        , controlled_bp_within_range_proc_claims.code\n        , case\n            when lower(encounters.encounter_type) in (\n                  'emergency department'\n                , 'acute inpatient'\n            )\n            then 0\n            else 1\n          end as is_valid_procedure_claims\n        , controlled_bp_within_range_proc_claims.measure_id\n        , controlled_bp_within_range_proc_claims.measure_name\n        , controlled_bp_within_range_proc_claims.measure_version\n        , controlled_bp_within_range_proc_claims.performance_period_begin\n        , controlled_bp_within_range_proc_claims.performance_period_end\n    from controlled_bp_within_range_proc_claims\n    left join encounters\n        on controlled_bp_within_range_proc_claims.patient_id = encounters.patient_id\n        and controlled_bp_within_range_proc_claims.evidence_date between \n            encounters.encounter_start_date and encounters.encounter_end_date \n    \n)\n\n, valid_procedures_and_claims as (\n\n    select\n          patient_id\n        , evidence_date\n        , code\n        , measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n    from procedure_claims_w_encounters\n    where is_valid_procedure_claims = 1\n\n)\n\n, systolic_bp_from_procedure_claims as (\n\n    select\n          patient_id\n        , evidence_date\n        , measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n    from valid_procedures_and_claims\n    where code = 'G8752' --systolic\n\n)\n\n, diastolic_bp_from_procedure_claims as (\n\n    select\n          patient_id\n        , evidence_date\n    from valid_procedures_and_claims\n    where code = 'G8754' --diastolic\n\n)\n\n, qualifying_controlled_bp_proc_claims as (\n\n    select\n          systolic_bp_from_procedure_claims.patient_id\n        , systolic_bp_from_procedure_claims.evidence_date\n        , measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n    from systolic_bp_from_procedure_claims\n    inner join diastolic_bp_from_procedure_claims\n        on systolic_bp_from_procedure_claims.patient_id = diastolic_bp_from_procedure_claims.patient_id\n            and systolic_bp_from_procedure_claims.evidence_date = diastolic_bp_from_procedure_claims.evidence_date\n\n)\n\n, observations_within_range as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , observations.normalized_code\n        , observations.normalized_description\n        , observations.result\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n    from observations\n    inner join denominator\n        on observations.patient_id = denominator.patient_id\n        and observations.observation_date between \n            denominator.performance_period_begin and denominator.performance_period_end\n\n)\n\n, labs_within_range as (\n\n    select\n          labs.patient_id\n        , labs.normalized_code\n        , coalesce(labs.result_date, labs.collection_date) as observation_date\n        , labs.result\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n    from labs\n    inner join denominator\n        on labs.patient_id = denominator.patient_id\n        and coalesce(labs.result_date,labs.collection_date) between \n            denominator.performance_period_begin and denominator.performance_period_end\n\n)\n\n, observations_with_encounters as (\n\n    select\n          observations_within_range.patient_id\n        , observations_within_range.observation_date\n        , observations_within_range.normalized_description\n        , observations_within_range.result\n        , observations_within_range.normalized_code\n        , case\n            when lower(encounters.encounter_type) in (\n                  'emergency department'\n                , 'acute inpatient'\n            )\n            then 0\n            else 1\n          end as is_valid_encounter_observation\n        , observations_within_range.measure_id\n        , observations_within_range.measure_name\n        , observations_within_range.measure_version\n        , observations_within_range.performance_period_begin\n        , observations_within_range.performance_period_end\n    from observations_within_range\n    left join encounters\n        on observations_within_range.patient_id = encounters.patient_id\n        and observations_within_range.observation_date between \n            encounters.encounter_start_date and encounters.encounter_end_date\n\n)\n\n, labs_with_encounters as (\n\n    select\n          labs_within_range.patient_id\n        , labs_within_range.normalized_code\n        , labs_within_range.observation_date\n        , labs_within_range.result\n        , case\n            when lower(encounters.encounter_type) in (\n                  'emergency department'\n                , 'acute inpatient'\n            )\n            then 0\n            else 1\n          end as is_valid_encounter_labs\n        , labs_within_range.measure_id\n        , labs_within_range.measure_name\n        , labs_within_range.measure_version\n        , labs_within_range.performance_period_begin\n        , labs_within_range.performance_period_end\n    from labs_within_range\n    left join encounters\n        on labs_within_range.patient_id = encounters.patient_id\n        and labs_within_range.observation_date between\n            encounters.encounter_start_date and encounters.encounter_end_date\n            \n)\n\n, obs_and_labs as (\n\n    select\n          patient_id\n        , observation_date\n        \n        , cast(result as float) as bp_reading\n        \n        , normalized_description\n        , measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n        , normalized_code\n    from observations_with_encounters\n    where is_valid_encounter_observation = 1\n\n    union all\n\n    select\n          patient_id\n        , observation_date\n        \n            , cast(result as float) as bp_reading\n        \n        , cast(null as TEXT) as normalized_description\n        , measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n        , normalized_code\n    from labs_with_encounters labs\n    where is_valid_encounter_labs = 1\n\n)\n\n, systolic_bp as (\n\n    select\n          patient_id\n        , observation_date\n        , bp_reading\n        , measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n        , row_number() over(partition by patient_id order by observation_date desc, bp_reading asc) as rn\n    from obs_and_labs\n    where lower(normalized_description) = 'systolic blood pressure'\n    or\n    normalized_code = '8480-6'\n\n)\n\n, diastolic_bp as (\n\n    select\n          patient_id\n        , observation_date\n        , bp_reading\n        , row_number() over(partition by patient_id order by observation_date desc, bp_reading asc) as rn\n    from obs_and_labs\n    where lower(normalized_description) = 'diastolic blood pressure'\n    or\n    normalized_code = '8462-4'\n\n)\n\n, least_recent_systolic_bp as (\n\n    select\n          patient_id\n        , observation_date\n        , bp_reading as systolic_bp\n        , measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n    from systolic_bp\n    where rn = 1\n\n)\n\n, least_recent_diastolic_bp as (\n\n    select\n          patient_id\n        , observation_date\n        , bp_reading as diastolic_bp\n    from diastolic_bp\n    where rn = 1\n\n)\n\n, patients_with_bp_readings as (\n\n    select\n          least_recent_systolic_bp.patient_id\n        , least_recent_systolic_bp.systolic_bp\n        , least_recent_diastolic_bp.diastolic_bp\n        , least_recent_systolic_bp.observation_date\n        , least_recent_systolic_bp.measure_id\n        , least_recent_systolic_bp.measure_name\n        , least_recent_systolic_bp.measure_version\n        , least_recent_systolic_bp.performance_period_begin\n        , least_recent_systolic_bp.performance_period_end\n    from least_recent_systolic_bp\n    inner join least_recent_diastolic_bp\n        on least_recent_systolic_bp.patient_id = least_recent_diastolic_bp.patient_id\n            and least_recent_systolic_bp.observation_date = least_recent_diastolic_bp.observation_date\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , observation_date\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , case\n            when systolic_bp < 140.0 and diastolic_bp < 90.0\n            then 1\n            else 0\n          end as numerator_flag\n    from patients_with_bp_readings\n\n    union all\n\n    select\n          patient_id\n        , evidence_date as observation_date\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , 1 as numerator_flag\n    from qualifying_controlled_bp_proc_claims\n\n)\n\n, add_data_types as (\n\n     select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(observation_date as date) as observation_date\n        , cast(numerator_flag as integer) as numerator_flag\n    from numerator\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , observation_date\n    , numerator_flag\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_cqm236_numerator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:20.160367Z", "completed_at": "2024-10-01T16:35:20.176911Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:20.176911Z", "completed_at": "2024-10-01T16:35:21.894192Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.8613100051879883, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f7c5-0001-987f0110be52"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm130_exclusions", "compiled": true, "compiled_code": "with exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in  (\n            'medical reason'\n    )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , recorded_date\n        , claim_id\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_condition\n    where recorded_date between (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_cqm130__performance_period\n) and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_cqm130__performance_period\n)\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_procedure\n    where procedure_date between (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_cqm130__performance_period\n) and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_cqm130__performance_period\n)\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n    from dev_thuxuan.quality_measures._stg_medical_claim\n    where coalesce(claim_end_date, claim_start_date) between (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_cqm130__performance_period\n) and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_cqm130__performance_period\n)\n\n)\n\n, condition_exclusions as (\n\n    select\n          conditions.patient_id\n        , conditions.claim_id\n        , conditions.recorded_date\n        , exclusion_codes.concept_name as concept_name\n    from conditions\n    inner join exclusion_codes\n      on conditions.code = exclusion_codes.code\n        and conditions.code_type = exclusion_codes.code_system\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name as concept_name\n    from procedures\n    inner join exclusion_codes\n      on procedures.code = exclusion_codes.code\n        and procedures.code_type = exclusion_codes.code_system\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , coalesce(medical_claim.claim_end_date, medical_claim.claim_start_date) as exclusion_date\n        , medical_claim.hcpcs_code\n        , exclusion_codes.concept_name as concept_name\n    from medical_claim\n    inner join exclusion_codes\n      on medical_claim.hcpcs_code = exclusion_codes.code\n        and exclusion_codes.code_system = 'hcpcs'\n\n)\n\n, patients_with_exclusions as (\n    \n    select \n          patient_id\n        , recorded_date as exclusion_date\n        , concept_name as exclusion_reason\n    from condition_exclusions\n\n    union all\n\n    select \n          patient_id\n        , procedure_date as exclusion_date\n        , concept_name as exclusion_reason\n    from procedure_exclusions\n\n    union all\n\n    select\n          patient_id\n        , exclusion_date\n        , concept_name as exclusion_reason\n    from med_claim_exclusions\n\n)\n\n, valid_exclusions as (\n\n  select \n        patients_with_exclusions.patient_id\n      , patients_with_exclusions.exclusion_date\n      , patients_with_exclusions.exclusion_reason  \n  from patients_with_exclusions\n  inner join dev_thuxuan.quality_measures._int_cqm130_denominator as denominator\n      on patients_with_exclusions.patient_id = denominator.patient_id\n\n)\n\n, add_data_types as (\n\n    select\n        distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(1 as integer) as exclusion_flag\n    from valid_exclusions\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_cqm130_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:20.169910Z", "completed_at": "2024-10-01T16:35:20.181596Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:20.182505Z", "completed_at": "2024-10-01T16:35:22.101723Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.175814390182495, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f01112fea"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm130_numerator", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , procedure_encounter_date\n        , claims_encounter_date\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from dev_thuxuan.quality_measures._int_cqm130_denominator\n\n)\n\n, medication_code as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in  (\n          'eligible clinician attests to documenting current medications'\n    )\n\n)\n\n, procedures as (\n\n    select\n        patient_id\n      , procedure_date\n      , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_procedure\n\n)\n\n, documenting_meds_procedures as (\n\n    select\n          patient_id\n        , procedure_date\n    from procedures\n    inner join medication_code\n      on procedures.code = medication_code.code\n        and procedures.code_type = medication_code.code_system\n\n)\n\n, documenting_meds_claims as (\n\n    select\n          patient_id\n        , coalesce(claim_end_date,claim_start_date) as encounter_date\n    from dev_thuxuan.quality_measures._stg_medical_claim medical_claim\n    inner join medication_code\n        on medical_claim.hcpcs_code = medication_code.code\n          and medication_code.code_system = 'hcpcs'\n\n)\n\n, qualifying_procedure as (\n\n    select \n          documenting_meds_procedures.patient_id\n        , documenting_meds_procedures.procedure_date as encounter_date\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n    from documenting_meds_procedures\n    inner join denominator\n      on documenting_meds_procedures.patient_id = denominator.patient_id\n        and documenting_meds_procedures.procedure_date = denominator.procedure_encounter_date\n\n)\n\n, qualifying_claims as (\n    \n    select \n          documenting_meds_claims.patient_id\n        , documenting_meds_claims.encounter_date\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n    from documenting_meds_claims\n    inner join denominator\n      on documenting_meds_claims.patient_id = denominator.patient_id\n        and documenting_meds_claims.encounter_date = denominator.claims_encounter_date\n\n)\n\n, qualifying_cares as (\n\n    select\n          patient_id\n        , encounter_date\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , cast(1 as integer) as numerator_flag\n    from qualifying_procedure\n\n    union all\n\n    select\n          patient_id\n        , encounter_date\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , cast(1 as integer) as numerator_flag\n    from qualifying_claims\n\n)\n\n, add_data_types as (\n\n     select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(encounter_date as date) as evidence_date\n        , cast(null as TEXT) as evidence_value\n        , cast(numerator_flag as integer) as numerator_flag\n      from qualifying_cares\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , evidence_date\n    , evidence_value\n    , numerator_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_cqm130_numerator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:22.020699Z", "completed_at": "2024-10-01T16:35:22.028678Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:22.029770Z", "completed_at": "2024-10-01T16:35:23.816445Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.0204427242279053, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f01112fee"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0041_numerator", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select \n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from dev_thuxuan.quality_measures._int_nqf0041_denominator\n\n)\n\n, influenza_vaccination_code as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'influenza vaccination'\n        , 'influenza vaccine'\n        , 'influenza virus laiv immunization'\n        , 'influenza virus laiv procedure'\n    )\n\n)\n\n, procedure_vaccination as (\n\n    select\n        patient_id\n      , procedure_date\n    from dev_thuxuan.quality_measures._stg_procedure as procedures\n    inner join influenza_vaccination_code\n        on coalesce(procedures.normalized_code, procedures.source_code) = influenza_vaccination_code.code\n            and coalesce(procedures.normalized_code_type, procedures.source_code_type) = influenza_vaccination_code.code_system\n\n)\n\n, claims_vaccination as (\n    \n    select \n          patient_id\n        , coalesce(claim_start_date,claim_end_date) as min_date\n        , coalesce(claim_end_date,claim_start_date) as max_date\n    from dev_thuxuan.quality_measures._stg_medical_claim medical_claim\n    inner join influenza_vaccination_code\n        on medical_claim.hcpcs_code = influenza_vaccination_code.code\n\n)\n\n, qualifying_procedures as (\n\n    select\n          procedure_vaccination.patient_id\n        , procedure_vaccination.procedure_date as evidence_date\n    from procedure_vaccination\n    inner join dev_thuxuan.quality_measures._int_nqf0041__performance_period pp\n        on procedure_date between \n            pp.lookback_period_august and\n                pp.performance_period_end\n\n)\n\n, qualifying_claims as (\n\n    select \n          claims_vaccination.patient_id\n        , claims_vaccination.max_date as evidence_date\n    from claims_vaccination\n    inner join dev_thuxuan.quality_measures._int_nqf0041__performance_period pp\n        on max_date between\n            pp.lookback_period_august and\n                pp.performance_period_end\n\n)\n\n, qualified_patients as (\n\n    select\n          patient_id\n        , evidence_date\n    from qualifying_procedures\n\n    union all\n\n    select\n          patient_id\n        , evidence_date\n    from qualifying_claims\n\n)\n\n, combined_qualifying_patients as (\n\n    select\n          qualified_patients.patient_id\n        , qualified_patients.evidence_date\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , 1 as numerator_flag\n    from qualified_patients\n    inner join denominator\n        on qualified_patients.patient_id = denominator.patient_id\n\n)\n\n, add_data_types as (\n\n     select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(evidence_date as date) as evidence_date\n        , cast(null as TEXT) as evidence_value\n        , cast(numerator_flag as integer) as numerator_flag\n    from combined_qualifying_patients\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , evidence_date\n    , evidence_value\n    , numerator_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_nqf0041_numerator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:22.034774Z", "completed_at": "2024-10-01T16:35:22.045305Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:22.045305Z", "completed_at": "2024-10-01T16:35:23.819352Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.0063438415527344, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d672"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0059_numerator", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from dev_thuxuan.quality_measures._int_nqf0059_denominator\n\n)\n\n, hba1c_test_code as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    From dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in  (\n        'hba1c laboratory test'\n    )\n\n)\n\n, labs as (\n\n    select\n        patient_id\n        , result\n        , result_date\n        , collection_date\n        , source_code_type\n        , source_code\n        , normalized_code_type\n        , normalized_code\n    from dev_thuxuan.quality_measures._stg_lab_result\n\n)\n\n, qualifying_labs as (\n\n    select\n      labs.patient_id\n    , labs.result as evidence_value\n    , coalesce(collection_date,result_date) as evidence_date\n    , hba1c_test_code.concept_name\n    , row_number() over(partition by labs.patient_id order by coalesce(collection_date,result_date) desc) as rn\n    from labs\n    inner join hba1c_test_code\n        on coalesce(labs.normalized_code, labs.source_code) = hba1c_test_code.code\n            and coalesce(labs.normalized_code_type, labs.source_code_type) = hba1c_test_code.code_system\n    left join denominator\n        on labs.patient_id = denominator.patient_id\n    where coalesce(collection_date,result_date) <= denominator.performance_period_end\n   \n        and regexp_like(result, '^[+-]?([0-9]*[.])?[0-9]+$')\n    \n\n)\n\n, recent_readings as (\n\n    select\n          patient_id\n        , evidence_date\n        , evidence_value\n    from qualifying_labs\n    where rn = 1\n\n)\n\n, qualifying_patients as (\n\n    select\n          denominator.*\n        , recent_readings.evidence_date\n        , recent_readings.evidence_value\n    from denominator\n    left join recent_readings\n        on denominator.patient_id = recent_readings.patient_id\n\n)\n\n, test_not_performed as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , evidence_date\n        , evidence_value\n        , 1 as numerator_flag\n    from qualifying_patients\n    where\n        (evidence_date not between performance_period_begin and performance_period_end)\n        or evidence_date is null\n\n)\n\n, valid_patients as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , evidence_date\n        , evidence_value\n        , case\n            when cast(evidence_value as numeric(28,6)) > 9.0 then 1\n            else 0\n          end as numerator_flag\n    from qualifying_patients\n    where evidence_date between performance_period_begin and performance_period_end\n\n)\n\n, numerator as (\n\n    select * from valid_patients\n\n    union all\n\n    select * from test_not_performed\n\n)\n\n, add_data_types as (\n\n     select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(numerator_flag as integer) as numerator_flag\n    from numerator\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , evidence_date\n    , evidence_value\n    , numerator_flag\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_nqf0059_numerator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:22.349739Z", "completed_at": "2024-10-01T16:35:22.358657Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:22.358657Z", "completed_at": "2024-10-01T16:35:23.854596Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.7223095893859863, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d676"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0097_exclusions", "compiled": true, "compiled_code": "with valid_hospice_exclusions as (\n\n  select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n  from dev_thuxuan.quality_measures._int_shared_exclusions_hospice_palliative\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_nqf0097__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_nqf0097__performance_period\n\n)\n    and lower(exclusion_reason) in (\n            'hospice encounter'\n    )\n\n)\n\n, combined_exclusions as (\n\n  select \n      valid_hospice_exclusions.patient_id\n    , valid_hospice_exclusions.exclusion_date\n    , valid_hospice_exclusions.exclusion_reason\n    , valid_hospice_exclusions.exclusion_type\n  from valid_hospice_exclusions\n  inner join dev_thuxuan.quality_measures._int_nqf0097_denominator as denominator\n      on valid_hospice_exclusions.patient_id = denominator.patient_id\n\n)\n\n, add_data_types as (\n\n    select\n        distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , 1 as exclusion_flag\n    from combined_exclusions\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_nqf0097_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:21.971338Z", "completed_at": "2024-10-01T16:35:21.977386Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:21.977386Z", "completed_at": "2024-10-01T16:35:23.924547Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.10268235206604, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d66e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_numerator", "compiled": true, "compiled_code": "\n\n\n/*\nPatients with one or more screenings for colorectal cancer. Appropriate screenings are defined by any one of the\nfollowing criteria:\n- Fecal occult blood test (FOBT) during the measurement period\n- Flexible sigmoidoscopy during the measurement period or the four years prior to the measurement period\n- Colonoscopy during the measurement period or the nine years prior to the measurement period\n- Computed tomography (CT) colonography during the measurement period or the four years prior to the\nmeasurement period.\n- Fecal immunochemical DNA test (FIT-DNA) during the measurement period or the two years prior to the\nmeasurement period.\n\n*/\n\nwith denominator as (\n\n    select\n          patient_id\n    from dev_thuxuan.quality_measures._int_nqf0034_denominator\n\n)\n\n, screening_codes as (\n\n    select\n        code\n      , case code_system\n          when 'SNOMEDCT' then 'snomed-ct'\n          when 'ICD9CM' then 'icd-9-cm'\n          when 'ICD10CM' then 'icd-10-cm'\n          when 'CPT' then 'hcpcs'\n          when 'ICD10PCS' then 'icd-10-pcs'\n        else lower(code_system) \n        end as code_system\n      , concept_name\n    from dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in  (\n          'fecal occult blood test (fobt)' -- mp\n        , 'flexible sigmoidoscopy' --mp+4\n        , 'colonoscopy' -- mp+9\n        , 'ct colonography' -- mp+4\n        , 'sdna fit test' -- mp+2\n    )\n\n)\n\n, screening_periods  as (\n\n    select \n          code\n        , code_system\n        , concept_name\n        , case concept_name\n            when 'Fecal Occult Blood Test (FOBT)' then pp.performance_period_begin --mp\n            when 'Flexible Sigmoidoscopy' then pp.performance_period_begin_4yp --mp+4\n            when 'Colonoscopy' then pp.performance_period_begin_9yp -- mp+9\n            when 'CT Colonography' then pp.performance_period_begin_4yp -- mp+4\n            when 'sDNA FIT Test' then pp.performance_period_begin_2yp -- mp+2\n          else pp.performance_period_begin \n          end as effective_performance_period_begin\n        , performance_period_end\n    from screening_codes\n    inner join dev_thuxuan.quality_measures._int_nqf0034__performance_period pp\n        on 1 = 1\n    \n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n    from dev_thuxuan.quality_measures._stg_medical_claim\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_observation\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce(\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_procedure\n\n)\n\n, labs as (\n\n    select  \n      patient_id\n    , result_date\n    , collection_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    from dev_thuxuan.quality_measures._stg_lab_result\n\n)\n\n, qualifying_claims as (\n\n    select\n          medical_claim.patient_id\n        , coalesce( medical_claim.claim_start_date, medical_claim.claim_end_date) as claim_date\n    , screening_codes.concept_name\n    from medical_claim\n    inner join screening_periods\n        on medical_claim.claim_start_date between screening_periods.effective_performance_period_begin and screening_periods.performance_period_end\n        or medical_claim.claim_end_date between screening_periods.effective_performance_period_begin and screening_periods.performance_period_end\n    inner join screening_codes\n            on medical_claim.hcpcs_code = screening_codes.code\n    where screening_codes.code_system in ('hcpcs', 'cpt' )\n\n)\n\n, qualifying_observations as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , screening_codes.concept_name\n    from observations\n    inner join screening_periods\n        on observations.observation_date between screening_periods.effective_performance_period_begin and screening_periods.performance_period_end\n     inner join screening_codes\n         on observations.code = screening_codes.code\n         and observations.code_type = screening_codes.code_system\n)\n\n, qualifying_procedures as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , screening_codes.concept_name\n    from procedures\n    inner join screening_periods\n        on procedures.procedure_date between screening_periods.effective_performance_period_begin and screening_periods.performance_period_end\n     inner join screening_codes\n         on procedures.code = screening_codes.code\n         and procedures.code_type = screening_codes.code_system\n\n)\n\n, normalized_code_labs as (\n  select\n      patient_id\n    , coalesce(collection_date, result_date) as lab_date\n    , screening_codes.concept_name\n  from labs\n  inner join screening_periods\n    on coalesce(labs.collection_date, labs.result_date) >= screening_periods.effective_performance_period_begin\n    and coalesce(labs.collection_date, labs.result_date) <= screening_periods.performance_period_end\n  inner join screening_codes\n    on labs.normalized_code = screening_codes.code\n    and labs.normalized_code_type = screening_codes.code_system\n)\n\n, source_code_labs as (\n\n  select\n      patient_id\n    , coalesce(collection_date, result_date) as lab_date\n    , screening_codes.concept_name\n  from labs\n  inner join screening_periods\n    on coalesce(labs.collection_date, labs.result_date) >= screening_periods.effective_performance_period_begin\n    and coalesce(labs.collection_date, labs.result_date) <= screening_periods.performance_period_end\n  inner join screening_codes\n    on labs.source_code = screening_codes.code\n    and labs.source_code_type = screening_codes.code_system\n\n)\n\n, qualifying_labs_union as (\n\n  select \n        patient_id\n      , lab_date\n      , concept_name\n  from normalized_code_labs\n\n  union all\n\n  select \n        patient_id\n      , lab_date\n      , concept_name\n  from source_code_labs\n\n)\n\n, qualifying_labs as (\n\n  select distinct\n        patient_id\n      , lab_date\n      , concept_name\n  from qualifying_labs_union\n\n)\n\n, qualifying_events as (\n\n    select\n          patient_id\n        , claim_date as evidence_date\n        , concept_name as evidence\n    from qualifying_claims\n\n    union all\n\n    select\n          patient_id\n        , observation_date as evidence_date\n        , concept_name as evidence\n    from qualifying_observations\n\n    union all\n\n    select\n          patient_id\n        , procedure_date as evidence_date\n        , concept_name as evidence\n    from qualifying_procedures\n\n    union all\n\n    select\n          patient_id\n        , lab_date as evidence_date\n        , concept_name as evidence\n    from qualifying_labs\n\n)\n\nselect\n      cast( qualifying_events.patient_id as TEXT) as patient_id\n    , cast( evidence_date as date) as evidence_date\n    , cast( evidence as TEXT) as evidence\nfrom qualifying_events\ninner join denominator\n    on qualifying_events.patient_id = denominator.patient_id", "relation_name": "dev_thuxuan.quality_measures._int_nqf0034_numerator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:21.995366Z", "completed_at": "2024-10-01T16:35:22.002387Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:22.002387Z", "completed_at": "2024-10-01T16:35:24.119107Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.4199180603027344, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f01112ff2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0041_exclusions", "compiled": true, "compiled_code": "with denominator as (\n    \n    select\n        patient_id\n    from dev_thuxuan.quality_measures._int_nqf0041_denominator\n\n)\n\n, exclusion_codes as (\n\n  select \n      code\n    , code_system\n    , concept_name\n  from dev_thuxuan.quality_measures._value_set_codes\n  where lower(concept_name) in (\n        'influenza immunization not ordered or administered reason documented'\n    )\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_procedure\n    where procedure_date between (\n\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_nqf0041__performance_period\n\n) and (\n\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_nqf0041__performance_period\n\n)\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n    from dev_thuxuan.quality_measures._stg_medical_claim\n    where coalesce(claim_end_date, claim_start_date) between (\n\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_nqf0041__performance_period\n\n) and (\n\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_nqf0041__performance_period\n\n)\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name as concept_name\n    from procedures\n    inner join exclusion_codes\n        on procedures.code = exclusion_codes.code\n          and procedures.code_type = exclusion_codes.code_system\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , coalesce(medical_claim.claim_end_date, medical_claim.claim_start_date) as exclusion_date\n        , medical_claim.hcpcs_code\n        , exclusion_codes.concept_name as concept_name\n    from medical_claim\n    inner join exclusion_codes\n      on medical_claim.hcpcs_code = exclusion_codes.code\n        and exclusion_codes.code_system = 'hcpcs'\n\n)\n\n, hospice_palliative as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n        , exclusion_type\n    from dev_thuxuan.quality_measures._int_shared_exclusions_hospice_palliative\n    where exclusion_date between (\n\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_nqf0041__performance_period\n\n) and (\n\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_nqf0041__performance_period\n\n)\n\n)\n\n, valid_hospice_palliative as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n        , exclusion_type\n    from hospice_palliative\n    where exclusion_reason in (\n          'hospice care ambulatory'\n        , 'hospice encounter'\n    )\n\n)\n\n, valid_exclusions as (\n\n    select\n        patient_id\n      , procedure_date as exclusion_date\n      , concept_name as exclusion_reason\n    from procedure_exclusions\n\n    union all\n\n    select\n        patient_id\n      , exclusion_date\n      , concept_name as exclusion_reason\n    from med_claim_exclusions\n\n    union all\n\n    select\n        patient_id\n      , exclusion_date\n      , exclusion_reason\n    from valid_hospice_palliative\n\n)\n\n, combined_exclusions as (\n\n    select\n        valid_exclusions.patient_id\n      , valid_exclusions.exclusion_date\n      , valid_exclusions.exclusion_reason\n    from valid_exclusions\n    inner join denominator\n      on valid_exclusions.patient_id = denominator.patient_id\n\n)\n\n, add_data_types as (\n\n    select\n        distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(1 as integer) as exclusion_flag\n    from combined_exclusions\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_nqf0041_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:24.047226Z", "completed_at": "2024-10-01T16:35:24.060535Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:24.060535Z", "completed_at": "2024-10-01T16:35:25.302157Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.3599576950073242, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f7c5-0001-987f0110be56"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0097_numerator", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , discharge_date\n    from dev_thuxuan.quality_measures._int_nqf0097_denominator\n\n)\n\n, reconciliation_codes as (\n\n    select\n          concept_name\n        , code\n        , code_system\n    from dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in (\n        'medication reconciliation post discharge'\n    )\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_procedure\n\n)\n\n, reconciliation_procedures as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n    from procedures\n    inner join reconciliation_codes\n        on procedures.code = reconciliation_codes.code\n            and procedures.code_type = reconciliation_codes.code_system\n\n)\n\n, qualifying_patients_with_denominator as (\n\n    select\n        denominator.patient_id\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , reconciliation_procedures.procedure_date as evidence_date\n        , 1 as numerator_flag\n    from denominator\n    inner join reconciliation_procedures\n        on denominator.patient_id = reconciliation_procedures.patient_id\n    where datediff(\n        day,\n        denominator.discharge_date,\n        reconciliation_procedures.procedure_date\n        ) between 0 and 30\n\n)\n\n, add_data_types as (\n\n     select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(evidence_date as date) as evidence_date\n        , cast(null as TEXT) as evidence_value\n        , cast(numerator_flag as integer) as numerator_flag\n    from qualifying_patients_with_denominator\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , evidence_date\n    , evidence_value\n    , numerator_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_nqf0097_numerator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:24.054404Z", "completed_at": "2024-10-01T16:35:24.065051Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:24.065051Z", "completed_at": "2024-10-01T16:35:25.345763Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.4095935821533203, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d67a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ed_classification__summary", "compiled": true, "compiled_code": "\n\n\nselect\n    class.encounter_id\n    , cat.classification_name as ed_classification_description\n    , cat.classification_order as ed_classification_order\n    , class.patient_id\n    , class.encounter_end_date\n    , date_part('year', class.encounter_end_date) || \n\n    case when 2 = 0\n        then ''\n    else\n        right(\n            '00' || date_part('month', class.encounter_end_date),\n            2\n        )\n    end as year_month\n    , class.primary_diagnosis_code\n    , class.primary_diagnosis_description\n    , class.paid_amount\n    , class.allowed_amount\n    , class.charge_amount\n    , class.facility_id\n    , fac_prov.provider_organization_name as facility_name\n    , practice_state as facility_state\n    , practice_city as facility_city\n    , practice_zip_code as facility_zip_code\n    , pat.sex as patient_sex\n    , floor(datediff(\n        hour,\n        pat.birth_date,\n        class.encounter_end_date\n        ) / 8766.0) as patient_age\n    , zip_code as patient_zip_code\n    , latitude as patient_latitude\n    , longitude as patient_longitude\n    , race as patient_race\nfrom dev_thuxuan.ed_classification._int_filter_encounter_with_classification class\ninner join dev_thuxuan.ed_classification._value_set_categories cat\n    on class.classification = cat.classification\nleft join dev_thuxuan.terminology.provider fac_prov \n    on class.facility_id = fac_prov.npi\nleft join dev_thuxuan.ed_classification.ed_classification__stg_patient pat\n    on class.patient_id = pat.patient_id", "relation_name": "dev_thuxuan.ed_classification.summary"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:24.091520Z", "completed_at": "2024-10-01T16:35:24.103092Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:24.103092Z", "completed_at": "2024-10-01T16:35:25.423718Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.5438659191131592, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b66e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_numerator", "compiled": true, "compiled_code": "\n\n/*\n    Eligible population from the denominator model before exclusions\n*/\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , performance_period_lookback\n        , measure_id\n        , measure_name\n        , measure_version\n    from dev_thuxuan.quality_measures._int_nqf2372_denominator\n\n)\n\n, mammography_codes as (\n\n    select\n          code\n        , code_system\n    from dev_thuxuan.quality_measures._value_set_codes\n    where concept_name = 'Mammography'\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n    from dev_thuxuan.quality_measures._stg_medical_claim\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_observation\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce(\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_procedure\n\n)\n\n, qualifying_claims as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n    from medical_claim\n         inner join mammography_codes\n            on medical_claim.hcpcs_code = mammography_codes.code\n    where mammography_codes.code_system = 'hcpcs'\n\n)\n\n, qualifying_observations as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n    from observations\n         inner join mammography_codes\n             on observations.code = mammography_codes.code\n             and observations.code_type = mammography_codes.code_system\n)\n\n, qualifying_procedures as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n    from procedures\n         inner join mammography_codes\n             on procedures.code = mammography_codes.code\n             and procedures.code_type = mammography_codes.code_system\n\n)\n\n/*\n    Check if patients in the eligible population have had a screening,\n    diagnostic, film, digital or digital breast tomosynthesis (3D)\n    mammography results documented and reviewed.\n*/\n\n, patients_with_mammograms as (\n\n    select\n          denominator.patient_id\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.performance_period_lookback\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , case\n            when qualifying_claims.claim_start_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then qualifying_claims.claim_start_date\n            when qualifying_claims.claim_end_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then qualifying_claims.claim_end_date\n            when qualifying_observations.observation_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then qualifying_observations.observation_date\n            when qualifying_procedures.procedure_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then qualifying_procedures.procedure_date\n            else null\n          end as evidence_date\n        , case\n            when qualifying_claims.claim_start_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then 1\n            when qualifying_claims.claim_end_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then 1\n            when qualifying_observations.observation_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then 1\n            when qualifying_procedures.procedure_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then 1\n            else 0\n          end as numerator_flag\n    from denominator\n         left join qualifying_claims\n            on denominator.patient_id = qualifying_claims.patient_id\n        left join qualifying_observations\n            on denominator.patient_id = qualifying_observations.patient_id\n        left join qualifying_procedures\n            on denominator.patient_id = qualifying_procedures.patient_id\n\n)\n\n, add_data_types as (\n\n     select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(evidence_date as date) as evidence_date\n        , cast(numerator_flag as integer) as numerator_flag\n    from patients_with_mammograms\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , evidence_date\n    , numerator_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_nqf2372_numerator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:24.085519Z", "completed_at": "2024-10-01T16:35:24.097058Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:24.098070Z", "completed_at": "2024-10-01T16:35:25.623803Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.7368810176849365, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f7c5-0001-987f0110be5a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_exclude_mastectomy", "compiled": true, "compiled_code": "\n\n/*\n    Women who had a bilateral mastectomy or who have a history of a bilateral\n    mastectomy or for whom there is evidence of a right and a left\n    unilateral mastectomy\n*/\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n    from dev_thuxuan.quality_measures._int_nqf2372_denominator\n\n)\n\n, exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_thuxuan.quality_measures._value_set_codes\n    where concept_name in (\n          'Bilateral Mastectomy'\n        , 'History of bilateral mastectomy'\n        , 'Status Post Left Mastectomy'\n        , 'Status Post Right Mastectomy'\n        , 'Unilateral Mastectomy Left'\n        , 'Unilateral Mastectomy Right'\n        , 'Unilateral Mastectomy, Unspecified Laterality'\n    )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , recorded_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_condition\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_observation\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_procedure\n\n)\n\n, condition_exclusions as (\n\n    select\n          conditions.patient_id\n        , conditions.recorded_date\n        , exclusion_codes.concept_name\n    from conditions\n         inner join exclusion_codes\n             on conditions.code = exclusion_codes.code\n             and conditions.code_type = exclusion_codes.code_system\n\n)\n\n, observation_exclusions as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , exclusion_codes.concept_name\n    from observations\n         inner join exclusion_codes\n             on observations.code = exclusion_codes.code\n             and observations.code_type = exclusion_codes.code_system\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name\n    from procedures\n         inner join exclusion_codes\n             on procedures.code = exclusion_codes.code\n             and procedures.code_type = exclusion_codes.code_system\n\n)\n\n, all_mastectomy as (\n\n    select\n          denominator.patient_id\n        , condition_exclusions.recorded_date as exclusion_date\n        , condition_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join condition_exclusions\n            on denominator.patient_id = condition_exclusions.patient_id\n\n    union all\n\n    select\n          denominator.patient_id\n        , observation_exclusions.observation_date as exclusion_date\n        , observation_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join observation_exclusions\n            on denominator.patient_id = observation_exclusions.patient_id\n\n    union all\n\n    select\n          denominator.patient_id\n        , procedure_exclusions.procedure_date as exclusion_date\n        , procedure_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join procedure_exclusions\n            on denominator.patient_id = procedure_exclusions.patient_id\n\n)\n\n/*\n    Women who had a bilateral mastectomy or who have a history of a bilateral\n    mastectomy\n*/\n, bilateral_mastectomy as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from all_mastectomy\n    where exclusion_reason in (\n          'Bilateral Mastectomy'\n        , 'History of bilateral mastectomy'\n    )\n\n)\n\n, right_mastectomy as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from all_mastectomy\n    where exclusion_reason in (\n          'Status Post Right Mastectomy'\n        , 'Unilateral Mastectomy Right'\n    )\n\n)\n\n, left_mastectomy as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from all_mastectomy\n    where exclusion_reason in (\n          'Status Post Left Mastectomy'\n        , 'Unilateral Mastectomy Left'\n    )\n\n)\n\n, unspecified_mastectomy as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from all_mastectomy\n    where exclusion_reason in (\n        'Unilateral Mastectomy, Unspecified Laterality'\n    )\n\n)\n\n/*\n    Women for whom there is evidence of a right AND a left unilateral mastectomy\n    or unspecific mastectomies on different dates\n*/\n, unilateral_mastectomy as (\n\n    select\n          right_mastectomy.patient_id\n        , right_mastectomy.exclusion_date\n        , right_mastectomy.exclusion_reason\n    from right_mastectomy\n         inner join left_mastectomy\n            on right_mastectomy.patient_id = left_mastectomy.patient_id\n\n    union all\n\n    select\n          unspecified_mastectomy.patient_id\n        , unspecified_mastectomy.exclusion_date\n        , unspecified_mastectomy.exclusion_reason\n    from unspecified_mastectomy\n         inner join unspecified_mastectomy as self_join\n            on unspecified_mastectomy.patient_id = self_join.patient_id\n            and unspecified_mastectomy.exclusion_date <> self_join.exclusion_date\n\n)\n\n, unioned as (\n\n    select * from bilateral_mastectomy\n    union all\n    select * from unilateral_mastectomy\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom unioned", "relation_name": "dev_thuxuan.quality_measures._int_nqf2372_exclude_mastectomy"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:24.421110Z", "completed_at": "2024-10-01T16:35:24.434109Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:24.435109Z", "completed_at": "2024-10-01T16:35:26.149083Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.8782989978790283, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d67e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0053_exclude_procedures_medications", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n    from dev_thuxuan.quality_measures._int_nqf0053_denominator\n\n)\n\n, value_sets as (\n\n    select\n          concept_name\n        , code\n        , code_system\n    from dev_thuxuan.quality_measures._value_set_codes\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_procedure\n\n)\n\n, pharmacy_claims as (\n\n    select\n          patient_id\n        , dispensing_date\n        , ndc_code\n    from dev_thuxuan.quality_measures._stg_pharmacy_claim\n\n)\n\n, medications as (\n\n    select\n        patient_id\n      , encounter_id\n      , prescribing_date\n      , dispensing_date\n      , source_code\n      , source_code_type\n    from dev_thuxuan.quality_measures._stg_medication\n\n)\n\n, bone_density_test_codes as (\n\n    select\n          concept_name\n        , code\n        , code_system\n    from value_sets\n    where lower(concept_name) in (\n          'bone mineral density test'\n        , 'bone mineral density tests cpt'\n        , 'bone mineral density tests hcpcs'\n        , 'bone mineral density tests icd10pcs'\n        , 'dexa dual energy xray absorptiometry, bone density'\n    )\n\n)\n\n, osteoporosis_medication_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from value_sets\n    where lower(concept_name) in \n        ( \n          'osteoporosis medications for urology care'\n        , 'osteoporosis medication'\n        , 'bisphosphonates'\n        )\n\n)\n\n, bone_density_test_procedures as (\n\n    select\n          procedures.*\n        , bone_density_test_codes.concept_name\n    from procedures\n    inner join bone_density_test_codes\n        on procedures.code = bone_density_test_codes.code\n            and procedures.code_type = bone_density_test_codes.code_system\n\n)\n\n, osteoporosis_pharmacy_claims as (\n\n    select\n        pharmacy_claims.patient_id\n      , pharmacy_claims.dispensing_date\n      , pharmacy_claims.ndc_code\n      , osteoporosis_medication_codes.concept_name\n    from pharmacy_claims\n    inner join osteoporosis_medication_codes\n        on pharmacy_claims.ndc_code = osteoporosis_medication_codes.code\n            and lower(osteoporosis_medication_codes.code_system) = 'ndc'\n            \n)\n\n, osteoporosis_medications as (\n\n    select\n        medications.patient_id\n      , medications.encounter_id\n      , medications.prescribing_date\n      , medications.dispensing_date\n      , medications.source_code\n      , medications.source_code_type\n      , osteoporosis_medication_codes.concept_name\n    from medications\n    inner join osteoporosis_medication_codes\n        on medications.source_code = osteoporosis_medication_codes.code\n            and medications.source_code_type = osteoporosis_medication_codes.code_system\n\n)\n\n, valid_osteoporosis_medications_procedures as (\n\n    select\n          denominator.patient_id\n        , osteoporosis_pharmacy_claims.concept_name as exclusion_reason\n        , osteoporosis_pharmacy_claims.dispensing_date as exclusion_date\n    from denominator\n    inner join osteoporosis_pharmacy_claims\n        on denominator.patient_id = osteoporosis_pharmacy_claims.patient_id\n    where osteoporosis_pharmacy_claims.dispensing_date\n        between\n            \n\n    dateadd(\n        month,\n        -12,\n        denominator.performance_period_begin\n        )\n\n\n            and denominator.performance_period_begin\n    \n    union all\n\n    select\n          denominator.patient_id\n        , osteoporosis_medications.concept_name as exclusion_reason\n        , coalesce(osteoporosis_medications.prescribing_date, osteoporosis_medications.dispensing_date) as exclusion_date\n    from denominator\n    inner join osteoporosis_medications\n        on denominator.patient_id = osteoporosis_medications.patient_id\n            and coalesce(osteoporosis_medications.prescribing_date, osteoporosis_medications.dispensing_date)\n            between\n                \n\n    dateadd(\n        month,\n        -12,\n        denominator.performance_period_begin\n        )\n\n\n                and denominator.performance_period_begin\n\n)\n\n, valid_tests_performed as (\n\n    select\n          denominator.patient_id\n        , bone_density_test_procedures.concept_name as exclusion_reason\n        , procedure_date as exclusion_date\n    from denominator\n    inner join bone_density_test_procedures\n        on denominator.patient_id = bone_density_test_procedures.patient_id\n    where bone_density_test_procedures.procedure_date\n        between \n            \n\n    dateadd(\n        year,\n        -2,\n        denominator.performance_period_begin\n        )\n\n\n            and denominator.performance_period_begin\n\n)\n\n, valid_exclusions as (\n\n    select * from valid_tests_performed\n\n    union all\n\n    select * from valid_osteoporosis_medications_procedures\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , 'measure specific exclusion for procedure medication' as exclusion_type\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom\n    valid_exclusions", "relation_name": "dev_thuxuan.quality_measures._int_nqf0053_exclude_procedures_medications"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:25.469584Z", "completed_at": "2024-10-01T16:35:25.475668Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:25.475668Z", "completed_at": "2024-10-01T16:35:26.759564Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.4327921867370605, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b672"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.readmissions__readmission_crude", "compiled": true, "compiled_code": "\n\n-- Here we calculate readmissions using all encounters\n-- that have valid admit and discharge dates and no overlap.\n-- This is meant to give a crude sense of the readmission\n-- rate without taking into account all the CMS HWR logic.\n\n\nwith encounter_info as (\nselect\n    enc.encounter_id,\n    enc.patient_id,\n    enc.admit_date,\n    enc.discharge_date\nfrom dev_thuxuan.readmissions._int_encounter enc\nleft join dev_thuxuan.readmissions._int_encounter_overlap over_a\n    on enc.encounter_id = over_a.encounter_id_A\nleft join dev_thuxuan.readmissions._int_encounter_overlap over_b\n    on enc.encounter_id = over_b.encounter_id_B\nwhere\n    admit_date is not null\n    and\n    discharge_date is not null\n    and\n    admit_date <= discharge_date\nand over_a.encounter_id_A is null and over_b.encounter_id_B is null\n    ),\n\n\nencounter_sequence as (\nselect\n    encounter_id,\n    patient_id,\n    admit_date,\n    discharge_date,\n    row_number() over(\n        partition by patient_id order by admit_date, discharge_date\n    ) as encounter_seq\nfrom encounter_info\n),\n\n\nreadmission_calc as (\nselect\n    aa.encounter_id,\n    aa.patient_id,\n    aa.admit_date,\n    aa.discharge_date,\n    case\n        when bb.encounter_id is not null then 1\n\telse 0\n    end as had_readmission_flag,\n    datediff(\n        day,\n        bb.admit_date,\n        aa.discharge_date\n        ) as days_to_readmit,\n    case\n        when (datediff(\n        day,\n        bb.admit_date,\n        aa.discharge_date\n        )) <= 30  then 1\n\telse 0\n    end as readmit_30_flag\nfrom encounter_sequence aa left join encounter_sequence bb\n     on aa.patient_id = bb.patient_id\n     and aa.encounter_seq + 1 = bb.encounter_seq\n)\n\n\n\nselect *, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom readmission_calc", "relation_name": "dev_thuxuan.readmissions._int_readmission_crude"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:25.826401Z", "completed_at": "2024-10-01T16:35:25.834922Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:25.835990Z", "completed_at": "2024-10-01T16:35:26.864126Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.2517032623291016, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f7c5-0001-987f0110be5e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.readmissions__encounter_specialty_cohort", "compiled": true, "compiled_code": "\n\n-- Here we list the specialty cohort for each encounter that has\n-- an associated specialty cohort.\n-- There are 5 possible specialty cohorts:\n--      [1] Medicine\n--      [2] Surgery/Gynecology\n--      [3] Cardiology\n--      [4] Cardiovascular\n--      [5] Neurology\n-- An encounter that has an ICD-10-PCS procedure code or a\n-- CCS procedure category that corresponds to the\n-- 'Surgery/Gynecology' cohort will always be in that cohort.\n-- For encounters that are not in the 'Surgery/Gynecology' cohort,\n-- we then check to see if they are in one of the other 4 cohorts.\n\n--ranking to eventually assign a cohort to encounters in multiple cohorts\nwith cohort_ranks as (\n    select 'Surgery/Gynecology' as cohort, 1 as c_rank\n    union all\n    select 'Cardiorespiratory' as cohort, 2 as c_rank\n    union all\n    select 'Cardiovascular' as cohort, 3 as c_rank\n    union all\n    select 'Neurology' as cohort, 4 as c_rank\n    union all\n    select 'Medicine' as cohort, 5 as c_rank\n)\n\n\n--get all encounter ids in any procedure or diagnosis based cohorts\n, all_encounter_cohorts as (\n\n    --encounter ids in procedure based cohorts\n        select procs.encounter_id, 1 as c_rank\n        from dev_thuxuan.readmissions._int_procedure_ccs procs\n        left join dev_thuxuan.readmissions._value_set_surgery_gynecology_cohort sgc\n            on procs.procedure_code = sgc.icd_10_pcs\n        left join dev_thuxuan.readmissions._value_set_specialty_cohort sgsc\n            on procs.ccs_procedure_category = sgsc.ccs and sgsc.specialty_cohort = 'Surgery/Gynecology'\n        where sgc.icd_10_pcs is not null or sgsc.ccs is not null\n\n    union all\n\n    --encounter ids in diagnosis based cohorts\n    select diag.encounter_id, cohort_ranks.c_rank\n    from dev_thuxuan.readmissions._int_encounter_with_ccs diag\n    inner join dev_thuxuan.readmissions._value_set_specialty_cohort sc\n        on diag.ccs_diagnosis_category = sc.ccs and sc.procedure_or_diagnosis = 'Diagnosis'\n    inner join cohort_ranks\n        on sc.specialty_cohort = cohort_ranks.cohort\n)\n\n\n-- getting one cohort per encounter\n, main_encounter_cohort as (\n    select encounter_id, min(c_rank) as main_c_rank\n    from all_encounter_cohorts\n    group by encounter_id\n\n)\n\n\n--getting all encounters, with labeled cohorts, if no cohort cohort is \"medicine\"\nselect enc.encounter_id, coalesce(cohort_ranks.cohort, 'Medicine') as specialty_cohort, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.readmissions._int_encounter enc\nleft join main_encounter_cohort mec\n    on enc.encounter_id = mec.encounter_id\nleft join cohort_ranks\n    on mec.main_c_rank = cohort_ranks.c_rank", "relation_name": "dev_thuxuan.readmissions._int_encounter_specialty_cohort"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:26.304405Z", "completed_at": "2024-10-01T16:35:26.313102Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:26.314070Z", "completed_at": "2024-10-01T16:35:27.184723Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.0251305103302002, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f7c5-0001-987f0110be62"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.readmissions__exclusion", "compiled": true, "compiled_code": "\n\n-- Here we list encounter_ids that are excluded\n-- from being index admissions because they\n-- belong to one of these categories:\n--       [1] Medical Treatment of Cancer\n--       [2] Rehabilitation\n--       [3] Psychiatric\n\n\n-- encounter_ids for encounters that should be\n-- excluded because they belong to one of the\n-- exclusion categories\nwith exclusions as (\nselect distinct encounter_id\nfrom dev_thuxuan.readmissions._int_encounter_with_ccs\nwhere\n(ccs_diagnosis_category is not null)\nand\n(\nccs_diagnosis_category in\n    (select distinct ccs_diagnosis_category\n     from dev_thuxuan.readmissions._value_set_exclusion_ccs_diagnosis_category )\n)\n)\n\n\nselect *, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom exclusions", "relation_name": "dev_thuxuan.readmissions._int_exclusion"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:25.413176Z", "completed_at": "2024-10-01T16:35:25.425742Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:25.425742Z", "completed_at": "2024-10-01T16:35:27.178638Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.917435884475708, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f01112ff6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0053_numerator", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select \n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , recorded_date\n        , measure_id\n        , measure_name\n        , measure_version\n    from dev_thuxuan.quality_measures._int_nqf0053_denominator\n\n)\n\n, value_sets as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_thuxuan.quality_measures._value_set_codes\n    \n)\n\n, osteo_procedure_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from value_sets\n    where lower(concept_name) in (\n          'bone mineral density test'\n        , 'bone mineral density tests cpt'\n        , 'bone mineral density tests icd10pcs'\n        , 'bone mineral density tests hcpcs'\n        , 'dexa dual energy xray absorptiometry, bone density'\n        , 'central dual energy x-ray absorptiometry (dxa)'\n        , 'spinal densitometry x-ray' \n        , 'ultrasonography for densitometry' \n        , 'ct bone density axial'\n        , 'peripheral dual-energy x-ray absorptiometry (dxa)'\n        , 'osteoporosis medication'\n    )\n\n)\n\n, procedures_osteo_related as (\n\n    select\n        patient_id\n      , procedure_date\n    from dev_thuxuan.quality_measures._stg_procedure as procs\n    inner join osteo_procedure_codes\n        on coalesce(procs.normalized_code, procs.source_code) = osteo_procedure_codes.code\n        and coalesce(procs.normalized_code_type, procs.source_code_type) = osteo_procedure_codes.code_system\n\n)\n\n, qualifying_procedures as (\n\n    select\n          procedures_osteo_related.patient_id\n        , procedures_osteo_related.procedure_date\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , denominator.recorded_date\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n    from procedures_osteo_related\n    inner join denominator\n        on procedures_osteo_related.patient_id = denominator.patient_id\n        and \n            procedures_osteo_related.procedure_date between\n            denominator.recorded_date \n            and\n            \n\n    dateadd(\n        month,\n        6,\n        denominator.recorded_date\n        )\n\n \n\n)\n\n, denominator_patients_disqualified_from_procedure as (\n    \n    select \n          denominator.patient_id\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , denominator.recorded_date\n        , denominator.performance_period_begin\n        , denominator.performance_period_end  \n    from denominator\n    left join qualifying_procedures \n    on denominator.patient_id = qualifying_procedures.patient_id\n    where qualifying_procedures.patient_id is null\n\n)\n\n-- pharmacy_claim begin\n\n, osteo_rx_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from value_sets\n    where lower(concept_name) \n        in \n        ( \n          'osteoporosis medications for urology care'\n        , 'osteoporosis medication'\n        , 'bisphosphonates'\n        )\n\n)\n\n, pharmacy_claims_osteo_related as (\n\n    select\n        patient_id\n      , dispensing_date\n      , ndc_code  \n    from dev_thuxuan.quality_measures._stg_pharmacy_claim as pharmacy_claims\n    inner join osteo_rx_codes\n    on pharmacy_claims.ndc_code = osteo_rx_codes.code\n        and lower(osteo_rx_codes.code_system) = 'ndc'\n\n)\n\n, qualifying_pharmacy_claims as (\n\n    select \n          pharmacy_claims_osteo_related.patient_id\n        , pharmacy_claims_osteo_related.dispensing_date\n        , pharmacy_claims_osteo_related.ndc_code\n        , denominator_patients_disqualified_from_procedure.measure_id\n        , denominator_patients_disqualified_from_procedure.measure_name\n        , denominator_patients_disqualified_from_procedure.measure_version\n        , denominator_patients_disqualified_from_procedure.recorded_date\n        , denominator_patients_disqualified_from_procedure.performance_period_begin\n        , denominator_patients_disqualified_from_procedure.performance_period_end\n    from pharmacy_claims_osteo_related\n    inner join denominator_patients_disqualified_from_procedure\n        on pharmacy_claims_osteo_related.patient_id = denominator_patients_disqualified_from_procedure.patient_id\n        and pharmacy_claims_osteo_related.dispensing_date \n            between             \n            denominator_patients_disqualified_from_procedure.recorded_date \n                and \n                \n\n    dateadd(\n        month,\n        6,\n        denominator_patients_disqualified_from_procedure.recorded_date\n        )\n\n\n)\n\n-- medication begin\n\n, medication_osteo_related as (\n\n    select\n        patient_id\n      , encounter_id\n      , prescribing_date\n      , dispensing_date\n      , source_code\n      , source_code_type\n      , ndc_code\n      , rxnorm_code\n    from dev_thuxuan.quality_measures._stg_medication as medications\n    inner join osteo_rx_codes\n        on medications.source_code = osteo_rx_codes.code\n        and medications.source_code_type = osteo_rx_codes.code_system\n\n)\n\n, qualifying_medications as (\n\n    select\n          medication_osteo_related.patient_id\n        , medication_osteo_related.encounter_id\n        , denominator_patients_disqualified_from_procedure.measure_id\n        , denominator_patients_disqualified_from_procedure.measure_name\n        , denominator_patients_disqualified_from_procedure.measure_version\n        , denominator_patients_disqualified_from_procedure.recorded_date\n        , denominator_patients_disqualified_from_procedure.performance_period_begin\n        , denominator_patients_disqualified_from_procedure.performance_period_end\n    from medication_osteo_related\n    inner join denominator_patients_disqualified_from_procedure\n        on medication_osteo_related.patient_id = denominator_patients_disqualified_from_procedure.patient_id\n            and coalesce(medication_osteo_related.prescribing_date, medication_osteo_related.dispensing_date) between \n                denominator_patients_disqualified_from_procedure.recorded_date \n                and \n                \n\n    dateadd(\n        month,\n        6,\n        denominator_patients_disqualified_from_procedure.recorded_date\n        )\n\n\n\n)\n\n, numerator as (\n\n    select\n          qualifying_procedures.patient_id\n        , qualifying_procedures.performance_period_begin\n        , qualifying_procedures.performance_period_end\n        , qualifying_procedures.measure_id\n        , qualifying_procedures.measure_name\n        , qualifying_procedures.measure_version\n        , recorded_date as evidence_date\n        , 1 as numerator_flag\n    from qualifying_procedures\n\n    union all\n\n    select \n          qualifying_pharmacy_claims.patient_id\n        , qualifying_pharmacy_claims.performance_period_begin\n        , qualifying_pharmacy_claims.performance_period_end\n        , qualifying_pharmacy_claims.measure_id\n        , qualifying_pharmacy_claims.measure_name\n        , qualifying_pharmacy_claims.measure_version\n        , recorded_date as evidence_date\n        , 1 as numerator_flag\n    from qualifying_pharmacy_claims\n\n    union all\n\n    select \n          qualifying_medications.patient_id\n        , qualifying_medications.performance_period_begin\n        , qualifying_medications.performance_period_end\n        , qualifying_medications.measure_id\n        , qualifying_medications.measure_name\n        , qualifying_medications.measure_version\n        , recorded_date as evidence_date\n        , 1 as numerator_flag\n    from qualifying_medications\n\n)\n\n, add_data_types as (\n\n     select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(evidence_date as date) as evidence_date\n        , cast(null as TEXT) as evidence_value\n        , cast(numerator_flag as integer) as numerator_flag\n    from numerator\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , evidence_date\n    , evidence_value\n    , numerator_flag\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_nqf0053_numerator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:25.634405Z", "completed_at": "2024-10-01T16:35:25.642418Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:25.642418Z", "completed_at": "2024-10-01T16:35:27.272156Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.8434393405914307, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f01112ffa"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.readmissions__encounter_data_quality", "compiled": true, "compiled_code": "\n\n-- Here we list all encounters from the stg_encounter table\n-- with data quality flags that may disqualify them from\n-- being used for readmission measures \n\n\n-- Flag several potential data quality issues\n-- with all encounters.\n-- Every encounter_id from the stg_encounter model\n-- will be here. This CTE should have the same\n-- number of rows as the stg_encounter model, i.e.,\n-- there is a one to one correspondence between the\n-- rows in stg_encounter and this CTE.\nwith encounter_data_quality_issues as (\nselect\n    aa.encounter_id,\n    case\n        when aa.admit_date is null then 1\n\telse 0\n    end as missing_admit_date_flag,\n    case\n        when aa.discharge_date is null then 1\n\telse 0\n    end as missing_discharge_date_flag,\n    case\n        when aa.admit_date > aa.discharge_date then 1\n\telse 0\n    end as admit_after_discharge_flag,\n    case\n        when aa.discharge_disposition_code is null then 1\n\telse 0\n    end as missing_discharge_disposition_code_flag,\n    case\n        when\n\t    (aa.discharge_disposition_code is not null)\n\t    and\n\t    (bb.discharge_disposition_code is null) then 1\n\telse 0\n    end as invalid_discharge_disposition_code_flag,\n    case\n      when aa.primary_diagnosis_code is null then 1\n      else 0\n    end as missing_primary_diagnosis_flag,\n    case\n        when aa.valid_primary_diagnosis_code_flag = 0 then 1\n\telse 0\n    end as invalid_primary_diagnosis_code_flag,\n    case\n        when aa.ccs_diagnosis_category is null  then 1\n\telse 0\n    end as no_diagnosis_ccs_flag,\n    aa.ccs_diagnosis_category as diagnosis_ccs,\n    case\n        when aa.encounter_id in (select distinct encounter_id_A\n\t                         from dev_thuxuan.readmissions._int_encounter_overlap )\n\t     or\n\t     aa.encounter_id in (select distinct encounter_id_B\n\t                         from dev_thuxuan.readmissions._int_encounter_overlap )\n\tthen 1\n\telse 0\n    end as overlaps_with_another_encounter_flag,\n    case\n        when aa.ms_drg_code is null then 1\n\telse 0\n    end as missing_ms_drg_flag,\n    case\n        when cc.ms_drg_code is null then 1\n\telse 0\n    end as invalid_ms_drg_flag\n\nfrom dev_thuxuan.readmissions._int_encounter_with_ccs aa\n     left join dev_thuxuan.terminology.discharge_disposition bb\n     on aa.discharge_disposition_code = bb.discharge_disposition_code\n     left join dev_thuxuan.terminology.ms_drg cc\n     on aa.ms_drg_code = cc.ms_drg_code\n),\n\n\n-- Here we add a disqualified_encounter_flag.\n-- This disqualified_encounter_flag = 1\n-- when any of the critical data quality flags\n-- from the above CTE are equal to 1.\nall_data_quality_flags as (\nselect\n    encounter_id,\n    diagnosis_ccs,\n    case\n        when\n\t    (missing_admit_date_flag = 1)\n\t    or\n\t    (missing_discharge_date_flag = 1)\n\t    or\n\t    (admit_after_discharge_flag = 1)\n\t    or\n\t    (missing_discharge_disposition_code_flag = 1)\n\t    or\n\t    (invalid_discharge_disposition_code_flag = 1)\n\t    or\n\t    (missing_primary_diagnosis_flag = 1)\n\t    or\n\t    (invalid_primary_diagnosis_code_flag = 1)\n\t    or\n\t    (no_diagnosis_ccs_flag = 1)\n\t    or\n\t    (overlaps_with_another_encounter_flag = 1)\n\t    or\n\t    (missing_ms_drg_flag = 1)\n\t    or\n\t    (invalid_ms_drg_flag = 1)\n\t    then 1\n\telse 0\n    end as disqualified_encounter_flag,\n    missing_admit_date_flag,\n    missing_discharge_date_flag,\n    admit_after_discharge_flag,\n    missing_discharge_disposition_code_flag,\n    invalid_discharge_disposition_code_flag,\n    missing_primary_diagnosis_flag,\n    invalid_primary_diagnosis_code_flag,\n    no_diagnosis_ccs_flag,\n    overlaps_with_another_encounter_flag,\n    missing_ms_drg_flag,\n    invalid_ms_drg_flag\nfrom encounter_data_quality_issues\n)    \n\n\n\nselect *, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom all_data_quality_flags", "relation_name": "dev_thuxuan.readmissions._int_encounter_data_quality"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:27.190644Z", "completed_at": "2024-10-01T16:35:27.208191Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:27.208602Z", "completed_at": "2024-10-01T16:35:28.620317Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.6384758949279785, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f01112ffe"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.readmissions__planned_encounter", "compiled": true, "compiled_code": "\n\n-- Here we list encounter_ids for all encounters\n-- that are planned.\n\n\n-- encounter_ids for encounters that we know\n-- are planned because they had a procedure category\n-- that is only present for planned encounters \nwith always_planned_px as (\nselect distinct pccs.encounter_id\nfrom dev_thuxuan.readmissions._int_procedure_ccs pccs\ninner join dev_thuxuan.readmissions._value_set_always_planned_ccs_procedure_category apc\n    on pccs.ccs_procedure_category = apc.ccs_procedure_category\n),\n\n\n-- encounter_ids for encounters that we know\n-- are planned because they had a diagnosis category\n-- that is only present for planned encounters\nalways_planned_dx as (\nselect distinct encounter_id\nfrom dev_thuxuan.readmissions._int_encounter_with_ccs dccs\ninner join dev_thuxuan.readmissions._value_set_always_planned_ccs_diagnosis_category apd\n    on dccs.ccs_diagnosis_category = apd.ccs_diagnosis_category\n),\n\n\n-- encounter_ids for encounters that are potentially planned\n-- based on one of their CCS procedure categories.\n-- For these encounters to actually be planned, we must further\n-- require that they are NOT acute encounters\npotentially_planned_px_ccs as (\nselect distinct encounter_id\nfrom dev_thuxuan.readmissions._int_procedure_ccs pccs\ninner join dev_thuxuan.readmissions._value_set_potentially_planned_ccs_procedure_category pcs\n    on pccs.ccs_procedure_category = pcs.ccs_procedure_category\n),\n\n\n-- encounter_ids for encounters that are potentially planned\n-- based on their ICD-10-PCS procedure codes.\n-- For these encounters to actually be planned, we must further\n-- require that they are NOT acute encounters\npotentially_planned_px_icd_10_pcs as (\nselect distinct encounter_id\nfrom dev_thuxuan.readmissions._int_procedure_ccs pcs\ninner join  dev_thuxuan.readmissions._value_set_potentially_planned_icd_10_pcs pps\n    on pcs.procedure_code = pps.icd_10_pcs\n),\n\n\n-- encounter_ids for encounters that are acute based\n-- on their primary diagnosis code or their CCS diagnosis category\nacute_encounters as (\nselect distinct encounter_id\nfrom dev_thuxuan.readmissions._int_encounter_with_ccs dccs\nleft join dev_thuxuan.readmissions._value_set_acute_diagnosis_icd_10_cm adi\n    on dccs.primary_diagnosis_code = adi.icd_10_cm\nleft join dev_thuxuan.readmissions._value_set_acute_diagnosis_ccs adc\n    on dccs.ccs_diagnosis_category = adc.ccs_diagnosis_category\nwhere adi.icd_10_cm is not null or adc.ccs_diagnosis_category is not null\n),\n\n\n-- encounter_ids for encounters that are:\n--           [1] potentially planned, based on one of\n--               their CCS procedure categories or\n--               their ICD-10-PCS procedure codes\n--           [2] not acute, based on their primary diagnosis code\n--               or their CCS diagnosis category\n-- These encounters are therefore confirmed to be planned\npotentially_planned_that_are_actually_planned as (\nselect distinct ppp.encounter_id\nfrom (\n    select * from potentially_planned_px_ccs\n        union all\n    select * from potentially_planned_px_icd_10_pcs) ppp\nleft join acute_encounters\n    on ppp.encounter_id = acute_encounters.encounter_id\nwhere acute_encounters.encounter_id is null\n\n)\n\n\n-- Aggregate of all encounter_ids for planned encounters\n\nselect * , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run from always_planned_px\n\nunion distinct\n\nselect *, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run from always_planned_dx\n\nunion distinct\n\nselect *, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run from potentially_planned_that_are_actually_planned", "relation_name": "dev_thuxuan.readmissions._int_planned_encounter"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:27.200164Z", "completed_at": "2024-10-01T16:35:27.212851Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:27.215836Z", "completed_at": "2024-10-01T16:35:29.072924Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.0169568061828613, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f7c5-0001-987f0110be66"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm438_exclusions", "compiled": true, "compiled_code": "with exclusion_codes as (\n\n    select\n          code\n        , case code_system\n            when 'SNOMEDCT' then 'snomed-ct'\n            when 'ICD9CM' then 'icd-9-cm'\n            when 'ICD10CM' then 'icd-10-cm'\n            when 'CPT' then 'hcpcs'\n            when 'ICD10PCS' then 'icd-10-pcs'\n          else lower(code_system) end as code_system\n        , concept_name\n    from dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in  (\n            'rhabdomyolysis'\n          , 'breastfeeding'\n          , 'liver disease'\n          , 'hepatitis a'\n          , 'hepatitis b'\n          , 'documentation of medical reason for no statin therapy'\n          , 'statin allergen'\n          , 'end stage renal disease'\n          , 'statin associated muscle symptoms'\n          , 'medical reason'\n    )\n\n)\n\n, valid_hospice_palliative as (\n\n  select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n  from dev_thuxuan.quality_measures._int_shared_exclusions_hospice_palliative\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_cqm438__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_cqm438__performance_period\n\n)\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_condition\n    where recorded_date between (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_cqm438__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_cqm438__performance_period\n\n)\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from dev_thuxuan.quality_measures._stg_medical_claim\n    where coalesce(claim_end_date, claim_start_date) between (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_cqm438__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_cqm438__performance_period\n\n)\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_observation\n    where observation_date between (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_cqm438__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_cqm438__performance_period\n\n)\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_procedure\n    where procedure_date between (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_cqm438__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_cqm438__performance_period\n\n)\n\n)\n\n, medications as (\n    \n    select\n        patient_id\n      , coalesce(prescribing_date, dispensing_date) as exclusion_date\n      , source_code\n      , source_code_type\n    from dev_thuxuan.quality_measures._stg_medication\n\n)\n\n, pharmacy_claims as (\n\n    select\n        patient_id\n      , dispensing_date\n      , ndc_code\n    from dev_thuxuan.quality_measures._stg_pharmacy_claim \n\n)\n\n, condition_exclusions as (\n\n    select\n          conditions.patient_id\n        , conditions.claim_id\n        , conditions.recorded_date\n        , exclusion_codes.concept_name as concept_name\n    from conditions\n         inner join exclusion_codes\n            on conditions.code = exclusion_codes.code\n            and conditions.code_type = exclusion_codes.code_system\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n        , exclusion_codes.concept_name as concept_name\n    from medical_claim\n         inner join exclusion_codes\n            on medical_claim.hcpcs_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'hcpcs'\n\n)\n\n, observation_exclusions as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , exclusion_codes.concept_name as concept_name\n    from observations\n    inner join exclusion_codes\n        on observations.code = exclusion_codes.code\n        and observations.code_type = exclusion_codes.code_system\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name as concept_name\n    from procedures\n    inner join exclusion_codes\n        on procedures.code = exclusion_codes.code\n          and procedures.code_type = exclusion_codes.code_system\n\n)\n\n, medication_exclusions as (\n\n    select\n          medications.patient_id\n        , medications.exclusion_date\n        , exclusion_codes.concept_name as concept_name\n    from medications\n    inner join exclusion_codes\n        on medications.source_code = exclusion_codes.code\n          and medications.source_code_type = exclusion_codes.code_system\n\n)\n\n, pharmacy_claims_exclusions as (\n\n    select\n          pharmacy_claims.patient_id\n        , pharmacy_claims.dispensing_date\n        , exclusion_codes.concept_name as concept_name\n    from pharmacy_claims\n    inner join exclusion_codes\n        on pharmacy_claims.ndc_code = exclusion_codes.code\n        and lower(exclusion_codes.code_system) = 'ndc'\n\n)\n\n, patients_with_exclusions as(\n    \n    select \n          patient_id\n        , recorded_date as exclusion_date\n        , concept_name as exclusion_reason\n    from condition_exclusions\n\n    union all\n\n    select \n          patient_id\n        , coalesce(claim_end_date, claim_start_date) as exclusion_date\n        , concept_name as exclusion_reason\n    from med_claim_exclusions\n\n    union all\n\n    select \n          patient_id\n        , observation_date as exclusion_date\n        , concept_name as exclusion_reason\n    from observation_exclusions\n\n    union all\n\n    select \n          patient_id\n        , procedure_date as exclusion_date\n        , concept_name as exclusion_reason\n    from procedure_exclusions\n\n    union all\n\n    select \n          patient_id\n        , exclusion_date\n        , concept_name as exclusion_reason\n    from medication_exclusions\n\n    union all\n\n    select\n          patient_id\n        , dispensing_date as exclusion_date\n        , concept_name as exclusion_reason\n    from pharmacy_claims_exclusions\n\n    union all\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from valid_hospice_palliative\n\n)\n\n, valid_exclusions as (\n\n  select \n        patients_with_exclusions.patient_id\n      , patients_with_exclusions.exclusion_date\n      , patients_with_exclusions.exclusion_reason  \n  from patients_with_exclusions\n  inner join dev_thuxuan.quality_measures._int_cqm438_denominator as denominator\n      on patients_with_exclusions.patient_id = denominator.patient_id\n\n)\n\n, add_data_types as (\n\n    select\n        distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(1 as integer) as exclusion_flag\n    from valid_exclusions\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_cqm438_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:27.339542Z", "completed_at": "2024-10-01T16:35:27.359374Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:27.360282Z", "completed_at": "2024-10-01T16:35:29.075225Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.8825747966766357, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d682"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm438_numerator", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from dev_thuxuan.quality_measures._int_cqm438_denominator\n\n)\n\n, statin_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_thuxuan.quality_measures._value_set_codes\n    where lower(concept_name) in  (\n          'high intensity statin therapy'\n        , 'low intensity statin therapy'\n        , 'moderate intensity statin therapy'\n        , 'statin therapy'\n    )\n\n)\n\n, procedures as (\n\n    select\n        patient_id\n      , procedure_date\n      , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from dev_thuxuan.quality_measures._stg_procedure\n\n)\n\n, procedure_statin_related as (\n\n    select \n          procedures.patient_id\n        , procedures.procedure_date as evidence_date\n    from procedures\n    inner join statin_codes\n        on procedures.code = statin_codes.code\n            and procedures.code_type = statin_codes.code_system\n\n)\n\n, pharmacy_claims_statin_related as (\n\n    select\n        patient_id\n      , dispensing_date as evidence_date\n      , ndc_code\n    from dev_thuxuan.quality_measures._stg_pharmacy_claim as pharmacy_claims\n    inner join statin_codes\n    on pharmacy_claims.ndc_code = statin_codes.code\n        and lower(statin_codes.code_system) = 'ndc'\n\n)\n\n, medication_statin_related as (\n\n    select\n          patient_id\n        , coalesce(dispensing_date, prescribing_date) as evidence_date\n        , source_code\n        , source_code_type\n    from dev_thuxuan.quality_measures._stg_medication as medications\n    inner join statin_codes\n        on medications.source_code = statin_codes.code\n        and medications.source_code_type = statin_codes.code_system\n        \n)\n\n, qualifying_patients as (\n\n    select\n          procedure_statin_related.patient_id\n        , procedure_statin_related.evidence_date\n    from procedure_statin_related\n\n    union all\n\n    select\n          pharmacy_claims_statin_related.patient_id\n        , pharmacy_claims_statin_related.evidence_date\n    from pharmacy_claims_statin_related\n\n    union all\n\n    select\n          medication_statin_related.patient_id\n        , medication_statin_related.evidence_date\n    from medication_statin_related\n\n)\n\n, qualifying_patients_with_denominator as (\n\n    select \n          qualifying_patients.patient_id\n        , qualifying_patients.evidence_date\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , cast(1 as integer) as numerator_flag\n    from qualifying_patients\n    inner join denominator\n    on qualifying_patients.patient_id = denominator.patient_id\n    and evidence_date between \n            denominator.performance_period_begin and \n                denominator.performance_period_end\n\n)\n\n, add_data_types as (\n\n     select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(evidence_date as date) as evidence_date\n        , cast(null as TEXT) as evidence_value\n        , cast(numerator_flag as integer) as numerator_flag\n    from qualifying_patients_with_denominator\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , evidence_date\n    , evidence_value\n    , numerator_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_cqm438_numerator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:27.349282Z", "completed_at": "2024-10-01T16:35:27.364990Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:27.364990Z", "completed_at": "2024-10-01T16:35:29.399123Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.1766135692596436, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f01113002"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cbe0055_exclusions", "compiled": true, "compiled_code": "with frailty as (\n\n  select\n    *\n  from dev_thuxuan.quality_measures._int_shared_exclusions_frailty\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_cbe0055__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_cbe0055__performance_period\n\n)\n\n)\n\n, valid_hospice_palliative as (\n\n  select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n  from dev_thuxuan.quality_measures._int_shared_exclusions_hospice_palliative\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_cbe0055__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_cbe0055__performance_period\n\n)\n\n)\n\n, valid_institutional_snp as (\n\n  select \n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n  from dev_thuxuan.quality_measures._int_shared_exclusions_institutional_snp\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_cbe0055__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_cbe0055__performance_period\n\n)\n\n)\n\n, valid_dementia_exclusions as (\n\n  select\n      source.patient_id\n    , source.exclusion_date\n    , source.exclusion_reason\n    , source.exclusion_type\n  from dev_thuxuan.quality_measures._int_shared_exclusions_dementia source\n  inner join frailty\n    on source.patient_id = frailty.patient_id\n  where (\n    source.dispensing_date\n      between \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_cbe0055__performance_period\n\n)\n        )\n\n\n          and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_cbe0055__performance_period\n\n)\n    or source.paid_date\n      between \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_cbe0055__performance_period\n\n)\n        )\n\n\n          and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_cbe0055__performance_period\n\n)\n    )\n\n)\n\n-- advanced illness start\n, advanced_illness_exclusion as (\n\n  select\n    source.*\n  from dev_thuxuan.quality_measures._int_shared_exclusions_advanced_illness as source\n  inner join frailty\n    on source.patient_id = frailty.patient_id\n  where source.exclusion_date\n    between\n      \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_cbe0055__performance_period\n\n)\n        )\n\n\n      and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_cbe0055__performance_period\n\n)\n\n)\n\n, acute_inpatient_advanced_illness as (\n\n  select\n    *\n  from advanced_illness_exclusion\n  where patient_type = 'acute_inpatient'\n\n)\n\n, nonacute_outpatient_advanced_illness as (\n\n  select\n    *\n  from advanced_illness_exclusion\n  where patient_type = 'nonacute_outpatient'\n\n)\n\n, acute_inpatient_counts as (\n\n    select\n          patient_id\n        , exclusion_type\n        , count(distinct exclusion_date) as encounter_count\n    from acute_inpatient_advanced_illness\n    group by patient_id, exclusion_type\n\n)\n\n, nonacute_outpatient_counts as (\n\n    select\n          patient_id\n        , exclusion_type\n        , count(distinct exclusion_date) as encounter_count\n    from nonacute_outpatient_advanced_illness\n    group by patient_id, exclusion_type\n\n)\n\n, valid_advanced_illness_exclusions as (\n\n    select\n          acute_inpatient_advanced_illness.patient_id\n        , acute_inpatient_advanced_illness.exclusion_date\n        , acute_inpatient_advanced_illness.exclusion_reason\n        , acute_inpatient_advanced_illness.exclusion_type\n    from acute_inpatient_advanced_illness\n    left join acute_inpatient_counts\n      on acute_inpatient_advanced_illness.patient_id = acute_inpatient_counts.patient_id\n    where acute_inpatient_counts.encounter_count >= 1\n\n    union all\n\n    select\n        nonacute_outpatient_advanced_illness.patient_id\n      , nonacute_outpatient_advanced_illness.exclusion_date\n      , nonacute_outpatient_advanced_illness.exclusion_reason\n      , nonacute_outpatient_advanced_illness.exclusion_type\n    from nonacute_outpatient_advanced_illness\n    left join nonacute_outpatient_counts\n      on nonacute_outpatient_advanced_illness.patient_id = nonacute_outpatient_counts.patient_id\n    where nonacute_outpatient_counts.encounter_count >= 2\n\n\n)\n-- advanced illness end\n\n, exclusions as (\n\n  select * from valid_advanced_illness_exclusions\n  union all\n  select * from valid_dementia_exclusions\n  union all\n  select * from valid_hospice_palliative\n  union all\n  select * from valid_institutional_snp\n\n)\n\n, combined_exclusions as (\n\n  select \n      exclusions.*\n    , denominator.age\n  from exclusions\n  inner join dev_thuxuan.quality_measures._int_cbe0055_denominator as denominator\n      on exclusions.patient_id = denominator.patient_id\n\n)\n\n, valid_exclusions as (\n\n  select\n    *\n  from combined_exclusions\n  where exclusion_type != 'hospice_palliative'\n    and age >= 66\n\n  union all\n\n  select\n    *\n  from combined_exclusions\n  where exclusion_type = 'hospice_palliative'\n\n)\n\n, add_data_types as (\n\n    select\n        distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , 1 as exclusion_flag\n    from valid_exclusions\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_cbe0055_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:27.482473Z", "completed_at": "2024-10-01T16:35:27.497958Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:27.498958Z", "completed_at": "2024-10-01T16:35:29.464798Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.1510393619537354, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f0111e006"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_exclusions", "compiled": true, "compiled_code": "with frailty as (\n\n  select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n  from dev_thuxuan.quality_measures._int_shared_exclusions_frailty\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_nqf0034__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_nqf0034__performance_period\n\n)\n\n)\n\n, denominator as (\n\n  select\n      patient_id\n    , max_age as age\n  from dev_thuxuan.quality_measures._int_nqf0034_denominator\n\n)\n-- advanced illness start\n, advanced_illness_exclusion as (\n\n  select\n    source.*\n  from dev_thuxuan.quality_measures._int_shared_exclusions_advanced_illness as source\n  inner join frailty\n    on source.patient_id = frailty.patient_id\n  where source.exclusion_date\n    between\n      \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_nqf0034__performance_period\n\n)\n        )\n\n\n      and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_nqf0034__performance_period\n\n)\n\n)\n\n, acute_inpatient_advanced_illness as (\n\n  select\n    *\n  from advanced_illness_exclusion\n  where patient_type = 'acute_inpatient'\n\n)\n\n, nonacute_outpatient_advanced_illness as (\n\n  select\n    *\n  from advanced_illness_exclusion\n  where patient_type = 'nonacute_outpatient'\n\n)\n\n, acute_inpatient_counts as (\n\n    select\n          patient_id\n        , exclusion_type\n        , count(distinct exclusion_date) as encounter_count\n    from acute_inpatient_advanced_illness\n    group by patient_id, exclusion_type\n\n)\n\n, nonacute_outpatient_counts as (\n\n    select\n          patient_id\n        , exclusion_type\n        , count(distinct exclusion_date) as encounter_count\n    from nonacute_outpatient_advanced_illness\n    group by patient_id, exclusion_type\n\n)\n\n, valid_advanced_illness_exclusions as (\n\n    select\n          acute_inpatient_advanced_illness.patient_id\n        , acute_inpatient_advanced_illness.exclusion_date\n        , acute_inpatient_advanced_illness.exclusion_reason\n        , acute_inpatient_advanced_illness.exclusion_type\n    from acute_inpatient_advanced_illness\n    left join acute_inpatient_counts\n      on acute_inpatient_advanced_illness.patient_id = acute_inpatient_counts.patient_id\n    where acute_inpatient_counts.encounter_count >= 1\n\n    union all\n\n    select\n        nonacute_outpatient_advanced_illness.patient_id\n      , nonacute_outpatient_advanced_illness.exclusion_date\n      , nonacute_outpatient_advanced_illness.exclusion_reason\n      , nonacute_outpatient_advanced_illness.exclusion_type\n    from nonacute_outpatient_advanced_illness\n    left join nonacute_outpatient_counts\n      on nonacute_outpatient_advanced_illness.patient_id = nonacute_outpatient_counts.patient_id\n    where nonacute_outpatient_counts.encounter_count >= 2\n\n\n)\n-- advanced illness end\n\n, valid_dementia_exclusions as (\n\n  select\n      source.patient_id\n    , source.exclusion_date\n    , source.exclusion_reason\n    , source.exclusion_type\n  from dev_thuxuan.quality_measures._int_shared_exclusions_dementia source\n  inner join frailty\n    on source.patient_id = frailty.patient_id\n  where (\n    source.dispensing_date\n      between \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_nqf0034__performance_period\n\n)\n        )\n\n\n          and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_nqf0034__performance_period\n\n)\n    or source.paid_date\n      between \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_nqf0034__performance_period\n\n)\n        )\n\n\n          and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_nqf0034__performance_period\n\n)\n    )\n\n)\n\n, valid_hospice_palliative as (\n\n  select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n  from dev_thuxuan.quality_measures._int_shared_exclusions_hospice_palliative\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_nqf0034__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_nqf0034__performance_period\n\n)\n    and lower(exclusion_reason) in \n  (\n        'palliative care encounter'\n      , 'palliative care intervention'\n      , 'hospice care ambulatory'\n      , 'hospice encounter'\n  )\n\n)\n\n, valid_institutional_snp as (\n\n  select \n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n  from dev_thuxuan.quality_measures._int_shared_exclusions_institutional_snp\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_nqf0034__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_nqf0034__performance_period\n\n)\n\n)\n\n, measure_specific_colectomy_colorectal_cancer_exclusion as (\n\n  select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n  from dev_thuxuan.quality_measures._int_nqf0034_exclude_colectomy_cancer\n\n)\n\n, exclusions as (\n\n    select *\n    from valid_advanced_illness_exclusions\n  \n    union all\n\n    select *\n    from valid_dementia_exclusions\n\n    union all\n\n    select *\n    from valid_hospice_palliative\n\n    union all\n\n    select *\n    from valid_institutional_snp\n\n    union all\n\n    select *\n    from valid_dementia_exclusions\n\n    union all\n\n    select *\n    from measure_specific_colectomy_colorectal_cancer_exclusion\n\n)\n\n, combined_exclusions as (\n\n  select \n      exclusions.*\n    , denominator.age\n  from exclusions\n  inner join denominator\n      on exclusions.patient_id = denominator.patient_id\n\n)\n\n, valid_exclusions as (\n\n  select * from combined_exclusions\n  where exclusion_type not in (\n      'measure specific exclusion for historical record of colectomy cancer'\n    , 'hospice_palliative'\n    ) \n    and age >= 66\n\n  union all\n\n  select * from combined_exclusions --age irrelvant exclusions\n  where exclusion_type in (\n      'measure specific exclusion for historical record of colectomy cancer'\n    , 'hospice_palliative'\n    ) \n\n)\n\n, add_data_types as (\n\n    select\n        distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , 1 as exclusion_flag\n    from valid_exclusions\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_nqf0034_exclusions"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:29.231486Z", "completed_at": "2024-10-01T16:35:29.237504Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:29.238484Z", "completed_at": "2024-10-01T16:35:30.097501Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.0678019523620605, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d686"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_claim_id.7ee5fe28fe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect claim_id\nfrom dev_thuxuan.chronic_conditions._int_cms_chronic_condition_oud\nwhere claim_id is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:29.226310Z", "completed_at": "2024-10-01T16:35:29.235487Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:29.235487Z", "completed_at": "2024-10-01T16:35:30.126867Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.0726947784423828, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d68a"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.accepted_values_chronic_conditions__cms_chronic_conditions_oud_condition__Opioid_Use_Disorder_OUD_.f44489eec5", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        condition as value_field,\n        count(*) as n_records\n\n    from dev_thuxuan.chronic_conditions._int_cms_chronic_condition_oud\n    group by condition\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Opioid Use Disorder (OUD)'\n)\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:29.529899Z", "completed_at": "2024-10-01T16:35:29.534892Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:29.535896Z", "completed_at": "2024-10-01T16:35:30.274230Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.8564388751983643, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b676"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_condition.6800b245ea", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect condition\nfrom dev_thuxuan.chronic_conditions._int_cms_chronic_condition_oud\nwhere condition is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:29.638474Z", "completed_at": "2024-10-01T16:35:29.643473Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:29.644977Z", "completed_at": "2024-10-01T16:35:30.504079Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.9806458950042725, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f7c5-0001-987f0110be6e"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_patient_id.382354e0d0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom dev_thuxuan.chronic_conditions._int_cms_chronic_condition_oud\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:28.832365Z", "completed_at": "2024-10-01T16:35:28.841430Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:28.842357Z", "completed_at": "2024-10-01T16:35:30.545277Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.8097858428955078, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f7c5-0001-987f0110be6a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0059_exclusions", "compiled": true, "compiled_code": "with frailty as (\n\n  select\n    *\n  from dev_thuxuan.quality_measures._int_shared_exclusions_frailty\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_nqf0059__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_nqf0059__performance_period\n\n)\n\n)\n-- advanced illness start\n, advanced_illness_exclusion as (\n\n  select\n    source.*\n  from dev_thuxuan.quality_measures._int_shared_exclusions_advanced_illness as source\n  inner join frailty\n    on source.patient_id = frailty.patient_id\n  where source.exclusion_date\n    between\n      \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_nqf0059__performance_period\n\n)\n        )\n\n\n      and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_nqf0059__performance_period\n\n)\n\n)\n\n, acute_inpatient_advanced_illness as (\n\n  select\n    *\n  from advanced_illness_exclusion\n  where patient_type = 'acute_inpatient'\n\n)\n\n, nonacute_outpatient_advanced_illness as (\n\n  select\n    *\n  from advanced_illness_exclusion\n  where patient_type = 'nonacute_outpatient'\n\n)\n\n, acute_inpatient_counts as (\n\n    select\n          patient_id\n        , exclusion_type\n        , count(distinct exclusion_date) as encounter_count\n    from acute_inpatient_advanced_illness\n    group by patient_id, exclusion_type\n\n)\n\n, nonacute_outpatient_counts as (\n\n    select\n          patient_id\n        , exclusion_type\n        , count(distinct exclusion_date) as encounter_count\n    from nonacute_outpatient_advanced_illness\n    group by patient_id, exclusion_type\n\n)\n\n, valid_advanced_illness_exclusions as (\n\n    select\n          acute_inpatient_advanced_illness.patient_id\n        , acute_inpatient_advanced_illness.exclusion_date\n        , acute_inpatient_advanced_illness.exclusion_reason\n        , acute_inpatient_advanced_illness.exclusion_type\n    from acute_inpatient_advanced_illness\n    left join acute_inpatient_counts\n      on acute_inpatient_advanced_illness.patient_id = acute_inpatient_counts.patient_id\n    where acute_inpatient_counts.encounter_count >= 1\n\n    union all\n\n    select\n        nonacute_outpatient_advanced_illness.patient_id\n      , nonacute_outpatient_advanced_illness.exclusion_date\n      , nonacute_outpatient_advanced_illness.exclusion_reason\n      , nonacute_outpatient_advanced_illness.exclusion_type\n    from nonacute_outpatient_advanced_illness\n    left join nonacute_outpatient_counts\n      on nonacute_outpatient_advanced_illness.patient_id = nonacute_outpatient_counts.patient_id\n    where nonacute_outpatient_counts.encounter_count >= 2\n\n\n)\n-- advanced illness end\n\n, valid_dementia_exclusions as (\n\n  select\n      source.patient_id\n    , source.exclusion_date\n    , source.exclusion_reason\n    , source.exclusion_type\n  from dev_thuxuan.quality_measures._int_shared_exclusions_dementia source\n  inner join frailty\n    on source.patient_id = frailty.patient_id\n  where (\n    source.dispensing_date\n      between \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_nqf0059__performance_period\n\n)\n        )\n\n\n          and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_nqf0059__performance_period\n\n)\n    or source.paid_date\n      between \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_nqf0059__performance_period\n\n)\n        )\n\n\n          and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_nqf0059__performance_period\n\n)\n    )\n\n)\n\n, valid_hospice_palliative as (\n\n  select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n  from dev_thuxuan.quality_measures._int_shared_exclusions_hospice_palliative\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_nqf0059__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_nqf0059__performance_period\n\n)\n\n)\n\n, valid_institutional_snp as (\n\n  select \n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n  from dev_thuxuan.quality_measures._int_shared_exclusions_institutional_snp\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_nqf0059__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_nqf0059__performance_period\n\n)\n\n)\n\n, exclusions as (\n\n  select * from valid_advanced_illness_exclusions\n  union all\n  select * from valid_dementia_exclusions\n  union all\n  select * from valid_hospice_palliative\n  union all\n  select * from valid_institutional_snp\n\n)\n\n, combined_exclusions as (\n\n  select \n      exclusions.*\n    , denominator.age\n  from exclusions\n  inner join dev_thuxuan.quality_measures._int_nqf0059_denominator as denominator\n      on exclusions.patient_id = denominator.patient_id\n\n)\n\n, valid_exclusions as (\n\n  select\n    *\n  from combined_exclusions\n  where exclusion_type != 'hospice_palliative'\n    and age >= 66\n\n  union all\n\n  select\n    *\n  from combined_exclusions\n  where exclusion_type = 'hospice_palliative'\n\n)\n\n, add_data_types as (\n\n    select\n        distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , 1 as exclusion_flag\n    from valid_exclusions\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_nqf0059_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:30.304029Z", "completed_at": "2024-10-01T16:35:30.315227Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:30.316220Z", "completed_at": "2024-10-01T16:35:31.775256Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.6914470195770264, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d68e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.mart_review__pmpm", "compiled": true, "compiled_code": "\n\n\nSELECT *,\n       total_paid * member_months AS total_paid_absolute,\n       medical_paid * member_months AS medical_paid_absolute,\n       pharmacy_paid * member_months AS pharmacy_paid_absolute,\n       inpatient_paid * member_months AS inpatient_paid_absolute,\n       outpatient_paid * member_months AS outpatient_paid_absolute,\n       office_visit_paid * member_months AS office_visit_paid_absolute,\n       ancillary_paid * member_months AS ancillary_paid_absolute,\n       other_paid * member_months AS other_paid_absolute,\n        data_source || '|' || year_month as data_source_month_key\nFROM dev_thuxuan.financial_pmpm.pmpm_payer", "relation_name": "dev_thuxuan.data_quality.mart_review__pmpm"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:30.308195Z", "completed_at": "2024-10-01T16:35:30.320327Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:30.324725Z", "completed_at": "2024-10-01T16:35:31.918944Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.741004228591919, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b67a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_disabled_interaction_factors", "compiled": true, "compiled_code": "\n\nwith demographics as (\n\n    select\n          patient_id\n        , enrollment_status\n        , institutional_status\n        , model_version\n        , payment_year\n    from dev_thuxuan.cms_hcc._int_demographic_factors\n\n)\n\n, hcc_hierarchy as (\n\n    select\n          patient_id\n        , hcc_code\n        , model_version\n    from dev_thuxuan.cms_hcc._int_hcc_hierarchy\n\n)\n\n, seed_interaction_factors as (\n\n    select\n          model_version\n        , factor_type\n        , enrollment_status\n        , institutional_status\n        , short_name\n        , description\n        , hcc_code\n        , coefficient\n    from dev_thuxuan.cms_hcc._value_set_disabled_interaction_factors\n\n)\n\n, demographics_with_hccs as (\n\n    select\n          demographics.patient_id\n        , demographics.enrollment_status\n        , demographics.institutional_status\n        , demographics.model_version\n        , demographics.payment_year\n        , hcc_hierarchy.hcc_code\n    from demographics\n        inner join hcc_hierarchy\n            on demographics.patient_id = hcc_hierarchy.patient_id\n            and demographics.model_version = hcc_hierarchy.model_version\n\n)\n\n, interactions as (\n\n    select\n          demographics_with_hccs.patient_id\n        , demographics_with_hccs.model_version\n        , demographics_with_hccs.payment_year\n        , seed_interaction_factors.factor_type\n        , seed_interaction_factors.description\n        , seed_interaction_factors.coefficient\n    from demographics_with_hccs\n        inner join seed_interaction_factors\n            on demographics_with_hccs.enrollment_status = seed_interaction_factors.enrollment_status\n            and demographics_with_hccs.institutional_status = seed_interaction_factors.institutional_status\n            and demographics_with_hccs.hcc_code = seed_interaction_factors.hcc_code\n            and demographics_with_hccs.model_version = seed_interaction_factors.model_version\n\n)\n\n, add_data_types as (\n\nselect\n      cast(patient_id as TEXT) as patient_id\n    , cast(description as TEXT) as description\n    , round(cast(coefficient as numeric(28,6)),3) as coefficient\n    , cast(factor_type as TEXT) as factor_type\n    , cast(model_version as TEXT) as model_version\n    , cast(payment_year as integer) as payment_year\nfrom interactions\n\n)\n\nselect\n      patient_id\n    , description\n    , coefficient\n    , factor_type\n    , model_version\n    , payment_year\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.cms_hcc._int_disabled_interaction_factors"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:30.392352Z", "completed_at": "2024-10-01T16:35:30.403021Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:30.403021Z", "completed_at": "2024-10-01T16:35:32.120784Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.8500537872314453, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f0111e00a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_disease_factors", "compiled": true, "compiled_code": "\n\nwith demographics as (\n\n    select\n          patient_id\n        , enrollment_status\n        , gender\n        , age_group\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , model_version\n        , payment_year\n    from dev_thuxuan.cms_hcc._int_demographic_factors\n\n)\n\n, hcc_hierarchy as (\n\n    select\n          patient_id\n        , hcc_code\n        , model_version\n    from dev_thuxuan.cms_hcc._int_hcc_hierarchy\n\n)\n\n, seed_disease_factors as (\n\n    select\n          model_version\n        , factor_type\n        , enrollment_status\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , hcc_code\n        , description\n        , coefficient\n    from dev_thuxuan.cms_hcc._value_set_disease_factors\n\n)\n\n, demographics_with_hccs as (\n\n    select\n          demographics.patient_id\n        , demographics.enrollment_status\n        , demographics.gender\n        , demographics.age_group\n        , demographics.medicaid_status\n        , demographics.dual_status\n        , demographics.orec\n        , demographics.institutional_status\n        , demographics.model_version\n        , demographics.payment_year\n        , hcc_hierarchy.hcc_code\n    from demographics\n        inner join hcc_hierarchy\n            on demographics.patient_id = hcc_hierarchy.patient_id\n            and demographics.model_version = hcc_hierarchy.model_version\n\n)\n\n, disease_factors as (\n\n    select\n          demographics_with_hccs.patient_id\n        , demographics_with_hccs.hcc_code\n        , demographics_with_hccs.model_version\n        , demographics_with_hccs.payment_year\n        , seed_disease_factors.factor_type\n        , seed_disease_factors.description\n        , seed_disease_factors.coefficient\n    from demographics_with_hccs\n        inner join seed_disease_factors\n            on demographics_with_hccs.enrollment_status = seed_disease_factors.enrollment_status\n            and demographics_with_hccs.medicaid_status = seed_disease_factors.medicaid_status\n            and demographics_with_hccs.dual_status = seed_disease_factors.dual_status\n            and demographics_with_hccs.orec = seed_disease_factors.orec\n            and demographics_with_hccs.institutional_status = seed_disease_factors.institutional_status\n            and demographics_with_hccs.hcc_code = seed_disease_factors.hcc_code\n            and demographics_with_hccs.model_version = seed_disease_factors.model_version\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(hcc_code as TEXT) as hcc_code\n        , cast(description as TEXT) as hcc_description\n        , round(cast(coefficient as numeric(28,6)),3) as coefficient\n        , cast(factor_type as TEXT) as factor_type\n        , cast(model_version as TEXT) as model_version\n        , cast(payment_year as integer) as payment_year\n    from disease_factors\n\n)\n\nselect\n      patient_id\n    , hcc_code\n    , hcc_description\n    , coefficient\n    , factor_type\n    , model_version\n    , payment_year\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.cms_hcc._int_disease_factors"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:30.657634Z", "completed_at": "2024-10-01T16:35:30.671840Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:30.672839Z", "completed_at": "2024-10-01T16:35:32.178312Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.6769022941589355, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d692"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_hcc_count_factors", "compiled": true, "compiled_code": "\n\nwith demographics as (\n\n    select\n          patient_id\n        , enrollment_status\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , model_version\n        , payment_year\n    from dev_thuxuan.cms_hcc._int_demographic_factors\n\n)\n\n, seed_payment_hcc_count_factors as (\n\n    select\n          model_version\n        , factor_type\n        , enrollment_status\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , payment_hcc_count\n        , description\n        , coefficient\n    from dev_thuxuan.cms_hcc._value_set_payment_hcc_count_factors\n\n)\n\n, hcc_hierarchy as (\n\n    select\n          patient_id\n        , hcc_code\n        , model_version\n    from dev_thuxuan.cms_hcc._int_hcc_hierarchy\n\n)\n\n, demographics_with_hcc_counts as (\n\n    select\n          demographics.patient_id\n        , demographics.enrollment_status\n        , demographics.medicaid_status\n        , demographics.dual_status\n        , demographics.orec\n        , demographics.institutional_status\n        , demographics.model_version\n        , demographics.payment_year\n        , count(hcc_hierarchy.hcc_code) as hcc_count\n    from demographics\n        inner join hcc_hierarchy\n            on demographics.patient_id = hcc_hierarchy.patient_id\n            and demographics.model_version = hcc_hierarchy.model_version\n    group by\n          demographics.patient_id\n        , demographics.enrollment_status\n        , demographics.medicaid_status\n        , demographics.dual_status\n        , demographics.orec\n        , demographics.institutional_status\n        , demographics.model_version\n        , demographics.payment_year\n\n)\n\n, hcc_counts_normalized as (\n\n    select\n          patient_id\n        , enrollment_status\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , model_version\n        , payment_year\n        , case\n            when hcc_count >= 10 then '>=10'\n            else cast(hcc_count as TEXT)\n          end as hcc_count_string\n    from demographics_with_hcc_counts\n\n)\n\n, hcc_counts as (\n\n    select\n          hcc_counts_normalized.patient_id\n        , hcc_counts_normalized.model_version\n        , hcc_counts_normalized.payment_year\n        , seed_payment_hcc_count_factors.factor_type\n        , seed_payment_hcc_count_factors.description\n        , seed_payment_hcc_count_factors.coefficient\n    from hcc_counts_normalized\n        inner join seed_payment_hcc_count_factors\n            on hcc_counts_normalized.enrollment_status = seed_payment_hcc_count_factors.enrollment_status\n            and hcc_counts_normalized.medicaid_status = seed_payment_hcc_count_factors.medicaid_status\n            and hcc_counts_normalized.dual_status = seed_payment_hcc_count_factors.dual_status\n            and hcc_counts_normalized.orec = seed_payment_hcc_count_factors.orec\n            and hcc_counts_normalized.institutional_status = seed_payment_hcc_count_factors.institutional_status\n            and hcc_counts_normalized.hcc_count_string = seed_payment_hcc_count_factors.payment_hcc_count\n            and hcc_counts_normalized.model_version = seed_payment_hcc_count_factors.model_version\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(description as TEXT) as description\n        , round(cast(coefficient as numeric(28,6)),3) as coefficient\n        , cast(factor_type as TEXT) as factor_type\n        , cast(model_version as TEXT) as model_version\n        , cast(payment_year as integer) as payment_year\n    from hcc_counts\n\n)\n\nselect\n      patient_id\n    , description\n    , coefficient\n    , factor_type\n    , model_version\n    , payment_year\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.cms_hcc._int_hcc_count_factors"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:30.625634Z", "completed_at": "2024-10-01T16:35:30.640111Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:30.641112Z", "completed_at": "2024-10-01T16:35:32.290475Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.8662545680999756, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b67e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_disease_interaction_factors", "compiled": true, "compiled_code": "\n\nwith demographics as (\n\n    select\n          patient_id\n        , enrollment_status\n        , gender\n        , age_group\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , model_version\n        , payment_year\n    from dev_thuxuan.cms_hcc._int_demographic_factors\n\n)\n\n, hcc_hierarchy as (\n\n    select\n          patient_id\n        , hcc_code\n        , model_version\n    from dev_thuxuan.cms_hcc._int_hcc_hierarchy\n\n)\n\n, seed_interaction_factors as (\n\n    select\n          model_version\n        , factor_type\n        , enrollment_status\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , short_name\n        , description\n        , hcc_code_1\n        , hcc_code_2\n        , coefficient\n    from dev_thuxuan.cms_hcc._value_set_disease_interaction_factors\n\n)\n\n, demographics_with_hccs as (\n\n    select\n          demographics.patient_id\n        , demographics.enrollment_status\n        , demographics.medicaid_status\n        , demographics.dual_status\n        , demographics.orec\n        , demographics.institutional_status\n        , demographics.model_version\n        , demographics.payment_year\n        , hcc_hierarchy.hcc_code\n    from demographics\n        inner join hcc_hierarchy\n            on demographics.patient_id = hcc_hierarchy.patient_id\n            and demographics.model_version = hcc_hierarchy.model_version\n\n)\n\n, demographics_with_interactions as (\n\n    select\n          demographics_with_hccs.patient_id\n        , demographics_with_hccs.model_version\n        , demographics_with_hccs.payment_year\n        , interactions_code_1.factor_type\n        , interactions_code_1.description\n        , interactions_code_1.hcc_code_1\n        , interactions_code_1.hcc_code_2\n        , interactions_code_1.coefficient\n    from demographics_with_hccs\n        inner join seed_interaction_factors as interactions_code_1\n            on demographics_with_hccs.enrollment_status = interactions_code_1.enrollment_status\n            and demographics_with_hccs.medicaid_status = interactions_code_1.medicaid_status\n            and demographics_with_hccs.dual_status = interactions_code_1.dual_status\n            and demographics_with_hccs.orec = interactions_code_1.orec\n            and demographics_with_hccs.institutional_status = interactions_code_1.institutional_status\n            and demographics_with_hccs.hcc_code = interactions_code_1.hcc_code_1\n            and demographics_with_hccs.model_version = interactions_code_1.model_version\n\n)\n\n, disease_interactions as (\n\n    select\n          demographics_with_interactions.patient_id\n        , demographics_with_interactions.factor_type\n        , demographics_with_interactions.hcc_code_1\n        , demographics_with_interactions.hcc_code_2\n        , demographics_with_interactions.description\n        , demographics_with_interactions.coefficient\n        , demographics_with_interactions.model_version\n        , demographics_with_interactions.payment_year\n    from demographics_with_interactions\n        inner join demographics_with_hccs as interactions_code_2\n            on demographics_with_interactions.patient_id = interactions_code_2.patient_id\n            and demographics_with_interactions.hcc_code_2 = interactions_code_2.hcc_code\n            and demographics_with_interactions.model_version = interactions_code_2.model_version\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(hcc_code_1 as TEXT) as hcc_code_1\n        , cast(hcc_code_2 as TEXT) as hcc_code_2\n        , cast(description as TEXT) as description\n        , round(cast(coefficient as numeric(28,6)),3) as coefficient\n        , cast(factor_type as TEXT) as factor_type\n        , cast(model_version as TEXT) as model_version\n        , cast(payment_year as integer) as payment_year\n    from disease_interactions\n\n)\n\nselect\n      patient_id\n    , hcc_code_1\n    , hcc_code_2\n    , description\n    , coefficient\n    , factor_type\n    , model_version\n    , payment_year\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.cms_hcc._int_disease_interaction_factors"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:31.997797Z", "completed_at": "2024-10-01T16:35:32.002877Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:32.003817Z", "completed_at": "2024-10-01T16:35:33.221145Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3945121765136719, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d696"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_01_num", "compiled": true, "compiled_code": "\n\nselect\n    e.data_source\n  , e.patient_id\n  , e.year_number\n  , e.encounter_id\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_inpatient_encounter as e\ninner join dev_thuxuan.ahrq_measures._value_set_pqi as pqi\n  on e.primary_diagnosis_code = pqi.code\n  and pqi.value_set_name = 'diabetes_with_short-term_complications_diagnosis_codes'\n  and pqi.pqi_number = '01'\ninner join dev_thuxuan.ahrq_measures._int_pqi_01_denom as denom\n  on e.patient_id = denom.patient_id\n  and e.data_source = denom.data_source\n  and e.year_number = denom.year_number\nleft join dev_thuxuan.ahrq_measures._int_pqi_01_exclusions as shared\n  on e.encounter_id = shared.encounter_id\n  and e.data_source = shared.data_source\nwhere shared.encounter_id is null", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_01_num"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:32.049993Z", "completed_at": "2024-10-01T16:35:32.059998Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:32.059998Z", "completed_at": "2024-10-01T16:35:33.644066Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.7254798412322998, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d69a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__list", "compiled": true, "compiled_code": "\n\nwith hcc_history_suspects as (\n\n    select distinct\n          patient_id\n        , data_source\n        , hcc_code\n        , hcc_description\n        , reason\n        , contributing_factor\n        , suspect_date\n    from dev_thuxuan.hcc_suspecting._int_patient_hcc_history\n    \n        where (current_year_billed = false\n            or current_year_billed is null)\n    \n\n)\n\n, comorbidity_suspects as (\n\n    select distinct\n          patient_id\n        , data_source\n        , hcc_code\n        , hcc_description\n        , reason\n        , contributing_factor\n        , suspect_date\n    from dev_thuxuan.hcc_suspecting._int_comorbidity_suspects\n    \n        where (current_year_billed = false\n            or current_year_billed is null)\n    \n\n)\n\n, observation_suspects as (\n\n    select distinct\n          patient_id\n        , data_source\n        , hcc_code\n        , hcc_description\n        , reason\n        , contributing_factor\n        , suspect_date\n    from dev_thuxuan.hcc_suspecting._int_observation_suspects\n    \n        where (current_year_billed = false\n            or current_year_billed is null)\n    \n\n)\n\n, lab_suspects as (\n\n    select distinct\n          patient_id\n        , data_source\n        , hcc_code\n        , hcc_description\n        , reason\n        , contributing_factor\n        , suspect_date\n    from dev_thuxuan.hcc_suspecting._int_lab_suspects\n    \n        where (current_year_billed = false\n            or current_year_billed is null)\n    \n\n)\n\n, medication_suspects as (\n\n    select distinct\n          patient_id\n        , data_source\n        , hcc_code\n        , hcc_description\n        , reason\n        , contributing_factor\n        , suspect_date\n    from dev_thuxuan.hcc_suspecting._int_medication_suspects\n    \n        where (current_year_billed = false\n            or current_year_billed is null)\n    \n\n)\n\n, unioned as (\n\n    select * from hcc_history_suspects\n    union all\n    select * from comorbidity_suspects\n    union all\n    select * from observation_suspects\n    union all\n    select * from lab_suspects\n    union all\n    select * from medication_suspects\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(data_source as TEXT) as data_source\n        , cast(hcc_code as TEXT) as hcc_code\n        , cast(hcc_description as TEXT) as hcc_description\n        , cast(reason as TEXT) as reason\n        , cast(contributing_factor as TEXT) as contributing_factor\n        , cast(suspect_date as date) as suspect_date\n    from unioned\n\n)\n\nselect\n      patient_id\n    , data_source\n    , hcc_code\n    , hcc_description\n    , reason\n    , contributing_factor\n    , suspect_date\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.hcc_suspecting.list"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:32.246904Z", "completed_at": "2024-10-01T16:35:32.252907Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:32.252907Z", "completed_at": "2024-10-01T16:35:33.697339Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.6337645053863525, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f0111e00e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_05_num", "compiled": true, "compiled_code": "\n\nselect\n    e.data_source\n  , e.patient_id\n  , e.year_number\n  , e.encounter_id\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_inpatient_encounter as e\ninner join dev_thuxuan.ahrq_measures._int_pqi_05_denom as denom\n  on e.patient_id = denom.patient_id\n  and e.data_source = denom.data_source\n  and e.year_number = denom.year_number\nleft join dev_thuxuan.ahrq_measures._value_set_pqi as copd\n  on e.primary_diagnosis_code = copd.code\n  and copd.value_set_name = 'chronic_obstructive_pulmonary_disorder'\n  and copd.pqi_number = '05'\nleft join dev_thuxuan.ahrq_measures._value_set_pqi asthma\n  on e.primary_diagnosis_code = asthma.code\n  and asthma.value_set_name = 'asthma'\n  and asthma.pqi_number = '05'\nleft join dev_thuxuan.ahrq_measures._int_pqi_05_exclusions as shared\n  on e.encounter_id = shared.encounter_id\n  and e.data_source = shared.data_source\nwhere shared.encounter_id is null\n  and (\n    asthma.code is not null \n    or copd.code is not null\n    )", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_05_num"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:32.495882Z", "completed_at": "2024-10-01T16:35:32.501895Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:32.502894Z", "completed_at": "2024-10-01T16:35:33.763085Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.3923001289367676, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b686"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_07_num", "compiled": true, "compiled_code": "\n\nselect\n    e.data_source\n  , e.patient_id\n  , e.year_number\n  , e.encounter_id\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_inpatient_encounter as e\ninner join dev_thuxuan.ahrq_measures._value_set_pqi as hyp\n  on e.primary_diagnosis_code = hyp.code\n  and hyp.value_set_name = 'hypertension_diagnosis_codes'\n  and hyp.pqi_number = '07'\ninner join dev_thuxuan.ahrq_measures._int_pqi_07_denom as denom\n  on e.patient_id = denom.patient_id\n  and e.data_source = denom.data_source\n  and e.year_number = denom.year_number\nleft join dev_thuxuan.ahrq_measures._int_pqi_07_exclusions as shared\n  on e.encounter_id = shared.encounter_id\n  and e.data_source = shared.data_source\nwhere shared.encounter_id is null", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_07_num"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:32.339619Z", "completed_at": "2024-10-01T16:35:32.347132Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:32.347132Z", "completed_at": "2024-10-01T16:35:33.768193Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.5490589141845703, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b682"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_03_num", "compiled": true, "compiled_code": "\n\nselect\n    e.data_source\n  , e.patient_id\n  , e.year_number\n  , e.encounter_id\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_inpatient_encounter as e\ninner join dev_thuxuan.ahrq_measures._value_set_pqi as pqi\n  on e.primary_diagnosis_code = pqi.code\n  and pqi.value_set_name = 'diabetes_with_long-term_complications_diagnosis_codes'\n  and pqi.pqi_number = '03'\ninner join dev_thuxuan.ahrq_measures._int_pqi_03_denom as denom\n  on e.patient_id = denom.patient_id\n  and e.data_source = denom.data_source\n  and e.year_number = denom.year_number\nleft join dev_thuxuan.ahrq_measures._int_pqi_03_exclusions as shared\n  on e.encounter_id = shared.encounter_id\n  and e.data_source = shared.data_source\nwhere shared.encounter_id is null", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_03_num"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:33.397205Z", "completed_at": "2024-10-01T16:35:33.404229Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:33.404229Z", "completed_at": "2024-10-01T16:35:34.918491Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.7140395641326904, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b68a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_12_num", "compiled": true, "compiled_code": "\n\nselect\n    e.data_source\n  , e.patient_id\n  , e.year_number\n  , e.encounter_id\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_inpatient_encounter as e\ninner join dev_thuxuan.ahrq_measures._value_set_pqi as hyp\n  on e.primary_diagnosis_code = hyp.code\n  and hyp.value_set_name = 'urinary_tract_infection_diagnosis_codes'\n  and hyp.pqi_number = '12'\ninner join dev_thuxuan.ahrq_measures._int_pqi_12_denom as denom\n  on e.patient_id = denom.patient_id\n  and e.data_source = denom.data_source\n  and e.year_number = denom.year_number\nleft join dev_thuxuan.ahrq_measures._int_pqi_12_exclusions as shared\n  on e.encounter_id = shared.encounter_id\n  and e.data_source = shared.data_source\nwhere shared.encounter_id is null", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_12_num"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:33.779809Z", "completed_at": "2024-10-01T16:35:33.784838Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:33.784838Z", "completed_at": "2024-10-01T16:35:34.956692Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.375389814376831, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f0111e012"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_08_num", "compiled": true, "compiled_code": "\n\nselect\n    e.data_source\n  , e.patient_id\n  , e.year_number\n  , e.encounter_id\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_inpatient_encounter as e\ninner join dev_thuxuan.ahrq_measures._value_set_pqi as hyp\n  on e.primary_diagnosis_code = hyp.code\n  and hyp.value_set_name = 'heart_failure_diagnosis_codes'\n  and hyp.pqi_number = '08'\ninner join dev_thuxuan.ahrq_measures._int_pqi_08_denom as denom\n  on e.patient_id = denom.patient_id\n  and e.data_source = denom.data_source\n  and e.year_number = denom.year_number\nleft join dev_thuxuan.ahrq_measures._int_pqi_08_exclusions as shared\n  on e.encounter_id = shared.encounter_id\n  and e.data_source = shared.data_source\nwhere shared.encounter_id is null", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_08_num"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:33.887675Z", "completed_at": "2024-10-01T16:35:33.896186Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:33.901192Z", "completed_at": "2024-10-01T16:35:35.448570Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.780566692352295, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d69e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_14_num", "compiled": true, "compiled_code": "\n\nselect\n    e.data_source\n  , e.patient_id\n  , e.year_number\n  , e.encounter_id\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_inpatient_encounter as e\ninner join dev_thuxuan.ahrq_measures._value_set_pqi as hyp\n  on e.primary_diagnosis_code = hyp.code\n  and hyp.value_set_name = 'uncontrolled_diabetes_diagnosis_codes'\n  and hyp.pqi_number = '14'\ninner join dev_thuxuan.ahrq_measures._int_pqi_14_denom as denom\n  on e.patient_id = denom.patient_id\n  and e.data_source = denom.data_source\n  and e.year_number = denom.year_number\nleft join dev_thuxuan.ahrq_measures._int_pqi_14_exclusions as shared\n  on e.encounter_id = shared.encounter_id\n  and e.data_source = shared.data_source\nwhere shared.encounter_id is null", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_14_num"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:33.910194Z", "completed_at": "2024-10-01T16:35:33.918727Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:33.920721Z", "completed_at": "2024-10-01T16:35:35.450660Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.7599713802337646, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f0111e016"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_11_num", "compiled": true, "compiled_code": "\n\nselect\n    e.data_source\n  , e.patient_id\n  , e.year_number\n  , e.encounter_id\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_inpatient_encounter as e\ninner join dev_thuxuan.ahrq_measures._value_set_pqi as hyp\n  on e.primary_diagnosis_code = hyp.code\n  and hyp.value_set_name = 'community_acquired_bacterial_pneumonia_diagnosis_codes'\n  and hyp.pqi_number = '11'\ninner join dev_thuxuan.ahrq_measures._int_pqi_11_denom as denom\n  on e.patient_id = denom.patient_id\n  and e.data_source = denom.data_source\n  and e.year_number = denom.year_number\nleft join dev_thuxuan.ahrq_measures._int_pqi_11_exclusions as shared\n  on e.encounter_id = shared.encounter_id\n  and e.data_source = shared.data_source\nwhere shared.encounter_id is null", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_11_num"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:33.924720Z", "completed_at": "2024-10-01T16:35:33.933244Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:33.934244Z", "completed_at": "2024-10-01T16:35:35.594068Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.794053316116333, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b68e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_15_num", "compiled": true, "compiled_code": "\n\nselect\n    e.data_source\n  , e.patient_id\n  , e.year_number\n  , e.encounter_id\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_inpatient_encounter as e\ninner join dev_thuxuan.ahrq_measures._value_set_pqi as hyp\n  on e.primary_diagnosis_code = hyp.code\n  and hyp.value_set_name = 'asthma_diagnosis_codes'\n  and hyp.pqi_number = '15'\ninner join dev_thuxuan.ahrq_measures._int_pqi_15_denom as denom\n  on e.patient_id = denom.patient_id\n  and e.data_source = denom.data_source\n  and e.year_number = denom.year_number\nleft join dev_thuxuan.ahrq_measures._int_pqi_15_exclusions as shared\n  on e.encounter_id = shared.encounter_id\n  and e.data_source = shared.data_source\nwhere shared.encounter_id is null", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_15_num"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:35.117259Z", "completed_at": "2024-10-01T16:35:35.124257Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:35.124257Z", "completed_at": "2024-10-01T16:35:36.720694Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.7322261333465576, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d6a2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_16_num", "compiled": true, "compiled_code": "\n\nwith diagnosis as (\n    select distinct\n        c.encounter_id\n      , c.data_source\n    from dev_thuxuan.ahrq_measures._stg_pqi_condition as c\n    inner join dev_thuxuan.ahrq_measures._value_set_pqi as pqi\n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-cm'\n      and pqi.value_set_name = 'diabetes_diagnosis_codes'\n      and pqi_number = '16'\n    where c.encounter_id is not null\n),\n\n\nprocedures as (\n    select distinct\n        p.encounter_id\n      , p.data_source\n    from dev_thuxuan.ahrq_measures._stg_pqi_procedure as p\n    inner join diagnosis as d \n      on p.encounter_id = d.encounter_id\n      and d.data_source = p.data_source\n    inner join dev_thuxuan.ahrq_measures._value_set_pqi as pqi\n      on p.normalized_code = pqi.code\n      and p.normalized_code_type = 'icd-10-pcs'\n      and pqi.value_set_name = 'lower-extremity_amputation_procedure_codes'\n      and pqi_number = '16'\n)\n\nselect\n    e.data_source\n  , e.patient_id\n  , e.year_number\n  , e.encounter_id\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._stg_pqi_inpatient_encounter as e\ninner join dev_thuxuan.ahrq_measures._int_pqi_16_denom as denom \n  on e.patient_id = denom.patient_id\n  and e.data_source = denom.data_source\n  and e.year_number = denom.year_number\n    inner join procedures as p\n  on e.encounter_id = p.encounter_id\n  and e.data_source = p.data_source\nleft join dev_thuxuan.ahrq_measures._int_pqi_16_exclusions as shared\n  on e.encounter_id = shared.encounter_id\n  and e.data_source = shared.data_source\nwhere shared.encounter_id is null", "relation_name": "dev_thuxuan.ahrq_measures._int_pqi_16_num"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:35.723782Z", "completed_at": "2024-10-01T16:35:35.731834Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:35.731834Z", "completed_at": "2024-10-01T16:35:37.224151Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.6949434280395508, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b692"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm48_long", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from dev_thuxuan.quality_measures._int_cqm48_denominator\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , evidence_date\n        , evidence_value\n    from dev_thuxuan.quality_measures._int_cqm48_numerator\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_thuxuan.quality_measures._int_cqm48_exclusions\n\n)\n\n, measure_flags as (\n\n    select\n          denominator.patient_id\n        , case\n            when denominator.patient_id is not null\n            then 1\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as exclusion_flag\n        , numerator.evidence_date\n        , numerator.evidence_value\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , (row_number() over(\n            partition by\n                  denominator.patient_id\n                , denominator.performance_period_begin\n                , denominator.performance_period_end\n                , denominator.measure_id\n                , denominator.measure_name\n              order by\n                  case when numerator.evidence_date is null then 1 else 0 end,\n                  numerator.evidence_date desc\n                , case when exclusions.exclusion_date is null then 1 else 0 end,\n                  exclusions.exclusion_date desc\n          )) as rn\n    from denominator\n        left join numerator\n            on denominator.patient_id = numerator.patient_id\n        left join exclusions\n            on denominator.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , evidence_value\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from measure_flags\n    where rn = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , evidence_value\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_cqm48_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:35.675161Z", "completed_at": "2024-10-01T16:35:35.690795Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:35.691686Z", "completed_at": "2024-10-01T16:35:37.226248Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.7405669689178467, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f0111e01e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cbe0101_long", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from dev_thuxuan.quality_measures._int_cbe0101_denominator\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , evidence_date\n        , evidence_value\n    from dev_thuxuan.quality_measures._int_cbe0101_numerator\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_thuxuan.quality_measures._int_cbe0101_exclusions\n\n)\n\n, measure_flags as (\n\n    select\n          denominator.patient_id\n        , case\n            when denominator.patient_id is not null\n            then 1\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as exclusion_flag\n        , numerator.evidence_date\n        , numerator.evidence_value\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , (row_number() over(\n            partition by\n                  denominator.patient_id\n                , denominator.performance_period_begin\n                , denominator.performance_period_end\n                , denominator.measure_id\n                , denominator.measure_name\n              order by\n                  case when numerator.evidence_date is null then 1 else 0 end,\n                  numerator.evidence_date desc\n                , case when exclusions.exclusion_date is null then 1 else 0 end,\n                  exclusions.exclusion_date desc\n          )) as rn\n    from denominator\n        left join numerator\n            on denominator.patient_id = numerator.patient_id\n        left join exclusions\n            on denominator.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , evidence_value\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from measure_flags\n    where rn = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , evidence_value\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_cbe0101_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:35.682712Z", "completed_at": "2024-10-01T16:35:35.695241Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:35.696254Z", "completed_at": "2024-10-01T16:35:37.554401Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.9910943508148193, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d6a6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm236_exclusions", "compiled": true, "compiled_code": "with frailty as (\n\n  select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n  from dev_thuxuan.quality_measures._int_shared_exclusions_frailty\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_cqm236__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_cqm236__performance_period\n\n)\n\n)\n\n, denominator as (\n\n  select\n      patient_id\n    , age\n  from dev_thuxuan.quality_measures._int_cqm236_denominator\n\n)\n-- advanced illness start\n, advanced_illness_exclusion as (\n\n  select\n    source.*\n  from dev_thuxuan.quality_measures._int_shared_exclusions_advanced_illness as source\n  inner join frailty\n    on source.patient_id = frailty.patient_id\n  where source.exclusion_date\n    between\n      \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_cqm236__performance_period\n\n)\n        )\n\n\n      and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_cqm236__performance_period\n\n)\n\n)\n\n, acute_inpatient_advanced_illness as (\n\n  select\n    *\n  from advanced_illness_exclusion\n  where patient_type = 'acute_inpatient'\n\n)\n\n, nonacute_outpatient_advanced_illness as (\n\n  select\n    *\n  from advanced_illness_exclusion\n  where patient_type = 'nonacute_outpatient'\n\n)\n\n, acute_inpatient_counts as (\n\n    select\n          patient_id\n        , exclusion_type\n        , count(distinct exclusion_date) as encounter_count\n    from acute_inpatient_advanced_illness\n    group by patient_id, exclusion_type\n\n)\n\n, nonacute_outpatient_counts as (\n\n    select\n          patient_id\n        , exclusion_type\n        , count(distinct exclusion_date) as encounter_count\n    from nonacute_outpatient_advanced_illness\n    group by patient_id, exclusion_type\n\n)\n\n, valid_advanced_illness_exclusions as (\n\n    select\n          acute_inpatient_advanced_illness.patient_id\n        , acute_inpatient_advanced_illness.exclusion_date\n        , acute_inpatient_advanced_illness.exclusion_reason\n        , acute_inpatient_advanced_illness.exclusion_type\n    from acute_inpatient_advanced_illness\n    left join acute_inpatient_counts\n      on acute_inpatient_advanced_illness.patient_id = acute_inpatient_counts.patient_id\n    where acute_inpatient_counts.encounter_count >= 1\n\n    union all\n\n    select\n        nonacute_outpatient_advanced_illness.patient_id\n      , nonacute_outpatient_advanced_illness.exclusion_date\n      , nonacute_outpatient_advanced_illness.exclusion_reason\n      , nonacute_outpatient_advanced_illness.exclusion_type\n    from nonacute_outpatient_advanced_illness\n    left join nonacute_outpatient_counts\n      on nonacute_outpatient_advanced_illness.patient_id = nonacute_outpatient_counts.patient_id\n    where nonacute_outpatient_counts.encounter_count >= 2\n\n\n)\n-- advanced illness end\n\n, valid_dementia_exclusions as (\n\n  select\n      source.patient_id\n    , source.exclusion_date\n    , source.exclusion_reason\n    , source.exclusion_type\n  from dev_thuxuan.quality_measures._int_shared_exclusions_dementia source\n  inner join frailty\n    on source.patient_id = frailty.patient_id\n  where (\n    source.dispensing_date\n      between \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_cqm236__performance_period\n\n)\n        )\n\n\n          and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_cqm236__performance_period\n\n)\n    or source.paid_date\n      between \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_cqm236__performance_period\n\n)\n        )\n\n\n          and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_cqm236__performance_period\n\n)\n    )\n\n)\n\n, valid_hospice_palliative as (\n\n  select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n  from dev_thuxuan.quality_measures._int_shared_exclusions_hospice_palliative\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_cqm236__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_cqm236__performance_period\n\n)\n\n)\n\n, valid_institutional_snp as (\n\n  select \n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n  from dev_thuxuan.quality_measures._int_shared_exclusions_institutional_snp\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_cqm236__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_cqm236__performance_period\n\n)\n\n)\n\n, measure_specific_procedure_observation_exclusion as (\n\n  select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n    , age\n  from dev_thuxuan.quality_measures._int_cqm236_exclude_procedures_observations\n\n)\n\n, exclusions as (\n\n    select *\n    from valid_advanced_illness_exclusions\n  \n    union all\n\n    select *\n    from valid_dementia_exclusions\n\n    union all\n\n    select *\n    from valid_hospice_palliative\n\n    union all\n\n    select *\n    from valid_institutional_snp\n\n    union all\n\n    select *\n    from valid_dementia_exclusions\n\n)\n\n, combined_exclusions as (\n\n  select \n      exclusions.*\n    , denominator.age\n  from exclusions\n  inner join denominator\n      on exclusions.patient_id = denominator.patient_id\n\n)\n\n, frailty_exclusion_older_than_80 as (\n\n  select\n      frailty.patient_id\n    , frailty.exclusion_date\n    , frailty.exclusion_reason\n    , 'measure specific exclusion for patients older than 80' as exclusion_type\n    , denominator.age\n  from frailty\n  inner join denominator\n  on frailty.patient_id = denominator.patient_id\n    where denominator.age >= 81\n\n)\n\n, valid_exclusions as (\n\n  select * from combined_exclusions\n  where exclusion_type != 'hospice_palliative'\n    and age >= 66\n\n  union all\n\n  select * from combined_exclusions\n  where exclusion_type = 'hospice_palliative'\n\n  union all\n\n  select * from frailty_exclusion_older_than_80\n\n  union all\n\n  select * from measure_specific_procedure_observation_exclusion\n\n)\n\n, add_data_types as (\n\n    select\n        distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , 1 as exclusion_flag\n    from valid_exclusions\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_cqm236_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:36.855219Z", "completed_at": "2024-10-01T16:35:36.862269Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:36.862269Z", "completed_at": "2024-10-01T16:35:38.452336Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.7304472923278809, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d6aa"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm130_long", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from dev_thuxuan.quality_measures._int_cqm130_denominator\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , evidence_date\n        , evidence_value\n    from dev_thuxuan.quality_measures._int_cqm130_numerator\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_thuxuan.quality_measures._int_cqm130_exclusions\n\n)\n\n, measure_flags as (\n\n    select\n          denominator.patient_id\n        , case\n            when denominator.patient_id is not null\n            then 1\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as exclusion_flag\n        , numerator.evidence_date\n        , numerator.evidence_value\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , (row_number() over(\n            partition by\n                  denominator.patient_id\n                , denominator.performance_period_begin\n                , denominator.performance_period_end\n                , denominator.measure_id\n                , denominator.measure_name\n              order by\n                  case when numerator.evidence_date is null then 1 else 0 end,\n                  numerator.evidence_date desc\n                , case when exclusions.exclusion_date is null then 1 else 0 end,\n                  exclusions.exclusion_date desc\n          )) as rn\n    from denominator\n        left join numerator\n            on denominator.patient_id = numerator.patient_id\n        left join exclusions\n            on denominator.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , evidence_value\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from measure_flags\n    where rn = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , evidence_value\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_cqm130_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:37.430652Z", "completed_at": "2024-10-01T16:35:37.437356Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:37.441746Z", "completed_at": "2024-10-01T16:35:39.022229Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.7264344692230225, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f0111e022"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0097_long", "compiled": true, "compiled_code": "\n\n/* selecting the full patient population as the grain of this table */\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from dev_thuxuan.quality_measures._int_nqf0097_denominator\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , evidence_date\n        , evidence_value\n    from dev_thuxuan.quality_measures._int_nqf0097_numerator\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_thuxuan.quality_measures._int_nqf0097_exclusions\n\n)\n\n, measure_flags as (\n\n    select\n          denominator.patient_id\n        , case\n            when denominator.patient_id is not null\n            then 1\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as exclusion_flag\n        , numerator.evidence_date\n        , numerator.evidence_value\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , (row_number() over(\n            partition by\n                  denominator.patient_id\n                , denominator.performance_period_begin\n                , denominator.performance_period_end\n                , denominator.measure_id\n                , denominator.measure_name\n              order by\n                  case when numerator.evidence_date is null then 1 else 0 end,\n                  numerator.evidence_date desc\n                , case when exclusions.exclusion_date is null then 1 else 0 end,\n                  exclusions.exclusion_date desc\n          )) as rn\n    from denominator\n        left join numerator\n            on denominator.patient_id = numerator.patient_id\n        left join exclusions\n            on denominator.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , evidence_value\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from measure_flags\n    where rn = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , evidence_value\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_nqf0097_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:37.422653Z", "completed_at": "2024-10-01T16:35:37.437356Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:37.438741Z", "completed_at": "2024-10-01T16:35:39.024205Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.7579193115234375, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f0111e026"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0041_long", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from dev_thuxuan.quality_measures._int_nqf0041_denominator\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , evidence_date\n        , evidence_value\n    from dev_thuxuan.quality_measures._int_nqf0041_numerator\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_thuxuan.quality_measures._int_nqf0041_exclusions\n\n)\n\n, measure_flags as (\n\n    select\n          denominator.patient_id\n        , case\n            when denominator.patient_id is not null\n            then 1\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as exclusion_flag\n        , numerator.evidence_date\n        , numerator.evidence_value\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , (row_number() over(\n            partition by\n                  denominator.patient_id\n                , denominator.performance_period_begin\n                , denominator.performance_period_end\n                , denominator.measure_id\n                , denominator.measure_name\n              order by\n                  case when numerator.evidence_date is null then 1 else 0 end,\n                  numerator.evidence_date desc\n                , case when exclusions.exclusion_date is null then 1 else 0 end,\n                  exclusions.exclusion_date desc\n          )) as rn\n    from denominator\n        left join numerator\n            on denominator.patient_id = numerator.patient_id\n        left join exclusions\n            on denominator.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , evidence_value\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from measure_flags\n    where rn = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , evidence_value\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_nqf0041_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:37.671256Z", "completed_at": "2024-10-01T16:35:37.679761Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:37.680765Z", "completed_at": "2024-10-01T16:35:39.263152Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.7402563095092773, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b696"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.mart_review__ed_classification", "compiled": true, "compiled_code": "\n\nWITH cte AS\n(\n    SELECT DISTINCT location_id, npi, name\n    FROM dev_thuxuan.core.location\n)\n\nSELECT\n    e.encounter_id,\n    case when s.encounter_id is null then 'Not Classified' else s.ed_classification_description end as ed_classification_description,\n    CASE\n        when s.encounter_id is null then 'Non-Avoidable'\n        when cast(s.ed_classification_order as int) <= 3 then s.ed_classification_description\n        ELSE 'Non-Avoidable' END AS avoidable_category,\n    e.paid_amount,\n    e.primary_diagnosis_code,\n    e.primary_diagnosis_description,\n    e.primary_diagnosis_code || ' | ' || e.primary_diagnosis_description as primary_diagnosis_and_description,\n    p.ccsr_parent_category,\n    p.ccsr_category,\n    p.ccsr_category_description,\n    p.ccsr_category || ' | ' || p.ccsr_category_description as ccsr_parent_category_and_description,\n    b.body_system,\n    e.facility_id,\n    e.allowed_amount,\n    e.charge_amount,\n    e.data_source,\n    e.length_of_stay,\n    e.discharge_disposition_code || ' | ' || e.discharge_disposition_description as discharge_code_and_description,\n    e.patient_id || ' | ' || e.data_source as patient_source_key,\n    e.facility_name,\n    e.encounter_start_date\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.core.encounter e\nleft join dev_thuxuan.ed_classification.summary s on e.encounter_id = s.encounter_id\nleft join cte on e.facility_id = cte.location_id\nleft join dev_thuxuan.ccsr.dx_vertical_pivot as p\n  on e.primary_diagnosis_code = p.code\n  and p.ccsr_category_rank = 1\nleft join dev_thuxuan.ccsr._value_set_dxccsr_v2023_1_body_systems b on p.ccsr_parent_category = b.ccsr_parent_category\nwhere e.encounter_type = 'emergency department'", "relation_name": "dev_thuxuan.data_quality.mart_review__ed_classification"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:35.159063Z", "completed_at": "2024-10-01T16:35:35.172624Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:35.173623Z", "completed_at": "2024-10-01T16:35:39.320617Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 4.342558145523071, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f0111e01a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__pqi_exclusion_long", "compiled": true, "compiled_code": "\n\nselect\n    e.data_source\n  , e.encounter_id\n  , e.exclusion_reason\n  , e.exclusion_number\n  , 1 as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_01_exclusions as e\n\nunion all\n\nselect\n    e.data_source\n  , e.encounter_id\n  , e.exclusion_reason\n  , e.exclusion_number\n  , 3 as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_03_exclusions as e\n\nunion all\n\nselect\n    e.data_source\n  , e.encounter_id\n  , e.exclusion_reason\n  , e.exclusion_number\n  , 5 as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_05_exclusions as e\n\nunion all\n\nselect\n    e.data_source\n  , e.encounter_id\n  , e.exclusion_reason\n  , e.exclusion_number\n  , 7 as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_07_exclusions as e\n\nunion all\n\nselect\n    e.data_source\n  , e.encounter_id\n  , e.exclusion_reason\n  , e.exclusion_number\n  , 8 as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_08_exclusions as e\n\nunion all\n\nselect\n    e.data_source\n  , e.encounter_id\n  , e.exclusion_reason\n  , e.exclusion_number\n  , 11 as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_11_exclusions as e\n\nunion all\n\nselect\n    e.data_source\n  , e.encounter_id\n  , e.exclusion_reason\n  , e.exclusion_number\n  , 12 as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_12_exclusions as e\n\nunion all\n\nselect\n    e.data_source\n  , e.encounter_id\n  , e.exclusion_reason\n  , e.exclusion_number\n  , 14 as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_14_exclusions as e\n\nunion all\n\nselect\n    e.data_source\n  , e.encounter_id\n  , e.exclusion_reason\n  , e.exclusion_number\n  , 15 as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_15_exclusions as e\n\nunion all\n\nselect\n    e.data_source\n  , e.encounter_id\n  , e.exclusion_reason\n  , e.exclusion_number\n  , 16 as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_16_exclusions as e", "relation_name": "dev_thuxuan.ahrq_measures.pqi_exclusion_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:39.183097Z", "completed_at": "2024-10-01T16:35:39.188096Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:39.188096Z", "completed_at": "2024-10-01T16:35:40.415814Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.350343942642212, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f7c5-0001-987f0110be72"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.readmissions__index_admission", "compiled": true, "compiled_code": "\n\n-- Here we list all index admissions for the hospital wide readmissions\n-- measure.\n-- These represent encounter_ids that meet the requirements to be an\n-- index admission for the HWR measure.\n-- These are the requirements for a hospitalization to be an index admission\n-- for the HWR measure:\n--\n--     Time Requirement: The discharge data must be at least 30 days\n--                       earlier than the last dischareg date available\n--                       in the dataset.\n-- \n--     Discharge Requirements: The patient must not be discharged to another\n--                             acute care hospital; the patient must not have\n--                             left against medical advice; and the patient\n--                             must be alive at discharge.\n--\n--     Diagnosis Requirements: Exclude encounters where based on the CCS\n--     (exclusions)            diagnosis category we know the encounter was\n--                             for medical treatment of cancer, rehabilitation,\n--                             or psychiatric reasons.\n\n\n\nselect distinct a.encounter_id, '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.readmissions._int_encounter a\ninner join dev_thuxuan.readmissions._int_index_time_requirement b\n    on a.encounter_id = b.encounter_id\ninner join dev_thuxuan.readmissions._int_index_discharge_requirement c\n    on a.encounter_id = c.encounter_id\nleft join dev_thuxuan.readmissions._int_exclusion d\n    on a.encounter_id = d.encounter_id\nwhere d.encounter_id is null", "relation_name": "dev_thuxuan.readmissions._int_index_admission"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:39.507623Z", "completed_at": "2024-10-01T16:35:39.514912Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:39.515778Z", "completed_at": "2024-10-01T16:35:40.668935Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.3005123138427734, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f7c5-0001-987f0110be76"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cbe0055_long", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from dev_thuxuan.quality_measures._int_cbe0055_denominator\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , evidence_date\n        , evidence_value\n    from dev_thuxuan.quality_measures._int_cbe0055_numerator\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_thuxuan.quality_measures._int_cbe0055_exclusions\n\n)\n\n, measure_flags as (\n\n    select\n          denominator.patient_id\n        , case\n            when denominator.patient_id is not null\n            then 1\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as exclusion_flag\n        , numerator.evidence_date\n        , numerator.evidence_value\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , (row_number() over(\n            partition by\n                  denominator.patient_id\n                , denominator.performance_period_begin\n                , denominator.performance_period_end\n                , denominator.measure_id\n                , denominator.measure_name\n              order by\n                  case when numerator.evidence_date is null then 1 else 0 end,\n                  numerator.evidence_date desc\n                , case when exclusions.exclusion_date is null then 1 else 0 end,\n                  exclusions.exclusion_date desc\n          )) as rn\n    from denominator\n        left join numerator\n            on denominator.patient_id = numerator.patient_id\n        left join exclusions\n            on denominator.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , evidence_value\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from measure_flags\n    where rn = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , evidence_value\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_cbe0055_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:39.154783Z", "completed_at": "2024-10-01T16:35:39.164569Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:39.164569Z", "completed_at": "2024-10-01T16:35:40.945914Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.9315400123596191, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d6ae"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0053_exclusions_stage_1", "compiled": true, "compiled_code": "with frailty as (\n\n    select\n        patient_id\n      , exclusion_date\n      , exclusion_reason\n    from dev_thuxuan.quality_measures._int_shared_exclusions_frailty\n    where exclusion_date between (\n  select\n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_nqf0053__performance_period\n\n) and (\n  select\n    performance_period_end\n  from dev_thuxuan.quality_measures._int_nqf0053__performance_period\n\n)\n\n)\n\n, frailty_within_defined_window as (\n\n  select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n  from dev_thuxuan.quality_measures._int_shared_exclusions_frailty\n  where exclusion_date between\n    \n\n    dateadd(\n        month,\n        -6,\n        (\n  select\n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_nqf0053__performance_period\n\n)\n        )\n\n\n    and (\n  select\n    lookback_period_december\n  from dev_thuxuan.quality_measures._int_nqf0053__performance_period\n\n)\n\n)\n\n, valid_hospice_palliative as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n        , exclusion_type\n    from dev_thuxuan.quality_measures._int_shared_exclusions_hospice_palliative\n    where exclusion_date between (\n  select\n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_nqf0053__performance_period\n\n) and (\n  select\n    performance_period_end\n  from dev_thuxuan.quality_measures._int_nqf0053__performance_period\n\n)\n\n)\n\n, exclusion_procedure_and_medication as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n        , exclusion_type\n    from dev_thuxuan.quality_measures._int_nqf0053_exclude_procedures_medications\n\n)\n\n, valid_institutional_snp as (\n\n  select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n  from dev_thuxuan.quality_measures._int_shared_exclusions_institutional_snp\n  where exclusion_date between\n    \n\n    dateadd(\n        month,\n        -6,\n        (\n  select\n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_nqf0053__performance_period\n\n)\n        )\n\n\n\n  and (\n  select\n    lookback_period_december\n  from dev_thuxuan.quality_measures._int_nqf0053__performance_period\n\n)\n\n)\n\n, valid_dementia_exclusions as (\n\n  select\n      source.patient_id\n    , source.exclusion_date\n    , source.exclusion_reason\n    , source.exclusion_type\n  from dev_thuxuan.quality_measures._int_shared_exclusions_dementia source\n  inner join frailty\n    on source.patient_id = frailty.patient_id\n  where (\n    source.dispensing_date\n      between \n\n    dateadd(\n        year,\n        -1,\n        (\n  select\n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_nqf0053__performance_period\n\n)\n        )\n\n\n          and (\n  select\n    performance_period_end\n  from dev_thuxuan.quality_measures._int_nqf0053__performance_period\n\n)\n    or source.paid_date\n      between \n\n    dateadd(\n        year,\n        -1,\n        (\n  select\n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_nqf0053__performance_period\n\n)\n        )\n\n\n          and (\n  select\n    performance_period_end\n  from dev_thuxuan.quality_measures._int_nqf0053__performance_period\n\n)\n    )\n\n)\n\n-- advanced illness start\n, advanced_illness_exclusion as (\n\n  select\n    source.*\n  from dev_thuxuan.quality_measures._int_shared_exclusions_advanced_illness as source\n  inner join frailty\n    on source.patient_id = frailty.patient_id\n  where source.exclusion_date\n    between\n      \n\n    dateadd(\n        year,\n        -1,\n        (\n  select\n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_nqf0053__performance_period\n\n)\n        )\n\n\n      and (\n  select\n    performance_period_end\n  from dev_thuxuan.quality_measures._int_nqf0053__performance_period\n\n)\n\n)\n\n, acute_inpatient_advanced_illness as (\n\n  select\n    *\n  from advanced_illness_exclusion\n  where patient_type = 'acute_inpatient'\n\n)\n\n, nonacute_outpatient_advanced_illness as (\n\n  select\n    *\n  from advanced_illness_exclusion\n  where patient_type = 'nonacute_outpatient'\n\n)\n\n, acute_inpatient_counts as (\n\n    select\n          patient_id\n        , exclusion_type\n        , count(distinct exclusion_date) as encounter_count\n    from acute_inpatient_advanced_illness\n    group by patient_id, exclusion_type\n\n)\n\n, nonacute_outpatient_counts as (\n\n    select\n          patient_id\n        , exclusion_type\n        , count(distinct exclusion_date) as encounter_count\n    from nonacute_outpatient_advanced_illness\n    group by patient_id, exclusion_type\n\n)\n\n, valid_advanced_illness_exclusions as (\n\n    select\n          acute_inpatient_advanced_illness.patient_id\n        , acute_inpatient_advanced_illness.exclusion_date\n        , acute_inpatient_advanced_illness.exclusion_reason\n        , acute_inpatient_advanced_illness.exclusion_type\n    from acute_inpatient_advanced_illness\n    left join acute_inpatient_counts\n      on acute_inpatient_advanced_illness.patient_id = acute_inpatient_counts.patient_id\n    where acute_inpatient_counts.encounter_count >= 1\n\n    union all\n\n    select\n        nonacute_outpatient_advanced_illness.patient_id\n      , nonacute_outpatient_advanced_illness.exclusion_date\n      , nonacute_outpatient_advanced_illness.exclusion_reason\n      , nonacute_outpatient_advanced_illness.exclusion_type\n    from nonacute_outpatient_advanced_illness\n    left join nonacute_outpatient_counts\n      on nonacute_outpatient_advanced_illness.patient_id = nonacute_outpatient_counts.patient_id\n    where nonacute_outpatient_counts.encounter_count >= 2\n\n\n)\n-- advanced illness end\n\n, frailty_patients_within_defined_window as (\n\n    select\n          frailty_within_defined_window.patient_id\n        , frailty_within_defined_window.exclusion_date\n        , frailty_within_defined_window.exclusion_reason\n        , 'measure specific exclusion for defined window' as exclusion_type\n    from frailty_within_defined_window\n\n)\n\n, exclusions as (\n\n    select * from valid_advanced_illness_exclusions\n\n    union all\n\n    select * from valid_dementia_exclusions\n\n    union all\n\n    select * from valid_institutional_snp\n\n    union all\n\n    select * from valid_hospice_palliative\n\n    union all\n\n    select * from exclusion_procedure_and_medication\n\n    union all\n\n    select * from frailty_patients_within_defined_window\n\n)\n\nselect\n      *\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom exclusions", "relation_name": "dev_thuxuan.quality_measures._int_nqf0053_exclusions_stage_1"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:39.416032Z", "completed_at": "2024-10-01T16:35:39.424149Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:39.425032Z", "completed_at": "2024-10-01T16:35:41.023961Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.8211755752563477, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f0111e02a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm438_long", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from dev_thuxuan.quality_measures._int_cqm438_denominator\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , evidence_date\n        , evidence_value\n    from dev_thuxuan.quality_measures._int_cqm438_numerator\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_thuxuan.quality_measures._int_cqm438_exclusions\n\n)\n\n, measure_flags as (\n\n    select\n          denominator.patient_id\n        , case\n            when denominator.patient_id is not null\n            then 1\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as exclusion_flag\n        , numerator.evidence_date\n        , numerator.evidence_value\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , (row_number() over(\n            partition by\n                  denominator.patient_id\n                , denominator.performance_period_begin\n                , denominator.performance_period_end\n                , denominator.measure_id\n                , denominator.measure_name\n              order by\n                  case when numerator.evidence_date is null then 1 else 0 end,\n                  numerator.evidence_date desc\n                , case when exclusions.exclusion_date is null then 1 else 0 end,\n                  exclusions.exclusion_date desc\n          )) as rn\n    from denominator\n        left join numerator\n            on denominator.patient_id = numerator.patient_id\n        left join exclusions\n            on denominator.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , evidence_value\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from measure_flags\n    where rn = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , evidence_value\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_cqm438_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:38.804428Z", "completed_at": "2024-10-01T16:35:38.813051Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:38.814056Z", "completed_at": "2024-10-01T16:35:41.302782Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.6648635864257812, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b69a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_exclusions", "compiled": true, "compiled_code": "with frailty as (\n\n  select\n    *\n  from dev_thuxuan.quality_measures._int_shared_exclusions_frailty\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_nqf2372__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_nqf2372__performance_period\n\n)\n\n)\n\n, valid_mastectomy_patients as (\n\n    select\n        patient_id\n      , exclusion_date\n      , exclusion_reason\n    from dev_thuxuan.quality_measures._int_nqf2372_exclude_mastectomy\n)\n\n, valid_hospice_palliative as (\n\n  select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n  from dev_thuxuan.quality_measures._int_shared_exclusions_hospice_palliative\n  where lower(exclusion_reason) in \n  (\n        'palliative care encounter'\n      , 'palliative care intervention'\n      , 'hospice care ambulatory'\n      , 'hospice encounter'\n  )\n  and\n  exclusion_date between (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_nqf2372__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_nqf2372__performance_period\n\n)\n\n)\n\n, valid_institutional_snp as (\n\n  select \n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n  from dev_thuxuan.quality_measures._int_shared_exclusions_institutional_snp\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_nqf2372__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_nqf2372__performance_period\n\n)\n\n)\n\n, valid_dementia_exclusions as (\n\n  select\n      source.patient_id\n    , source.exclusion_date\n    , source.exclusion_reason\n    , source.exclusion_type\n  from dev_thuxuan.quality_measures._int_shared_exclusions_dementia source\n  inner join frailty\n    on source.patient_id = frailty.patient_id\n  where (\n    source.dispensing_date\n      between \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_nqf2372__performance_period\n\n)\n        )\n\n\n          and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_nqf2372__performance_period\n\n)\n    or source.paid_date\n      between \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_nqf2372__performance_period\n\n)\n        )\n\n\n          and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_nqf2372__performance_period\n\n)\n    )\n\n)\n\n-- advanced illness start\n, advanced_illness_exclusion as (\n\n  select\n    source.*\n  from dev_thuxuan.quality_measures._int_shared_exclusions_advanced_illness as source\n  inner join frailty\n    on source.patient_id = frailty.patient_id\n  where source.exclusion_date\n    between\n      \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_thuxuan.quality_measures._int_nqf2372__performance_period\n\n)\n        )\n\n\n      and (\n  select \n    performance_period_end\n  from dev_thuxuan.quality_measures._int_nqf2372__performance_period\n\n)\n\n)\n\n, acute_inpatient_advanced_illness as (\n\n  select\n    *\n  from advanced_illness_exclusion\n  where patient_type = 'acute_inpatient'\n\n)\n\n, nonacute_outpatient_advanced_illness as (\n\n  select\n    *\n  from advanced_illness_exclusion\n  where patient_type = 'nonacute_outpatient'\n\n)\n\n, acute_inpatient_counts as (\n\n    select\n          patient_id\n        , exclusion_type\n        , count(distinct exclusion_date) as encounter_count\n    from acute_inpatient_advanced_illness\n    group by patient_id, exclusion_type\n\n)\n\n, nonacute_outpatient_counts as (\n\n    select\n          patient_id\n        , exclusion_type\n        , count(distinct exclusion_date) as encounter_count\n    from nonacute_outpatient_advanced_illness\n    group by patient_id, exclusion_type\n\n)\n\n, valid_advanced_illness_exclusions as (\n\n    select\n          acute_inpatient_advanced_illness.patient_id\n        , acute_inpatient_advanced_illness.exclusion_date\n        , acute_inpatient_advanced_illness.exclusion_reason\n        , acute_inpatient_advanced_illness.exclusion_type\n    from acute_inpatient_advanced_illness\n    left join acute_inpatient_counts\n      on acute_inpatient_advanced_illness.patient_id = acute_inpatient_counts.patient_id\n    where acute_inpatient_counts.encounter_count >= 1\n\n    union all\n\n    select\n        nonacute_outpatient_advanced_illness.patient_id\n      , nonacute_outpatient_advanced_illness.exclusion_date\n      , nonacute_outpatient_advanced_illness.exclusion_reason\n      , nonacute_outpatient_advanced_illness.exclusion_type\n    from nonacute_outpatient_advanced_illness\n    left join nonacute_outpatient_counts\n      on nonacute_outpatient_advanced_illness.patient_id = nonacute_outpatient_counts.patient_id\n    where nonacute_outpatient_counts.encounter_count >= 2\n\n)\n-- advanced illness end\n\n, valid_mastectomy_patients_with_exclusion_type as (\n\n    select\n        patient_id\n      , exclusion_date\n      , exclusion_reason\n      , 'mastectomy_performed' as exclusion_type\n    from valid_mastectomy_patients\n)\n\n, exclusions as (\n\n    select * from valid_advanced_illness_exclusions\n\n    union all\n\n    select * from valid_dementia_exclusions\n\n    union all\n\n    select * from valid_institutional_snp\n\n    union all\n\n    select * from valid_hospice_palliative\n\n)\n\n, combined_exclusions as (\n\n    select \n      exclusions.*\n    , denominator.age\n    from exclusions\n    inner join dev_thuxuan.quality_measures._int_nqf2372_denominator denominator\n      on exclusions.patient_id = denominator.patient_id\n\n)\n\n, valid_exclusions as (\n\n  select\n        patient_id\n      , exclusion_date\n      , exclusion_reason\n      , exclusion_type\n  from combined_exclusions\n  where exclusion_type != 'hospice_palliative' \n    and age >= 66\n\n  union all\n\n  select\n        patient_id\n      , exclusion_date\n      , exclusion_reason\n      , exclusion_type\n  from combined_exclusions\n  where exclusion_type = 'hospice_palliative'\n\n)\n\n, valid_exclusions_with_mastectomy as (\n\n    select *\n    from valid_exclusions\n\n    union all\n\n    select *\n    from valid_mastectomy_patients_with_exclusion_type\n\n)\n\n, add_data_types as (\n\n    select\n        distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , 1 as exclusion_flag\n    from valid_exclusions_with_mastectomy\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_nqf2372_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:40.537583Z", "completed_at": "2024-10-01T16:35:40.545737Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:40.546743Z", "completed_at": "2024-10-01T16:35:42.133343Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.719184160232544, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d6b2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_long", "compiled": true, "compiled_code": "with denominator as (\n\n    select\n          patient_id\n    from dev_thuxuan.quality_measures._int_nqf0034_denominator\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , evidence_date\n    from dev_thuxuan.quality_measures._int_nqf0034_numerator\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_thuxuan.quality_measures._int_nqf0034_exclusions\n\n)\n\n, measure_flags as (\n\n    select\n          denominator.patient_id\n        , case\n            when denominator.patient_id is not null\n            then 1\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as exclusion_flag\n        , numerator.evidence_date\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , pp.performance_period_begin\n        , pp.performance_period_end\n        , (\n    select id\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'NQF0034'\n    )  as measure_id\n        , (\n\n    select name\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'NQF0034'\n\n    )  as measure_name\n        , (\n    select version\nfrom dev_thuxuan.quality_measures._value_set_measures\nwhere id = 'NQF0034'\n\n    )  as measure_version\n    from denominator\n    inner join dev_thuxuan.quality_measures._int_nqf0034__performance_period pp\n        on 1 = 1\n        left join numerator\n            on denominator.patient_id = numerator.patient_id\n        left join exclusions\n            on denominator.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, add_rownum as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , row_number() over(\n            partition by\n                  patient_id\n                , performance_period_begin\n                , performance_period_end\n                , measure_id\n                , measure_name\n              order by\n                  case when evidence_date is null then 1 else 0 end,\n                  evidence_date desc\n                , case when exclusion_date is null then 1 else 0 end,\n                  exclusion_date desc\n          ) as row_num\n    from measure_flags\n\n)\n\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from add_rownum\n    where row_num = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , cast(null as TEXT) as evidence_value\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_nqf0034_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:40.812100Z", "completed_at": "2024-10-01T16:35:40.818135Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:40.819109Z", "completed_at": "2024-10-01T16:35:42.163695Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.4661779403686523, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b69e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_long", "compiled": true, "compiled_code": "\n\n\nwith conditions_unioned as (\n\n    select * from dev_thuxuan.chronic_conditions._int_cms_chronic_condition_all\n    union distinct\n    select * from dev_thuxuan.chronic_conditions._int_cms_chronic_condition_hiv_aids\n    union distinct\n    select * from dev_thuxuan.chronic_conditions._int_cms_chronic_condition_oud\n\n)\n\n\nselect\n      patient_id\n    , claim_id\n    , start_date\n    , chronic_condition_type\n    , condition_category\n    , condition\n    , data_source\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom conditions_unioned", "relation_name": "dev_thuxuan.chronic_conditions.cms_chronic_conditions_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:41.090315Z", "completed_at": "2024-10-01T16:35:41.098901Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:41.098901Z", "completed_at": "2024-10-01T16:35:42.599793Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.6600677967071533, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f0111e02e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0059_long", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from dev_thuxuan.quality_measures._int_nqf0059_denominator\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , evidence_date\n        , evidence_value\n    from dev_thuxuan.quality_measures._int_nqf0059_numerator\n    where numerator_flag = 1\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_thuxuan.quality_measures._int_nqf0059_exclusions\n\n)\n\n, measure_flags as (\n\n    select\n          denominator.patient_id\n        , case\n            when denominator.patient_id is not null\n            then 1\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as exclusion_flag\n        , numerator.evidence_date\n        , numerator.evidence_value\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , (row_number() over(\n            partition by\n                  denominator.patient_id\n                , denominator.performance_period_begin\n                , denominator.performance_period_end\n                , denominator.measure_id\n                , denominator.measure_name\n              order by\n                  case when numerator.evidence_date is null then 1 else 0 end,\n                  numerator.evidence_date desc\n                , case when exclusions.exclusion_date is null then 1 else 0 end,\n                  exclusions.exclusion_date desc\n          )) as rn\n    from denominator\n        left join numerator\n            on denominator.patient_id = numerator.patient_id\n        left join exclusions\n            on denominator.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , evidence_value\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from measure_flags\n    where rn = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , evidence_value\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_nqf0059_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:41.473205Z", "completed_at": "2024-10-01T16:35:41.606728Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:41.607771Z", "completed_at": "2024-10-01T16:35:42.831791Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.5236992835998535, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d6b6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__list_rollup", "compiled": true, "compiled_code": "\n\nwith list as (\n\n    select\n          patient_id\n        , data_source\n        , hcc_code\n        , hcc_description\n        , reason\n        , contributing_factor\n        , suspect_date\n        , row_number() over (\n            partition by\n                  patient_id\n                , hcc_code\n            order by suspect_date desc\n          ) as row_num\n    from dev_thuxuan.hcc_suspecting.list\n\n)\n\n, list_dedupe as (\n\n    select\n          patient_id\n        , hcc_code\n        , hcc_description\n        , reason\n        , contributing_factor\n        , suspect_date as latest_suspect_date\n    from list\n    where row_num = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(hcc_code as TEXT) as hcc_code\n        , cast(hcc_description as TEXT) as hcc_description\n        , cast(reason as TEXT) as reason\n        , cast(contributing_factor as TEXT) as contributing_factor\n        , cast(latest_suspect_date as date) as latest_suspect_date\n    from list_dedupe\n\n)\n\nselect\n      patient_id\n    , hcc_code\n    , hcc_description\n    , reason\n    , contributing_factor\n    , latest_suspect_date\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.hcc_suspecting.list_rollup"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:41.242718Z", "completed_at": "2024-10-01T16:35:41.251227Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:41.251227Z", "completed_at": "2024-10-01T16:35:42.842317Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.7532408237457275, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b6a2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__patient_risk_factors", "compiled": true, "compiled_code": "\nwith demographic_factors as (\n\n    select\n          patient_id\n        /* concatenate demographic risk factors */\n\n    , gender || ', ' || age_group || ' Years' || ', ' || enrollment_status || ' Enrollee' || ', ' || CASE   WHEN medicaid_status = 'Yes' THEN 'Medicaid'   ELSE 'Non-Medicaid' END || ', ' || dual_status || ' Dual' || ', ' || orec || ', ' || CASE   WHEN institutional_status = 'Yes' THEN 'Institutional'   ELSE 'Non-Institutional' END as description\n\n        , coefficient\n        , factor_type\n        , model_version\n        , payment_year\n    from dev_thuxuan.cms_hcc._int_demographic_factors\n\n)\n\n, demographic_defaults as (\n\n    select\n          patient_id\n        , model_version\n        , enrollment_status_default\n        , medicaid_dual_status_default\n        , orec_default\n        , institutional_status_default\n    from dev_thuxuan.cms_hcc._int_demographic_factors\n\n)\n\n, disease_factors as (\n\n    select\n          patient_id\n        , hcc_description || ' (HCC ' || hcc_code || ')' as description\n        , coefficient\n        , factor_type\n        , model_version\n        , payment_year\n    from dev_thuxuan.cms_hcc._int_disease_factors\n\n)\n\n, enrollment_interactions as (\n\n    select\n          patient_id\n        , description\n        , coefficient\n        , factor_type\n        , model_version\n        , payment_year\n    from dev_thuxuan.cms_hcc._int_enrollment_interaction_factors\n\n)\n\n, disabled_interactions as (\n\n    select\n          patient_id\n        , description\n        , coefficient\n        , factor_type\n        , model_version\n        , payment_year\n    from dev_thuxuan.cms_hcc._int_disabled_interaction_factors\n\n)\n\n, disease_interactions as (\n\n    select\n          patient_id\n        , description\n        , coefficient\n        , factor_type\n        , model_version\n        , payment_year\n    from dev_thuxuan.cms_hcc._int_disease_interaction_factors\n\n)\n\n, hcc_counts as (\n\n    select\n          patient_id\n        , description\n        , coefficient\n        , factor_type\n        , model_version\n        , payment_year\n    from dev_thuxuan.cms_hcc._int_hcc_count_factors\n\n)\n\n, unioned as (\n\n    select * from demographic_factors\n    union all\n    select * from disease_factors\n    union all\n    select * from enrollment_interactions\n    union all\n    select * from disabled_interactions\n    union all\n    select * from disease_interactions\n    union all\n    select * from hcc_counts\n\n)\n\n, add_defaults as (\n\n    select\n          unioned.patient_id\n        , demographic_defaults.enrollment_status_default\n        , demographic_defaults.medicaid_dual_status_default\n        , demographic_defaults.orec_default\n        , demographic_defaults.institutional_status_default\n        , unioned.description as risk_factor_description\n        , unioned.coefficient\n        , unioned.factor_type\n        , unioned.model_version\n        , unioned.payment_year\n    from unioned\n        left join demographic_defaults\n            on unioned.patient_id = demographic_defaults.patient_id\n            and unioned.model_version = demographic_defaults.model_version\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        \n            , cast(enrollment_status_default as boolean) as enrollment_status_default\n            , cast(medicaid_dual_status_default as boolean) as medicaid_dual_status_default\n            , cast(orec_default as boolean) as orec_default\n            , cast(institutional_status_default as boolean) as institutional_status_default\n        \n        , cast(factor_type as TEXT) as factor_type\n        , cast(risk_factor_description as TEXT) as risk_factor_description\n        , round(cast(coefficient as numeric(28,6)),3) as coefficient\n        , cast(model_version as TEXT) as model_version\n        , cast(payment_year as integer) as payment_year\n    from add_defaults\n\n)\n\nselect\n      patient_id\n    , enrollment_status_default\n    , medicaid_dual_status_default\n    , orec_default\n    , institutional_status_default\n    , factor_type\n    , risk_factor_description\n    , coefficient\n    , model_version\n    , payment_year\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.cms_hcc.patient_risk_factors"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:42.263767Z", "completed_at": "2024-10-01T16:35:42.276767Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:42.277767Z", "completed_at": "2024-10-01T16:35:44.145293Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 2.0084190368652344, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b6a6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__summary", "compiled": true, "compiled_code": "\n\nwith patients as (\n\n    select\n          patient_id\n        , sex\n        , birth_date\n        \n            , floor(datediff(\n        hour,\n        birth_date,\n        current_date\n        ) / 8766.0) as age\n        \n    from dev_thuxuan.hcc_suspecting._stg_patient\n    where death_date is null\n\n)\n\n, suspecting_list as (\n\n      select\n          patient_id\n        , count(*) as gaps\n    from dev_thuxuan.hcc_suspecting.list\n    group by patient_id\n\n)\n\n, joined as (\n\n    select\n          patients.patient_id\n        , patients.sex\n        , patients.birth_date\n        , patients.age\n        , suspecting_list.gaps\n    from patients\n         inner join suspecting_list\n         on patients.patient_id = suspecting_list.patient_id\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(sex as TEXT) as patient_sex\n        , cast(birth_date as date) as patient_birth_date\n        , cast(age as integer) as patient_age\n        , cast(gaps as integer) as suspecting_gaps\n    from joined\n\n)\n\nselect\n      patient_id\n    , patient_sex\n    , patient_birth_date\n    , patient_age\n    , suspecting_gaps\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.hcc_suspecting.summary"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:42.761081Z", "completed_at": "2024-10-01T16:35:42.778320Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:42.779716Z", "completed_at": "2024-10-01T16:35:44.585650Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.9555230140686035, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d6be"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm236_long", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from dev_thuxuan.quality_measures._int_cqm236_denominator\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , observation_date\n    from dev_thuxuan.quality_measures._int_cqm236_numerator\n    where numerator_flag = 1\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_thuxuan.quality_measures._int_cqm236_exclusions\n\n)\n\n, measure_flags as (\n\n    select\n          denominator.patient_id\n        , case\n            when denominator.patient_id is not null\n            then 1\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as exclusion_flag\n        , numerator.observation_date\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , (row_number() over(\n            partition by\n                  denominator.patient_id\n                , denominator.performance_period_begin\n                , denominator.performance_period_end\n                , denominator.measure_id\n                , denominator.measure_name\n              order by\n                  case when numerator.observation_date is null then 1 else 0 end,\n                  numerator.observation_date desc\n                , case when exclusions.exclusion_date is null then 1 else 0 end,\n                  exclusions.exclusion_date desc\n          )) as rn\n    from denominator\n        left join numerator\n            on denominator.patient_id = numerator.patient_id\n        left join exclusions\n            on denominator.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , observation_date\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from measure_flags\n    where rn = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(observation_date as date) as evidence_date\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , cast(null as TEXT) as evidence_value\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_cqm236_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:43.029645Z", "completed_at": "2024-10-01T16:35:43.056353Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:43.056353Z", "completed_at": "2024-10-01T16:35:44.951780Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.062950849533081, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f0111e032"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0053_exclusions", "compiled": true, "compiled_code": "\n\nwith\n\ncombined_exclusions as (\n\n  select\n      exclusions.*\n    , denominator.age\n  from dev_thuxuan.quality_measures._int_nqf0053_exclusions_stage_1 as exclusions\n  inner join dev_thuxuan.quality_measures._int_nqf0053_denominator as denominator\n      on exclusions.patient_id = denominator.patient_id\n\n)\n\n, valid_exclusions as (\n\n    select\n        *\n    from combined_exclusions\n    where exclusion_type = 'institutional_snp'\n    and age >= 66\n\n    union all\n\n    select\n        *\n    from combined_exclusions\n    where exclusion_type in\n    (\n        'advanced_illness'\n      , 'dementia'\n    )\n    and age between 66 and 80\n\n    union all\n\n    select\n      *\n    from combined_exclusions\n    where exclusion_type = 'measure specific exclusion for defined window'\n    and age >= 81\n\n    union all\n\n    select\n        *\n    from combined_exclusions\n    where exclusion_type in\n    (\n        'measure specific exclusion for procedure medication'\n      , 'hospice_palliative'\n    )\n\n)\n\n\n, add_data_types as (\n\n    select\n        distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , 1 as exclusion_flag\n    from valid_exclusions\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_flag\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_nqf0053_exclusions"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:44.726910Z", "completed_at": "2024-10-01T16:35:44.736422Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:44.737423Z", "completed_at": "2024-10-01T16:35:45.607944Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1024274826049805, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d6c6"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.dbt_utils_unique_combination_of_columns_chronic_conditions__cms_chronic_conditions_long_patient_id__claim_id__start_date__condition.8088fbf90d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        patient_id, claim_id, start_date, condition\n    from dev_thuxuan.chronic_conditions.cms_chronic_conditions_long\n    group by patient_id, claim_id, start_date, condition\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:45.079811Z", "completed_at": "2024-10-01T16:35:45.086134Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:45.087144Z", "completed_at": "2024-10-01T16:35:45.917564Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.9900543689727783, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f7c5-0001-987f0110be7a"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_claim_id.74242d2abc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect claim_id\nfrom dev_thuxuan.chronic_conditions.cms_chronic_conditions_long\nwhere claim_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:44.280187Z", "completed_at": "2024-10-01T16:35:44.290032Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:44.290032Z", "completed_at": "2024-10-01T16:35:45.982711Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.869316816329956, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f0111e036"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_long", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from dev_thuxuan.quality_measures._int_nqf2372_denominator\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , evidence_date\n        , numerator_flag\n    from dev_thuxuan.quality_measures._int_nqf2372_numerator\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n        , exclusion_flag\n    from dev_thuxuan.quality_measures._int_nqf2372_exclusions\n\n)\n\n, measure_flags as (\n\n    select\n          denominator.patient_id\n        , case\n            when denominator.patient_id is not null\n            then denominator.denominator_flag\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null\n            then numerator.numerator_flag\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null\n            then exclusions.exclusion_flag\n            else null\n          end as exclusion_flag\n        , numerator.evidence_date\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n    from denominator\n        left join numerator\n            on denominator.patient_id = numerator.patient_id\n        left join exclusions\n            on denominator.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, add_rownum as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , row_number() over(\n            partition by\n                  patient_id\n                , performance_period_begin\n                , performance_period_end\n                , measure_id\n                , measure_name\n                order by\n                    case when evidence_date is null then 1 else 0 end,\n                    evidence_date desc\n                  , case when exclusion_date is null then 1 else 0 end,\n                    exclusion_date desc\n          ) as row_num\n    from measure_flags\n\n)\n\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from add_rownum\n    where row_num = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , cast(null as TEXT) as evidence_value\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_nqf2372_long"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:45.833872Z", "completed_at": "2024-10-01T16:35:45.838942Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:45.839900Z", "completed_at": "2024-10-01T16:35:46.588900Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.9206147193908691, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d6ca"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_condition.e794460ae3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect condition\nfrom dev_thuxuan.chronic_conditions.cms_chronic_conditions_long\nwhere condition is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:46.073867Z", "completed_at": "2024-10-01T16:35:46.079385Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:46.079385Z", "completed_at": "2024-10-01T16:35:46.806846Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.8745672702789307, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d6ce"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_patient_id.551c145c85", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom dev_thuxuan.chronic_conditions.cms_chronic_conditions_long\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:43.012871Z", "completed_at": "2024-10-01T16:35:43.044373Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:43.045381Z", "completed_at": "2024-10-01T16:35:46.802845Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.9437763690948486, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d6c2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.readmissions__encounter_augmented", "compiled": true, "compiled_code": "\n\n-- Here we list all encounters from the stg_encounter model\n-- and we augment them with extra fields\n-- that are relevant for readmission measures\nselect\n    aa.encounter_id,\n    aa.patient_id,\n    aa.admit_date,\n    aa.discharge_date,\n    aa.discharge_disposition_code,\n    aa.facility_id,\n    aa.ms_drg_code,\n    aa.paid_amount,\n    datediff(\n        day,\n        aa.admit_date,\n        aa.discharge_date\n        ) as length_of_stay,\n    case\n        when bb.encounter_id is not null then 1\n\t    else 0\n    end as index_admission_flag,\n    case\n        when cc.encounter_id is not null then 1\n\t    else 0\n    end as planned_flag,\n    dd.specialty_cohort,\n    case\n        when aa.discharge_disposition_code = '20' then 1\n\t    else 0\n    end as died_flag,\n    ee.diagnosis_ccs,\n    ee.disqualified_encounter_flag,\n    ee.missing_admit_date_flag,\n    ee.missing_discharge_date_flag,\n    ee.admit_after_discharge_flag,\n    ee.missing_discharge_disposition_code_flag,\n    ee.invalid_discharge_disposition_code_flag,\n    ee.missing_primary_diagnosis_flag,\n    ee.invalid_primary_diagnosis_code_flag,\n    ee.no_diagnosis_ccs_flag,\n    ee.overlaps_with_another_encounter_flag,\n    ee.missing_ms_drg_flag,\n    ee.invalid_ms_drg_flag,\n    '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom\n    dev_thuxuan.readmissions._int_encounter aa\n    left join dev_thuxuan.readmissions._int_index_admission bb\n    on aa.encounter_id = bb.encounter_id\n    left join dev_thuxuan.readmissions._int_planned_encounter cc\n    on aa.encounter_id = cc.encounter_id \n    left join dev_thuxuan.readmissions._int_encounter_specialty_cohort dd\n    on aa.encounter_id = dd.encounter_id\n    left join dev_thuxuan.readmissions._int_encounter_data_quality ee\n    on aa.encounter_id = ee.encounter_id", "relation_name": "dev_thuxuan.readmissions.encounter_augmented"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:42.296422Z", "completed_at": "2024-10-01T16:35:42.322343Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:42.324347Z", "completed_at": "2024-10-01T16:35:47.554772Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 5.395709276199341, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d6ba"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__pqi_num_long", "compiled": true, "compiled_code": "\n\nselect\n    n.data_source\n  , n.patient_id\n  , n.year_number\n  , n.encounter_id\n  , '01' as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_01_num as n\n\nunion all\n\nselect\n    n.data_source\n  , n.patient_id\n  , n.year_number\n  , n.encounter_id\n  , '03' as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_03_num as n\n\nunion all\n\nselect\n    n.data_source\n  , n.patient_id\n  , n.year_number\n  , n.encounter_id\n  , '05' as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_05_num as n\n\nunion all\n\nselect\n    n.data_source\n  , n.patient_id\n  , n.year_number\n  , n.encounter_id\n  , '07' as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_07_num as n\n\nunion all\n\nselect\n    n.data_source\n  , n.patient_id\n  , n.year_number\n  , n.encounter_id\n  , '08' as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_08_num as n\n\nunion all\n\nselect\n    n.data_source\n  , n.patient_id\n  , n.year_number\n  , n.encounter_id\n  , '11' as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_11_num as n\n\nunion all\n\nselect\n    n.data_source\n  , n.patient_id\n  , n.year_number\n  , n.encounter_id\n  , '12' as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_12_num as n\n\nunion all\n\nselect\n    n.data_source\n  , n.patient_id\n  , n.year_number\n  , n.encounter_id\n  , '14' as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_14_num as n\n\nunion all\n\nselect\n    n.data_source\n  , n.patient_id\n  , n.year_number\n  , n.encounter_id\n  , '15' as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_15_num as n\n\nunion all\n\nselect\n    n.data_source\n  , n.patient_id\n  , n.year_number\n  , n.encounter_id\n  , '16' as pqi_number\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures._int_pqi_16_num as n", "relation_name": "dev_thuxuan.ahrq_measures.pqi_num_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:46.154417Z", "completed_at": "2024-10-01T16:35:46.162941Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:46.162941Z", "completed_at": "2024-10-01T16:35:47.583992Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.564526081085205, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d6d2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__patient_risk_scores", "compiled": true, "compiled_code": "\nwith seed_adjustment_rates as (\n\n    select\n          model_version\n        , payment_year\n        , normalization_factor\n        , ma_coding_pattern_adjustment\n    from dev_thuxuan.cms_hcc._value_set_adjustment_rates\n\n)\n\n, risk_factors as (\n\n    select\n          patient_id\n        , coefficient\n        , model_version\n        , payment_year\n    from dev_thuxuan.cms_hcc.patient_risk_factors\n\n)\n\n, member_months as (\n\n    select\n        patient_id\n        , cast(\n  substr(year_month, 1, 4)\n as integer) as eligible_year\n        , COUNT(1) as member_months\n    from  dev_thuxuan.cms_hcc._stg_member_months\n    group by\n        patient_id\n        , cast(\n  substr(year_month, 1, 4)\n as integer)\n)\n\n, raw_score as (\n\n    select\n          patient_id\n        , sum(coefficient) as risk_score\n        , model_version\n        , payment_year\n    from risk_factors\n    group by\n          patient_id\n        , model_version\n        , payment_year\n\n)\n\n/*\n    CMS Guidance for the transition from v24 to v28:\n\n    PY2024 risk scores will be blended using 67% of the risk score calculated\n    from v24 and 33% from v28.\n\n    PY2025 risk scores will be blended using 33% of the risk score calculated\n    from v24 and 67% from v28.\n\n    PY2026 risk scores will be 100% from v28.\n\n    Prior payment years will still be calculated from v24 only.\n*/\n, transition_scores as (\n\n    select\n          patient_id\n        , risk_score\n        , case\n            when payment_year <= 2023 and model_version = 'CMS-HCC-V24' then risk_score\n            when payment_year = 2024 and model_version = 'CMS-HCC-V24' then risk_score * 0.67\n            when payment_year = 2025 and model_version = 'CMS-HCC-V24' then risk_score * 0.33\n            when payment_year >= 2026 and model_version = 'CMS-HCC-V24' then 0\n            end as v24_risk_score\n        , case\n            when payment_year <= 2023 and model_version = 'CMS-HCC-V28' then 0\n            when payment_year = 2024 and model_version = 'CMS-HCC-V28' then risk_score * 0.33\n            when payment_year = 2025 and model_version = 'CMS-HCC-V28' then risk_score * 0.67\n            when payment_year >= 2026 and model_version = 'CMS-HCC-V28' then risk_score\n            end as v28_risk_score\n        , model_version\n        , payment_year\n    from raw_score\n\n)\n\n/*\n    Grouping by patient to create a single row per patient.\n*/\n, transition_scores_grouped as (\n\n    select\n          patient_id\n        , max(v24_risk_score) as v24_risk_score\n        , max(v28_risk_score) as v28_risk_score\n        , payment_year\n    from transition_scores\n    group by\n          patient_id\n        , payment_year\n\n)\n\n, blended as (\n\n    select\n          patient_id\n        , v24_risk_score\n        , v28_risk_score\n        , v24_risk_score + v28_risk_score as blended_risk_score\n        , payment_year\n    from transition_scores_grouped\n\n)\n\n, normalized as (\n\n    select\n          blended.patient_id\n        , blended.v24_risk_score\n        , blended.v28_risk_score\n        , blended.blended_risk_score\n        , blended.blended_risk_score / seed_adjustment_rates.normalization_factor as normalized_risk_score\n        , blended.payment_year\n    from blended\n        left join seed_adjustment_rates\n            on blended.payment_year = seed_adjustment_rates.payment_year\n\n)\n\n, payment as (\n\n    select\n          normalized.patient_id\n        , normalized.v24_risk_score\n        , normalized.v28_risk_score\n        , normalized.blended_risk_score\n        , normalized.normalized_risk_score\n        , normalized.normalized_risk_score * (1 - seed_adjustment_rates.ma_coding_pattern_adjustment) as payment_risk_score\n        , normalized.payment_year\n    from normalized\n        left join seed_adjustment_rates\n            on normalized.payment_year = seed_adjustment_rates.payment_year\n\n)\n\n, weighted_score as (\n\n    select\n        payment.patient_id\n        , payment.v24_risk_score\n        , payment.v28_risk_score\n        , payment.blended_risk_score\n        , payment.normalized_risk_score\n        , payment.payment_risk_score\n        , member_months.member_months\n        , payment.payment_risk_score * member_months.member_months as payment_risk_score_weighted_by_months\n        , payment.payment_year\n    from payment\n    left join member_months\n            on payment.patient_id = member_months.patient_id\n            and payment.payment_year = member_months.eligible_year\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , round(cast(v24_risk_score as numeric(28,6)),3) as v24_risk_score\n        , round(cast(v28_risk_score as numeric(28,6)),3) as v28_risk_score\n        , round(cast(blended_risk_score as numeric(28,6)),3) as blended_risk_score\n        , round(cast(normalized_risk_score as numeric(28,6)),3) as normalized_risk_score\n        , round(cast(payment_risk_score as numeric(28,6)),3) as payment_risk_score\n        , round(cast(payment_risk_score_weighted_by_months as numeric(28,6)),3) as payment_risk_score_weighted_by_months\n        , cast(member_months as integer) as member_months\n        , cast(payment_year as integer) as payment_year\n    from weighted_score\n\n)\n\nselect\n      patient_id\n    , v24_risk_score\n    , v28_risk_score\n    , blended_risk_score\n    , normalized_risk_score\n    , payment_risk_score\n    , payment_risk_score_weighted_by_months\n    , member_months\n    , payment_year\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.cms_hcc.patient_risk_scores"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:46.759512Z", "completed_at": "2024-10-01T16:35:46.765308Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:46.765308Z", "completed_at": "2024-10-01T16:35:47.898508Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.2730145454406738, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f0111e03a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.mart_review__patient_risk_factors", "compiled": true, "compiled_code": "\n\nselect *\n,dense_rank() over (order by patient_id, model_version, payment_year ) as patient_risk_sk\nfrom dev_thuxuan.cms_hcc.patient_risk_factors p", "relation_name": "dev_thuxuan.data_quality.mart_review__patient_risk_factors"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:46.955355Z", "completed_at": "2024-10-01T16:35:46.964092Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:46.965106Z", "completed_at": "2024-10-01T16:35:48.271521Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.4496099948883057, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d6d6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0053_long", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from dev_thuxuan.quality_measures._int_nqf0053_denominator\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , evidence_date\n        , evidence_value\n    from dev_thuxuan.quality_measures._int_nqf0053_numerator\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_thuxuan.quality_measures._int_nqf0053_exclusions\n\n)\n\n, measure_flags as (\n\n    select\n          denominator.patient_id\n        , case\n            when denominator.patient_id is not null\n            then 1\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as exclusion_flag\n        , numerator.evidence_date\n        , numerator.evidence_value\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , (row_number() over(\n            partition by\n                  denominator.patient_id\n                , denominator.performance_period_begin\n                , denominator.performance_period_end\n                , denominator.measure_id\n                , denominator.measure_name\n              order by\n                  case when numerator.evidence_date is null then 1 else 0 end,\n                  numerator.evidence_date desc\n                , case when exclusions.exclusion_date is null then 1 else 0 end,\n                  exclusions.exclusion_date desc\n          )) as rn\n    from denominator\n        left join numerator\n            on denominator.patient_id = numerator.patient_id\n        left join exclusions\n            on denominator.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , evidence_value\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from measure_flags\n    where rn = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , evidence_value\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures._int_nqf0053_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:46.971093Z", "completed_at": "2024-10-01T16:35:47.755960Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:47.756960Z", "completed_at": "2024-10-01T16:35:49.018435Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.173837900161743, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f7c5-0001-987f0110be7e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_wide", "compiled": true, "compiled_code": "\n\nwith chronic_conditions as (\n\n    select distinct\n          condition\n        , condition_column_name\n    from dev_thuxuan.chronic_conditions._value_set_cms_chronic_conditions_hierarchy\n\n)\n\n, conditions as (\n\n    select\n          chronic_conditions_unioned.patient_id\n        , chronic_conditions.condition_column_name\n        , 1 as condition_count\n    from dev_thuxuan.chronic_conditions.cms_chronic_conditions_long as chronic_conditions_unioned\n         inner join chronic_conditions as chronic_conditions\n             on chronic_conditions_unioned.condition = chronic_conditions.condition\n\n)\n\nselect\n      p.patient_id\n    , \n  \n    max(\n      \n      case\n      when condition_column_name = 'acute_myocardial_infarction'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as acute_myocardial_infarction\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'adhd_conduct_disorders_and_hyperkinetic_syndrome'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as adhd_conduct_disorders_and_hyperkinetic_syndrome\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'alcohol_use_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as alcohol_use_disorders\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'alzheimers_disease'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as alzheimers_disease\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'anemia'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as anemia\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'anxiety_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as anxiety_disorders\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'asthma'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as asthma\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'atrial_fibrillation_and_flutter'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as atrial_fibrillation_and_flutter\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'autism_spectrum_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as autism_spectrum_disorders\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'benign_prostatic_hyperplasia'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as benign_prostatic_hyperplasia\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'bipolar_disorder'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as bipolar_disorder\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cancer_breast'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as cancer_breast\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cancer_colorectal'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as cancer_colorectal\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cancer_endometrial'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as cancer_endometrial\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cancer_lung'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as cancer_lung\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cancer_prostate'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as cancer_prostate\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cancer_urologic_kidney_renal_pelvis_and_ureter'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as cancer_urologic_kidney_renal_pelvis_and_ureter\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cataract'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as cataract\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cerebral_palsy'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as cerebral_palsy\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'chronic_kidney_disease'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as chronic_kidney_disease\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'chronic_obstructive_pulmonary_disease'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as chronic_obstructive_pulmonary_disease\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cystic_fibrosis_and_other_metabolic_developmental_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as cystic_fibrosis_and_other_metabolic_developmental_disorders\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'depression_bipolar_or_other_depressive_mood_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as depression_bipolar_or_other_depressive_mood_disorders\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'depressive_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as depressive_disorders\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'diabetes'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as diabetes\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'drug_use_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as drug_use_disorders\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'epilepsy'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as epilepsy\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'fibromyalgia_and_chronic_pain_and_fatigue'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as fibromyalgia_and_chronic_pain_and_fatigue\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'glaucoma'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as glaucoma\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'heart_failure_and_non_ischemic_heart_disease'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as heart_failure_and_non_ischemic_heart_disease\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_a'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hepatitis_a\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_b_acute_or_unspecified'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hepatitis_b_acute_or_unspecified\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_b_chronic'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hepatitis_b_chronic\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_c_acute'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hepatitis_c_acute\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_c_chronic'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hepatitis_c_chronic\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_c_unspecified'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hepatitis_c_unspecified\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_d'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hepatitis_d\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_e'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hepatitis_e\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hip_pelvic_fracture'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hip_pelvic_fracture\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hyperlipidemia'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hyperlipidemia\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hypertension'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hypertension\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hypothyroidism'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hypothyroidism\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'intellectual_disabilities_and_related_conditions'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as intellectual_disabilities_and_related_conditions\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'ischemic_heart_disease'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as ischemic_heart_disease\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'learning_disabilities'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as learning_disabilities\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'leukemias_and_lymphomas'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as leukemias_and_lymphomas\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'migraine_and_chronic_headache'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as migraine_and_chronic_headache\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'mobility_impairments'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as mobility_impairments\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'multiple_sclerosis_and_transverse_myelitis'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as multiple_sclerosis_and_transverse_myelitis\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'muscular_dystrophy'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as muscular_dystrophy\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'non_alzheimers_dementia'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as non_alzheimers_dementia\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'obesity'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as obesity\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'opioid_use_disorder_oud'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as opioid_use_disorder_oud\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'osteoporosis_with_or_without_pathological_fracture'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as osteoporosis_with_or_without_pathological_fracture\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'other_developmental_delays'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as other_developmental_delays\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'parkinsons_disease_and_secondary_parkinsonism'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as parkinsons_disease_and_secondary_parkinsonism\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'peripheral_vascular_disease_pvd'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as peripheral_vascular_disease_pvd\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'personality_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as personality_disorders\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'pneumonia_all_cause'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as pneumonia_all_cause\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'post_traumatic_stress_disorder_ptsd'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as post_traumatic_stress_disorder_ptsd\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'pressure_and_chronic_ulcers'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as pressure_and_chronic_ulcers\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'rheumatoid_arthritis_osteoarthritis'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as rheumatoid_arthritis_osteoarthritis\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'schizophrenia'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as schizophrenia\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'schizophrenia_and_other_psychotic_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as schizophrenia_and_other_psychotic_disorders\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'sensory_blindness_and_visual_impairment'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as sensory_blindness_and_visual_impairment\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'sensory_deafness_and_hearing_impairment'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as sensory_deafness_and_hearing_impairment\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'sickle_cell_disease'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as sickle_cell_disease\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'spina_bifida_and_other_congenital_anomalies_of_the_nervous_system'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as spina_bifida_and_other_congenital_anomalies_of_the_nervous_system\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'spinal_cord_injury'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as spinal_cord_injury\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'stroke_transient_ischemic_attack'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as stroke_transient_ischemic_attack\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'tobacco_use'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as tobacco_use\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'viral_hepatitis_general'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as viral_hepatitis_general\n      \n    \n    \n  \n\n      , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.test.cms_chronic_conditions__stg_core__patient p\n     left join conditions\n        on p.patient_id = conditions.patient_id\ngroup by\n    p.patient_id", "relation_name": "dev_thuxuan.chronic_conditions.cms_chronic_conditions_wide"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:47.693471Z", "completed_at": "2024-10-01T16:35:47.700071Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:47.700071Z", "completed_at": "2024-10-01T16:35:49.002399Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.513878345489502, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f0111e03e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.readmissions__readmission_summary", "compiled": true, "compiled_code": "\n\n-- Here calculate days to readmission for encounters\n-- that had a readmission and create readmission flags\n\n\n-- We create the encounter_sequence integer count\n-- which keeps track of what number of encounter each\n-- encounter is for a given patient\nwith encounter_sequence as (\nselect\n    *,\n    row_number() over(\n        partition by patient_id order by admit_date, discharge_date\n    ) as encounter_seq\nfrom dev_thuxuan.readmissions.encounter_augmented\nwhere disqualified_encounter_flag = 0\n),\n\n\nreadmission_calc as (\nselect\n    aa.encounter_id,\n    aa.patient_id,\n    aa.admit_date,\n    aa.discharge_date,\n    aa.discharge_disposition_code,\n    aa.facility_id,\n    aa.ms_drg_code,\n    aa.paid_amount,\n    aa.length_of_stay,\n    aa.index_admission_flag,\n    aa.planned_flag,\n    aa.specialty_cohort,\n    aa.died_flag,\n    aa.diagnosis_ccs,\n    case\n        when bb.encounter_id is not null then 1\n\t    else 0\n    end as had_readmission_flag,\n    datediff(\n        day,\n        aa.discharge_date,\n        bb.admit_date\n        ) as days_to_readmit,\n    case\n        when (datediff(\n        day,\n        aa.discharge_date,\n        bb.admit_date\n        )) <= 30  then 1\n\t    else 0\n    end as readmit_30_flag,\n    case\n        when\n\t    ((datediff(\n        day,\n        aa.discharge_date,\n        bb.admit_date\n        )) <= 30) and (bb.planned_flag = 0) then 1\n\t    else 0\n    end as unplanned_readmit_30_flag,\n    bb.encounter_id as readmission_encounter_id,\n    bb.admit_date as readmission_admit_date,\n    bb.discharge_date as readmission_discharge_date,\n    bb.discharge_disposition_code as readmission_discharge_disposition_code,\n    bb.facility_id as readmission_facility,\n    bb.ms_drg_code as readmission_ms_drg,\n    bb.length_of_stay as readmission_length_of_stay,\n    bb.index_admission_flag as readmission_index_admission_flag,\n    bb.planned_flag as readmission_planned_flag,\n    bb.specialty_cohort as readmission_specialty_cohort,\n    bb.died_flag as readmission_died_flag,\n    bb.diagnosis_ccs as readmission_diagnosis_ccs,\n    '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom\n    encounter_sequence aa\n    left join encounter_sequence bb\n    on aa.patient_id = bb.patient_id\n    and aa.encounter_seq + 1 = bb.encounter_seq\n)\n\nselect *\nfrom readmission_calc", "relation_name": "dev_thuxuan.readmissions.readmission_summary"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:47.722854Z", "completed_at": "2024-10-01T16:35:47.728397Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:47.728397Z", "completed_at": "2024-10-01T16:35:49.116626Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.5217630863189697, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f0111e042"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__pqi_rate", "compiled": true, "compiled_code": "\n\nwith num as (\n    select\n        data_source\n      , year_number\n      , pqi_number\n      , count(encounter_id) as num_count\n    from dev_thuxuan.ahrq_measures.pqi_num_long\n    group by\n        data_source\n      , year_number\n      , pqi_number\n)\n\n, denom as (\n    select\n        data_source\n      , year_number\n      , pqi_number\n      , count(patient_id) as denom_count\n    from dev_thuxuan.ahrq_measures.pqi_denom_long as d\n    group by\n        data_source\n      , year_number\n      , pqi_number\n)\n\nselect\n    d.data_source\n  , d.year_number\n  , d.pqi_number\n  , d.denom_count\n  , coalesce(num.num_count, 0) as num_count\n  , coalesce(num.num_count, 0) / d.denom_count * 100000 as rate_per_100_thousand\n  , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom denom as d\nleft join num\n    on d.pqi_number = num.pqi_number\n    and d.year_number = num.year_number\n    and d.data_source = num.data_source", "relation_name": "dev_thuxuan.ahrq_measures.pqi_rate"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:48.408972Z", "completed_at": "2024-10-01T16:35:48.413952Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:48.414914Z", "completed_at": "2024-10-01T16:35:49.172339Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.9491226673126221, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f0111e046"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.unique_cms_hcc__patient_risk_scores_patient_id.05b154e126", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    patient_id as unique_field,\n    count(*) as n_records\n\nfrom dev_thuxuan.cms_hcc.patient_risk_scores\nwhere patient_id is not null\ngroup by patient_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:48.037499Z", "completed_at": "2024-10-01T16:35:48.043503Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:48.043503Z", "completed_at": "2024-10-01T16:35:49.416206Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.5336565971374512, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d6da"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__pqi_summary", "compiled": true, "compiled_code": "\n\nselect p.pqi_number\n , m.pqi_name\n , e.year_number\n , e.encounter_id\n , e.data_source\n , e.patient_id\n , e.facility_id\n , e.ms_drg_code\n , e.ms_drg_description\n , e.encounter_start_date\n , e.encounter_end_date\n , e.length_of_stay\n , e.paid_amount\n , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom dev_thuxuan.ahrq_measures.pqi_num_long p \ninner join dev_thuxuan.ahrq_measures._stg_pqi_inpatient_encounter e\n    on p.encounter_id = e.encounter_id\n    and p.data_source = e.data_source\ninner join dev_thuxuan.ahrq_measures._value_set_pqi_measures m on cast(p.pqi_number as TEXT)  = m.pqi_number", "relation_name": "dev_thuxuan.ahrq_measures.pqi_summary"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:49.248699Z", "completed_at": "2024-10-01T16:35:49.252798Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:49.252798Z", "completed_at": "2024-10-01T16:35:50.257323Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.1939105987548828, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f0111e04a"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_wide_patient_id.5c2c8ae105", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom dev_thuxuan.chronic_conditions.cms_chronic_conditions_wide\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:49.362096Z", "completed_at": "2024-10-01T16:35:49.369274Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:49.369274Z", "completed_at": "2024-10-01T16:35:50.279925Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.0852596759796143, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f7c5-0001-987f0110be82"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.unique_chronic_conditions__cms_chronic_conditions_wide_patient_id.60c2d9a586", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    patient_id as unique_field,\n    count(*) as n_records\n\nfrom dev_thuxuan.chronic_conditions.cms_chronic_conditions_wide\nwhere patient_id is not null\ngroup by patient_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:49.150038Z", "completed_at": "2024-10-01T16:35:49.155093Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:49.156040Z", "completed_at": "2024-10-01T16:35:50.621312Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.7060019969940186, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f912-0001-987f0111b6ae"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.mart_review__patient_risk", "compiled": true, "compiled_code": "\n\n\nWITH cte AS (\n    SELECT \n        payment_year,\n        patient_id,\n        model_version,\n        patient_risk_sk,\n        SUM(coefficient) AS risk_score\n    FROM dev_thuxuan.data_quality.mart_review__patient_risk_factors\n    GROUP BY payment_year,\n             patient_id,\n             model_version,\n             patient_risk_sk\n)\n\nSELECT \n    CASE \n        WHEN risk_score <= 0.5 THEN '.5'\n        WHEN risk_score BETWEEN 0.5 AND 1.0 THEN '1'\n        WHEN risk_score BETWEEN 1.0 AND 1.5 THEN '1.5'\n        WHEN risk_score BETWEEN 1.5 AND 2.0 THEN '2'\n        WHEN risk_score BETWEEN 2.0 AND 2.5 THEN '2.5'\n        WHEN risk_score BETWEEN 2.5 AND 3.0 THEN '3'\n        WHEN risk_score BETWEEN 3.0 AND 3.5 THEN '3.5'\n        WHEN risk_score BETWEEN 3.5 AND 4.0 THEN '4'\n        WHEN risk_score BETWEEN 4.0 AND 4.5 THEN '4.5'\n        WHEN risk_score BETWEEN 4.5 AND 5.0 THEN '5'\n        WHEN risk_score > 5.0 THEN '5+'\n        ELSE null \n        END AS risk_score_bucket,\n        payment_year,\n        patient_id,\n        model_version,\n        patient_risk_sk,\n        risk_score\n        , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nFROM cte", "relation_name": "dev_thuxuan.data_quality.mart_review__patient_risk"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:49.576246Z", "completed_at": "2024-10-01T16:35:49.581830Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:49.582830Z", "completed_at": "2024-10-01T16:35:51.067357Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.6389896869659424, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f7c5-0001-987f0110be8a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.mart_review__readmissions", "compiled": true, "compiled_code": "\n\nSELECT *\nFROM dev_thuxuan.readmissions.readmission_summary\nWHERE index_admission_flag = 1", "relation_name": "dev_thuxuan.data_quality.mart_review__readmissions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:50.450574Z", "completed_at": "2024-10-01T16:35:50.454591Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:50.454591Z", "completed_at": "2024-10-01T16:35:51.735232Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.4546775817871094, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f8ce-0001-987f0111d6ea"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.mart_review__patient_risk_scores", "compiled": true, "compiled_code": "\n\n\nselect *\nfrom dev_thuxuan.cms_hcc.patient_risk_scores p", "relation_name": "dev_thuxuan.data_quality.mart_review__patient_risk_scores"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:49.211857Z", "completed_at": "2024-10-01T16:35:51.417133Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:51.417133Z", "completed_at": "2024-10-01T16:35:53.026486Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 4.085942268371582, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f7c5-0001-987f0110be96"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__summary_long", "compiled": true, "compiled_code": "\n\n/* measures should already be at the full eligibility population grain */\nwith union_measures as (\n\n    \n    \n\n        (\n            select\n                cast('dev_thuxuan.quality_measures._int_nqf2372_long' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"PATIENT_ID\" as character varying(16777216)) as \"PATIENT_ID\" ,\n                    cast(\"DENOMINATOR_FLAG\" as NUMBER(38,0)) as \"DENOMINATOR_FLAG\" ,\n                    cast(\"NUMERATOR_FLAG\" as NUMBER(38,0)) as \"NUMERATOR_FLAG\" ,\n                    cast(\"EXCLUSION_FLAG\" as NUMBER(38,0)) as \"EXCLUSION_FLAG\" ,\n                    cast(\"EVIDENCE_DATE\" as DATE) as \"EVIDENCE_DATE\" ,\n                    cast(\"EVIDENCE_VALUE\" as character varying(16777216)) as \"EVIDENCE_VALUE\" ,\n                    cast(\"EXCLUSION_DATE\" as DATE) as \"EXCLUSION_DATE\" ,\n                    cast(\"EXCLUSION_REASON\" as character varying(16777216)) as \"EXCLUSION_REASON\" ,\n                    cast(\"PERFORMANCE_PERIOD_BEGIN\" as DATE) as \"PERFORMANCE_PERIOD_BEGIN\" ,\n                    cast(\"PERFORMANCE_PERIOD_END\" as DATE) as \"PERFORMANCE_PERIOD_END\" ,\n                    cast(\"MEASURE_ID\" as character varying(16777216)) as \"MEASURE_ID\" ,\n                    cast(\"MEASURE_NAME\" as character varying(16777216)) as \"MEASURE_NAME\" ,\n                    cast(\"MEASURE_VERSION\" as character varying(16777216)) as \"MEASURE_VERSION\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_thuxuan.quality_measures._int_nqf2372_long\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_thuxuan.quality_measures._int_nqf0034_long' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"PATIENT_ID\" as character varying(16777216)) as \"PATIENT_ID\" ,\n                    cast(\"DENOMINATOR_FLAG\" as NUMBER(38,0)) as \"DENOMINATOR_FLAG\" ,\n                    cast(\"NUMERATOR_FLAG\" as NUMBER(38,0)) as \"NUMERATOR_FLAG\" ,\n                    cast(\"EXCLUSION_FLAG\" as NUMBER(38,0)) as \"EXCLUSION_FLAG\" ,\n                    cast(\"EVIDENCE_DATE\" as DATE) as \"EVIDENCE_DATE\" ,\n                    cast(\"EVIDENCE_VALUE\" as character varying(16777216)) as \"EVIDENCE_VALUE\" ,\n                    cast(\"EXCLUSION_DATE\" as DATE) as \"EXCLUSION_DATE\" ,\n                    cast(\"EXCLUSION_REASON\" as character varying(16777216)) as \"EXCLUSION_REASON\" ,\n                    cast(\"PERFORMANCE_PERIOD_BEGIN\" as DATE) as \"PERFORMANCE_PERIOD_BEGIN\" ,\n                    cast(\"PERFORMANCE_PERIOD_END\" as DATE) as \"PERFORMANCE_PERIOD_END\" ,\n                    cast(\"MEASURE_ID\" as character varying(16777216)) as \"MEASURE_ID\" ,\n                    cast(\"MEASURE_NAME\" as character varying(16777216)) as \"MEASURE_NAME\" ,\n                    cast(\"MEASURE_VERSION\" as character varying(16777216)) as \"MEASURE_VERSION\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_thuxuan.quality_measures._int_nqf0034_long\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_thuxuan.quality_measures._int_nqf0059_long' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"PATIENT_ID\" as character varying(16777216)) as \"PATIENT_ID\" ,\n                    cast(\"DENOMINATOR_FLAG\" as NUMBER(38,0)) as \"DENOMINATOR_FLAG\" ,\n                    cast(\"NUMERATOR_FLAG\" as NUMBER(38,0)) as \"NUMERATOR_FLAG\" ,\n                    cast(\"EXCLUSION_FLAG\" as NUMBER(38,0)) as \"EXCLUSION_FLAG\" ,\n                    cast(\"EVIDENCE_DATE\" as DATE) as \"EVIDENCE_DATE\" ,\n                    cast(\"EVIDENCE_VALUE\" as character varying(16777216)) as \"EVIDENCE_VALUE\" ,\n                    cast(\"EXCLUSION_DATE\" as DATE) as \"EXCLUSION_DATE\" ,\n                    cast(\"EXCLUSION_REASON\" as character varying(16777216)) as \"EXCLUSION_REASON\" ,\n                    cast(\"PERFORMANCE_PERIOD_BEGIN\" as DATE) as \"PERFORMANCE_PERIOD_BEGIN\" ,\n                    cast(\"PERFORMANCE_PERIOD_END\" as DATE) as \"PERFORMANCE_PERIOD_END\" ,\n                    cast(\"MEASURE_ID\" as character varying(16777216)) as \"MEASURE_ID\" ,\n                    cast(\"MEASURE_NAME\" as character varying(16777216)) as \"MEASURE_NAME\" ,\n                    cast(\"MEASURE_VERSION\" as character varying(16777216)) as \"MEASURE_VERSION\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_thuxuan.quality_measures._int_nqf0059_long\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_thuxuan.quality_measures._int_cqm236_long' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"PATIENT_ID\" as character varying(16777216)) as \"PATIENT_ID\" ,\n                    cast(\"DENOMINATOR_FLAG\" as NUMBER(38,0)) as \"DENOMINATOR_FLAG\" ,\n                    cast(\"NUMERATOR_FLAG\" as NUMBER(38,0)) as \"NUMERATOR_FLAG\" ,\n                    cast(\"EXCLUSION_FLAG\" as NUMBER(38,0)) as \"EXCLUSION_FLAG\" ,\n                    cast(\"EVIDENCE_DATE\" as DATE) as \"EVIDENCE_DATE\" ,\n                    cast(\"EVIDENCE_VALUE\" as character varying(16777216)) as \"EVIDENCE_VALUE\" ,\n                    cast(\"EXCLUSION_DATE\" as DATE) as \"EXCLUSION_DATE\" ,\n                    cast(\"EXCLUSION_REASON\" as character varying(16777216)) as \"EXCLUSION_REASON\" ,\n                    cast(\"PERFORMANCE_PERIOD_BEGIN\" as DATE) as \"PERFORMANCE_PERIOD_BEGIN\" ,\n                    cast(\"PERFORMANCE_PERIOD_END\" as DATE) as \"PERFORMANCE_PERIOD_END\" ,\n                    cast(\"MEASURE_ID\" as character varying(16777216)) as \"MEASURE_ID\" ,\n                    cast(\"MEASURE_NAME\" as character varying(16777216)) as \"MEASURE_NAME\" ,\n                    cast(\"MEASURE_VERSION\" as character varying(16777216)) as \"MEASURE_VERSION\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_thuxuan.quality_measures._int_cqm236_long\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_thuxuan.quality_measures._int_nqf0053_long' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"PATIENT_ID\" as character varying(16777216)) as \"PATIENT_ID\" ,\n                    cast(\"DENOMINATOR_FLAG\" as NUMBER(38,0)) as \"DENOMINATOR_FLAG\" ,\n                    cast(\"NUMERATOR_FLAG\" as NUMBER(38,0)) as \"NUMERATOR_FLAG\" ,\n                    cast(\"EXCLUSION_FLAG\" as NUMBER(38,0)) as \"EXCLUSION_FLAG\" ,\n                    cast(\"EVIDENCE_DATE\" as DATE) as \"EVIDENCE_DATE\" ,\n                    cast(\"EVIDENCE_VALUE\" as character varying(16777216)) as \"EVIDENCE_VALUE\" ,\n                    cast(\"EXCLUSION_DATE\" as DATE) as \"EXCLUSION_DATE\" ,\n                    cast(\"EXCLUSION_REASON\" as character varying(16777216)) as \"EXCLUSION_REASON\" ,\n                    cast(\"PERFORMANCE_PERIOD_BEGIN\" as DATE) as \"PERFORMANCE_PERIOD_BEGIN\" ,\n                    cast(\"PERFORMANCE_PERIOD_END\" as DATE) as \"PERFORMANCE_PERIOD_END\" ,\n                    cast(\"MEASURE_ID\" as character varying(16777216)) as \"MEASURE_ID\" ,\n                    cast(\"MEASURE_NAME\" as character varying(16777216)) as \"MEASURE_NAME\" ,\n                    cast(\"MEASURE_VERSION\" as character varying(16777216)) as \"MEASURE_VERSION\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_thuxuan.quality_measures._int_nqf0053_long\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_thuxuan.quality_measures._int_cbe0055_long' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"PATIENT_ID\" as character varying(16777216)) as \"PATIENT_ID\" ,\n                    cast(\"DENOMINATOR_FLAG\" as NUMBER(38,0)) as \"DENOMINATOR_FLAG\" ,\n                    cast(\"NUMERATOR_FLAG\" as NUMBER(38,0)) as \"NUMERATOR_FLAG\" ,\n                    cast(\"EXCLUSION_FLAG\" as NUMBER(38,0)) as \"EXCLUSION_FLAG\" ,\n                    cast(\"EVIDENCE_DATE\" as DATE) as \"EVIDENCE_DATE\" ,\n                    cast(\"EVIDENCE_VALUE\" as character varying(16777216)) as \"EVIDENCE_VALUE\" ,\n                    cast(\"EXCLUSION_DATE\" as DATE) as \"EXCLUSION_DATE\" ,\n                    cast(\"EXCLUSION_REASON\" as character varying(16777216)) as \"EXCLUSION_REASON\" ,\n                    cast(\"PERFORMANCE_PERIOD_BEGIN\" as DATE) as \"PERFORMANCE_PERIOD_BEGIN\" ,\n                    cast(\"PERFORMANCE_PERIOD_END\" as DATE) as \"PERFORMANCE_PERIOD_END\" ,\n                    cast(\"MEASURE_ID\" as character varying(16777216)) as \"MEASURE_ID\" ,\n                    cast(\"MEASURE_NAME\" as character varying(16777216)) as \"MEASURE_NAME\" ,\n                    cast(\"MEASURE_VERSION\" as character varying(16777216)) as \"MEASURE_VERSION\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_thuxuan.quality_measures._int_cbe0055_long\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_thuxuan.quality_measures._int_nqf0097_long' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"PATIENT_ID\" as character varying(16777216)) as \"PATIENT_ID\" ,\n                    cast(\"DENOMINATOR_FLAG\" as NUMBER(38,0)) as \"DENOMINATOR_FLAG\" ,\n                    cast(\"NUMERATOR_FLAG\" as NUMBER(38,0)) as \"NUMERATOR_FLAG\" ,\n                    cast(\"EXCLUSION_FLAG\" as NUMBER(38,0)) as \"EXCLUSION_FLAG\" ,\n                    cast(\"EVIDENCE_DATE\" as DATE) as \"EVIDENCE_DATE\" ,\n                    cast(\"EVIDENCE_VALUE\" as character varying(16777216)) as \"EVIDENCE_VALUE\" ,\n                    cast(\"EXCLUSION_DATE\" as DATE) as \"EXCLUSION_DATE\" ,\n                    cast(\"EXCLUSION_REASON\" as character varying(16777216)) as \"EXCLUSION_REASON\" ,\n                    cast(\"PERFORMANCE_PERIOD_BEGIN\" as DATE) as \"PERFORMANCE_PERIOD_BEGIN\" ,\n                    cast(\"PERFORMANCE_PERIOD_END\" as DATE) as \"PERFORMANCE_PERIOD_END\" ,\n                    cast(\"MEASURE_ID\" as character varying(16777216)) as \"MEASURE_ID\" ,\n                    cast(\"MEASURE_NAME\" as character varying(16777216)) as \"MEASURE_NAME\" ,\n                    cast(\"MEASURE_VERSION\" as character varying(16777216)) as \"MEASURE_VERSION\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_thuxuan.quality_measures._int_nqf0097_long\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_thuxuan.quality_measures._int_cqm438_long' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"PATIENT_ID\" as character varying(16777216)) as \"PATIENT_ID\" ,\n                    cast(\"DENOMINATOR_FLAG\" as NUMBER(38,0)) as \"DENOMINATOR_FLAG\" ,\n                    cast(\"NUMERATOR_FLAG\" as NUMBER(38,0)) as \"NUMERATOR_FLAG\" ,\n                    cast(\"EXCLUSION_FLAG\" as NUMBER(38,0)) as \"EXCLUSION_FLAG\" ,\n                    cast(\"EVIDENCE_DATE\" as DATE) as \"EVIDENCE_DATE\" ,\n                    cast(\"EVIDENCE_VALUE\" as character varying(16777216)) as \"EVIDENCE_VALUE\" ,\n                    cast(\"EXCLUSION_DATE\" as DATE) as \"EXCLUSION_DATE\" ,\n                    cast(\"EXCLUSION_REASON\" as character varying(16777216)) as \"EXCLUSION_REASON\" ,\n                    cast(\"PERFORMANCE_PERIOD_BEGIN\" as DATE) as \"PERFORMANCE_PERIOD_BEGIN\" ,\n                    cast(\"PERFORMANCE_PERIOD_END\" as DATE) as \"PERFORMANCE_PERIOD_END\" ,\n                    cast(\"MEASURE_ID\" as character varying(16777216)) as \"MEASURE_ID\" ,\n                    cast(\"MEASURE_NAME\" as character varying(16777216)) as \"MEASURE_NAME\" ,\n                    cast(\"MEASURE_VERSION\" as character varying(16777216)) as \"MEASURE_VERSION\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_thuxuan.quality_measures._int_cqm438_long\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_thuxuan.quality_measures._int_nqf0041_long' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"PATIENT_ID\" as character varying(16777216)) as \"PATIENT_ID\" ,\n                    cast(\"DENOMINATOR_FLAG\" as NUMBER(38,0)) as \"DENOMINATOR_FLAG\" ,\n                    cast(\"NUMERATOR_FLAG\" as NUMBER(38,0)) as \"NUMERATOR_FLAG\" ,\n                    cast(\"EXCLUSION_FLAG\" as NUMBER(38,0)) as \"EXCLUSION_FLAG\" ,\n                    cast(\"EVIDENCE_DATE\" as DATE) as \"EVIDENCE_DATE\" ,\n                    cast(\"EVIDENCE_VALUE\" as character varying(16777216)) as \"EVIDENCE_VALUE\" ,\n                    cast(\"EXCLUSION_DATE\" as DATE) as \"EXCLUSION_DATE\" ,\n                    cast(\"EXCLUSION_REASON\" as character varying(16777216)) as \"EXCLUSION_REASON\" ,\n                    cast(\"PERFORMANCE_PERIOD_BEGIN\" as DATE) as \"PERFORMANCE_PERIOD_BEGIN\" ,\n                    cast(\"PERFORMANCE_PERIOD_END\" as DATE) as \"PERFORMANCE_PERIOD_END\" ,\n                    cast(\"MEASURE_ID\" as character varying(16777216)) as \"MEASURE_ID\" ,\n                    cast(\"MEASURE_NAME\" as character varying(16777216)) as \"MEASURE_NAME\" ,\n                    cast(\"MEASURE_VERSION\" as character varying(16777216)) as \"MEASURE_VERSION\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_thuxuan.quality_measures._int_nqf0041_long\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_thuxuan.quality_measures._int_cbe0101_long' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"PATIENT_ID\" as character varying(16777216)) as \"PATIENT_ID\" ,\n                    cast(\"DENOMINATOR_FLAG\" as NUMBER(38,0)) as \"DENOMINATOR_FLAG\" ,\n                    cast(\"NUMERATOR_FLAG\" as NUMBER(38,0)) as \"NUMERATOR_FLAG\" ,\n                    cast(\"EXCLUSION_FLAG\" as NUMBER(38,0)) as \"EXCLUSION_FLAG\" ,\n                    cast(\"EVIDENCE_DATE\" as DATE) as \"EVIDENCE_DATE\" ,\n                    cast(\"EVIDENCE_VALUE\" as character varying(16777216)) as \"EVIDENCE_VALUE\" ,\n                    cast(\"EXCLUSION_DATE\" as DATE) as \"EXCLUSION_DATE\" ,\n                    cast(\"EXCLUSION_REASON\" as character varying(16777216)) as \"EXCLUSION_REASON\" ,\n                    cast(\"PERFORMANCE_PERIOD_BEGIN\" as DATE) as \"PERFORMANCE_PERIOD_BEGIN\" ,\n                    cast(\"PERFORMANCE_PERIOD_END\" as DATE) as \"PERFORMANCE_PERIOD_END\" ,\n                    cast(\"MEASURE_ID\" as character varying(16777216)) as \"MEASURE_ID\" ,\n                    cast(\"MEASURE_NAME\" as character varying(16777216)) as \"MEASURE_NAME\" ,\n                    cast(\"MEASURE_VERSION\" as character varying(16777216)) as \"MEASURE_VERSION\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_thuxuan.quality_measures._int_cbe0101_long\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_thuxuan.quality_measures._int_cqm48_long' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"PATIENT_ID\" as character varying(16777216)) as \"PATIENT_ID\" ,\n                    cast(\"DENOMINATOR_FLAG\" as NUMBER(38,0)) as \"DENOMINATOR_FLAG\" ,\n                    cast(\"NUMERATOR_FLAG\" as NUMBER(38,0)) as \"NUMERATOR_FLAG\" ,\n                    cast(\"EXCLUSION_FLAG\" as NUMBER(38,0)) as \"EXCLUSION_FLAG\" ,\n                    cast(\"EVIDENCE_DATE\" as DATE) as \"EVIDENCE_DATE\" ,\n                    cast(\"EVIDENCE_VALUE\" as character varying(16777216)) as \"EVIDENCE_VALUE\" ,\n                    cast(\"EXCLUSION_DATE\" as DATE) as \"EXCLUSION_DATE\" ,\n                    cast(\"EXCLUSION_REASON\" as character varying(16777216)) as \"EXCLUSION_REASON\" ,\n                    cast(\"PERFORMANCE_PERIOD_BEGIN\" as DATE) as \"PERFORMANCE_PERIOD_BEGIN\" ,\n                    cast(\"PERFORMANCE_PERIOD_END\" as DATE) as \"PERFORMANCE_PERIOD_END\" ,\n                    cast(\"MEASURE_ID\" as character varying(16777216)) as \"MEASURE_ID\" ,\n                    cast(\"MEASURE_NAME\" as character varying(16777216)) as \"MEASURE_NAME\" ,\n                    cast(\"MEASURE_VERSION\" as character varying(16777216)) as \"MEASURE_VERSION\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_thuxuan.quality_measures._int_cqm48_long\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_thuxuan.quality_measures._int_cqm130_long' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"PATIENT_ID\" as character varying(16777216)) as \"PATIENT_ID\" ,\n                    cast(\"DENOMINATOR_FLAG\" as NUMBER(38,0)) as \"DENOMINATOR_FLAG\" ,\n                    cast(\"NUMERATOR_FLAG\" as NUMBER(38,0)) as \"NUMERATOR_FLAG\" ,\n                    cast(\"EXCLUSION_FLAG\" as NUMBER(38,0)) as \"EXCLUSION_FLAG\" ,\n                    cast(\"EVIDENCE_DATE\" as DATE) as \"EVIDENCE_DATE\" ,\n                    cast(\"EVIDENCE_VALUE\" as character varying(16777216)) as \"EVIDENCE_VALUE\" ,\n                    cast(\"EXCLUSION_DATE\" as DATE) as \"EXCLUSION_DATE\" ,\n                    cast(\"EXCLUSION_REASON\" as character varying(16777216)) as \"EXCLUSION_REASON\" ,\n                    cast(\"PERFORMANCE_PERIOD_BEGIN\" as DATE) as \"PERFORMANCE_PERIOD_BEGIN\" ,\n                    cast(\"PERFORMANCE_PERIOD_END\" as DATE) as \"PERFORMANCE_PERIOD_END\" ,\n                    cast(\"MEASURE_ID\" as character varying(16777216)) as \"MEASURE_ID\" ,\n                    cast(\"MEASURE_NAME\" as character varying(16777216)) as \"MEASURE_NAME\" ,\n                    cast(\"MEASURE_VERSION\" as character varying(16777216)) as \"MEASURE_VERSION\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_thuxuan.quality_measures._int_cqm130_long\n\n            \n        )\n\n        \n\n)\n\n, patient as (\n\n    select distinct patient_id\n    from dev_thuxuan.quality_measures._stg_patient\n\n)\n\n/* selecting the full patient population as the grain of this table */\n, joined as (\n\n    select distinct\n          patient.patient_id\n        , union_measures.denominator_flag\n        , union_measures.numerator_flag\n        , union_measures.exclusion_flag\n        , case\n            when union_measures.exclusion_flag = 1 then null\n            when union_measures.numerator_flag = 1 then 1\n            when union_measures.denominator_flag = 1 then 0\n            else null\n          end as performance_flag\n        , union_measures.evidence_date\n        , union_measures.evidence_value\n        , union_measures.exclusion_date\n        , union_measures.exclusion_reason\n        , union_measures.performance_period_begin\n        , union_measures.performance_period_end\n        , union_measures.measure_id\n        , union_measures.measure_name\n        , union_measures.measure_version\n    from patient\n        left join union_measures\n            on patient.patient_id = union_measures.patient_id\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(performance_flag as integer) as performance_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from joined\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , performance_flag\n    , evidence_date\n    , evidence_value\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures.summary_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:53.314319Z", "completed_at": "2024-10-01T16:35:53.330664Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:53.331664Z", "completed_at": "2024-10-01T16:35:55.042344Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.8669238090515137, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f0111e05a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__summary_counts", "compiled": true, "compiled_code": "\n\nwith summary_long as (\n\n    select\n          measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , performance_flag\n    from dev_thuxuan.quality_measures.summary_long\n    where measure_id is not null\n\n)\n\n, calculate_performance_rate  as (\n\n    select\n          measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n        , sum(denominator_flag) as denominator_sum\n        , sum(numerator_flag) as numerator_sum\n        , sum(exclusion_flag) as exclusion_sum\n        , (\n            cast(sum(performance_flag) as numeric(28,6)) /\n                (cast(count(performance_flag) as numeric(28,6)) )\n          )*100 as performance_rate\n    from summary_long\n    group by\n          measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n\n)\n\n, add_data_types as (\n\n    select\n          cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(denominator_sum as integer) as denominator_sum\n        , cast(numerator_sum as integer) as numerator_sum\n        , cast(exclusion_sum as integer) as exclusion_sum\n        , round(cast(performance_rate as numeric(28,6)),3) as performance_rate\n    from calculate_performance_rate\n\n)\n\nselect\n      measure_id\n    , measure_name\n    , measure_version\n    , performance_period_begin\n    , performance_period_end\n    , denominator_sum\n    , numerator_sum\n    , exclusion_sum\n    , performance_rate\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures.summary_counts"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:53.308791Z", "completed_at": "2024-10-01T16:35:53.319337Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:53.325431Z", "completed_at": "2024-10-01T16:35:55.044556Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.8689231872558594, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f0111e062"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.mart_review__quality_measures_summary_long", "compiled": true, "compiled_code": "\n\n\nselect *\nfrom dev_thuxuan.quality_measures.summary_long s", "relation_name": "dev_thuxuan.data_quality.mart_review__quality_measures_summary_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T16:35:53.320320Z", "completed_at": "2024-10-01T16:35:53.331664Z"}, {"name": "execute", "started_at": "2024-10-01T16:35:53.336671Z", "completed_at": "2024-10-01T16:35:55.140373Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.940122365951538, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b76703-010a-f6d9-0001-987f0111e05e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__summary_wide", "compiled": true, "compiled_code": "\n\n/*\n    Each measure is pivoted into a boolean column by evaluating the\n    denominator, numerator, and exclusion flags.\n*/\nwith measures_long as (\n\n        select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , performance_flag\n        , measure_id\n    from dev_thuxuan.quality_measures.summary_long\n\n)\n\n, nqf_2372 as (\n\n    select\n          patient_id\n        , performance_flag\n    from measures_long\n    where measure_id = 'NQF2372'\n\n)\n\n, nqf_0034 as (\n\n    select\n          patient_id\n        , performance_flag\n    from measures_long\n    where measure_id = 'NQF0034'\n\n)\n\n, nqf_0059 as (\n\n    select\n          patient_id\n        , performance_flag\n    from measures_long\n    where measure_id = 'NQF0059'\n\n)\n\n, cqm_236 as (\n\n    select\n          patient_id\n        , performance_flag\n    from measures_long\n    where measure_id = 'CQM236'\n\n)\n\n, nqf_0053 as (\n\n    select\n          patient_id\n        , performance_flag\n    from measures_long\n    where measure_id = 'NQF0053'\n\n)\n\n, cbe_0055 as (\n\n    select\n          patient_id\n        , performance_flag\n    from measures_long\n    where measure_id = 'CBE0055'\n\n)\n\n, nqf_0097 as (\n\n    select\n          patient_id\n        , performance_flag\n    from measures_long\n    where measure_id = 'NQF0097'\n\n)\n\n, cqm_438 as (\n\n    select\n          patient_id\n        , performance_flag\n    from measures_long\n    where measure_id = 'CQM438'\n\n)\n\n, nqf_0041 as (\n\n    select\n          patient_id\n        , performance_flag\n    from measures_long\n    where measure_id = 'NQF0041'\n\n)\n\n, cbe_0101 as (\n\n    select\n          patient_id\n        , performance_flag\n    from measures_long\n    where measure_id = 'CBE0101'\n\n)\n\n, cqm_48 as (\n\n    select\n          patient_id\n        , performance_flag\n    from measures_long\n    where measure_id = 'CQM48'\n\n)\n\n, cqm_130 as (\n\n    select\n          patient_id\n        , performance_flag\n    from measures_long\n    where measure_id = 'CQM130'\n\n)\n\n, joined as (\n\n    select\n          measures_long.patient_id\n        , max(nqf_2372.performance_flag) as nqf_2372\n        , max(nqf_0034.performance_flag) as nqf_0034\n        , max(nqf_0059.performance_flag) as nqf_0059\n        , max(cqm_236.performance_flag) as cqm_236\n        , max(nqf_0053.performance_flag) as nqf_0053\n        , max(cbe_0055.performance_flag) as cbe_0055\n        , max(nqf_0097.performance_flag) as nqf_0097\n        , max(cqm_438.performance_flag) as cqm_438\n        , max(nqf_0041.performance_flag) as nqf_0041\n        , max(cbe_0101.performance_flag) as cbe_0101\n        , max(cqm_48.performance_flag) as cqm_48\n        , max(cqm_130.performance_flag) as cqm_130\n    from measures_long\n        left join nqf_2372\n            on measures_long.patient_id = nqf_2372.patient_id\n        left join nqf_0034\n            on measures_long.patient_id = nqf_0034.patient_id\n        left join nqf_0059\n            on measures_long.patient_id = nqf_0059.patient_id\n        left join cqm_236\n            on measures_long.patient_id = cqm_236.patient_id\n        left join nqf_0053\n            on measures_long.patient_id = nqf_0053.patient_id\n        left join cbe_0055\n            on measures_long.patient_id = cbe_0055.patient_id\n        left join nqf_0097\n            on measures_long.patient_id = nqf_0097.patient_id\n        left join cqm_438\n            on measures_long.patient_id = cqm_438.patient_id\n        left join nqf_0041\n            on measures_long.patient_id = nqf_0041.patient_id\n        left join cbe_0101\n            on measures_long.patient_id = cbe_0101.patient_id\n        left join cqm_48\n            on measures_long.patient_id = cqm_48.patient_id\n        left join cqm_130\n            on measures_long.patient_id = cqm_130.patient_id\n    group by measures_long.patient_id\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(nqf_2372 as integer) as nqf_2372\n        , cast(nqf_0034 as integer) as nqf_0034\n        , cast(nqf_0059 as integer) as nqf_0059\n        , cast(cqm_236 as integer) as cqm_236\n        , cast(nqf_0053 as integer) as nqf_0053\n        , cast(cbe_0055 as integer) as cbe_0055\n        , cast(nqf_0097 as integer) as nqf_0097\n        , cast(cqm_438 as integer) as cqm_438 \n        , cast(nqf_0041 as integer) as nqf_0041\n        , cast(cbe_0101 as integer) as cbe_0101\n        , cast(cqm_48 as integer) as cqm_48\n        , cast(cqm_130 as integer) as cqm_130\n    from joined\n\n)\n\nselect\n      patient_id\n    , nqf_2372\n    , nqf_0034\n    , nqf_0059\n    , cqm_236\n    , nqf_0053\n    , cbe_0055\n    , nqf_0097\n    , cqm_438\n    , nqf_0041\n    , cbe_0101\n    , cqm_48\n    , cqm_130\n    , '2024-10-01 16:29:14.142894+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_thuxuan.quality_measures.summary_wide"}], "elapsed_time": 400.52558946609497, "args": {"use_colors": true, "favor_state": false, "send_anonymous_usage_stats": true, "resource_types": [], "strict_mode": false, "write_json": true, "partial_parse": true, "require_explicit_package_overrides_for_builtin_materializations": true, "empty": false, "vars": {}, "indirect_selection": "eager", "version_check": true, "cache_selected_only": false, "exclude": [], "log_format_file": "debug", "invocation_command": "dbt build", "introspect": true, "macro_debugging": false, "which": "build", "show_resource_report": false, "log_file_max_bytes": 10485760, "exclude_resource_types": [], "log_level_file": "debug", "log_level": "info", "source_freshness_run_project_hooks": false, "project_dir": "C:\\Users\\thuxuan\\tuva\\integration_tests\\docs_generate", "log_format": "default", "use_colors_file": true, "print": true, "require_resource_names_without_spaces": false, "populate_cache": true, "log_path": "C:\\Users\\thuxuan\\tuva\\integration_tests\\docs_generate\\logs", "export_saved_queries": false, "select": [], "defer": false, "partial_parse_file_diff": true, "show": false, "warn_error_options": {"include": [], "exclude": []}, "profiles_dir": "C:\\Users\\thuxuan\\PycharmProjects", "printer_width": 80, "static_parser": true, "enable_legacy_logger": false, "include_saved_query": false, "quiet": false}}